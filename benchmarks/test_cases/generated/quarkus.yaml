name: Quarkus Migration
description: Test cases for quarkus migration (aggregated from all Quarkus rulesets)
version: 1.0.0
metadata:
  source: Konveyor AI Migration Rules
  language: java
  generated_from: https://github.com/konveyor/rulesets/tree/main/default/generated/quarkus
  category: migration
  total_rulesets_scanned: 337
  total_rules_scanned: 2680
  migration_target: quarkus
rules:
- rule_id: springboot-cloud-config-client-to-quarkus-00000
  description: Replace the Spring Cloud Config Client artifact with Quarkus 'quarkus-spring-cloud-config-client'
    extension
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/222-springboot-cloud-config-client-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the Spring Cloud Config Client artifact with Quarkus 'quarkus-spring-cloud-config-client'
      extension
    code_snippet: "import org.springframework.beans.factory.annotation.Autowired;\n\
      import org.springframework.cloud.context.config.annotation.RefreshScope;\nimport\
      \ org.springframework.stereotype.Component;\nimport org.springframework.cloud.config.environment.Environment;\n\
      \n@Component\n@RefreshScope\npublic class ConfigClient {\n\n    @Autowired\n\
      \    private Environment environment;\n\n    public String getConfigValue(String\
      \ key) {\n        return environment.getProperty(key);\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import io.quarkus.arc.properties.IfBuildProperty;\nimport org.eclipse.microprofile.config.Config;\n\
      \n@ApplicationScoped\n@IfBuildProperty(name = \"quarkus.spring-cloud-config.enabled\"\
      , stringValue = \"true\")\npublic class ConfigClient {\n\n    @Inject\n    private\
      \ Config config;\n\n    public String getConfigValue(String key) {\n       \
      \ return config.getValue(key, String.class);\n    }\n}"
    '# konveyor_guidance': "Replace the Spring Cloud Config Client artifact with Quarkus\
      \ `quarkus-spring-cloud-config-client` extension\n\n Add Quarkus dependency\
      \ `io.quarkus:quarkus-spring-cloud-config-client`.\n \n A change may also be\
      \ required to the code and configuration."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for Environment\npublic class Environment {\n    private Long id;\n\
      \    private String name;\n\n    public Environment() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: springboot-devtools-to-quarkus-0000
  description: Remove spring-boot-devtools dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/224-springboot-devtools-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Remove spring-boot-devtools dependency
    code_snippet: "package com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\n\
      import org.springframework.boot.autoconfigure.SpringBootApplication;\nimport\
      \ org.springframework.boot.devtools.restart.Restarter;\n\n@SpringBootApplication\n\
      public class DemoApplication {\n\n    public static void main(String[] args)\
      \ {\n        SpringApplication.run(DemoApplication.class, args);\n        if\
      \ (Restarter.getInstance().isRunning()) {\n            System.out.println(\"\
      Spring Boot Devtools is active!\");\n        }\n    }\n}"
    expected_fix: "package com.example.demo;\n\nimport io.quarkus.runtime.Quarkus;\n\
      import io.quarkus.runtime.QuarkusApplication;\nimport io.quarkus.runtime.annotations.QuarkusMain;\n\
      \n@QuarkusMain\npublic class DemoApplication implements QuarkusApplication {\n\
      \n    public static void main(String[] args) {\n        Quarkus.run(DemoApplication.class,\
      \ args);\n    }\n\n    @Override\n    public int run(String... args) throws\
      \ Exception {\n        System.out.println(\"Quarkus application is running!\"\
      );\n        return 0;\n    }\n}"
    '# konveyor_guidance': "Remove the spring-boot-devtools dependency.\n Quarkus\
      \ has its own set of development tools integrated by default."
  migration_complexity: low
- rule_id: jms-to-reactive-quarkus-00000
  description: JMS is not supported in Quarkus
  severity: high
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/218-jms-to-reactive-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: JMS is not supported in Quarkus
    code_snippet: "import jakarta.jms.Connection;\nimport jakarta.jms.ConnectionFactory;\n\
      import jakarta.jms.JMSContext;\nimport jakarta.jms.JMSException;\nimport jakarta.jms.Queue;\n\
      import jakarta.jms.Session;\nimport jakarta.jms.TextMessage;\nimport jakarta.annotation.Resource;\n\
      \npublic class JmsExample {\n\n    @Resource(lookup = \"java:/ConnectionFactory\"\
      )\n    private ConnectionFactory connectionFactory;\n\n    @Resource(lookup\
      \ = \"java:/queue/ExampleQueue\")\n    private Queue queue;\n\n    public void\
      \ sendJmsMessage(String messageContent) {\n        try (Connection connection\
      \ = connectionFactory.createConnection();\n             Session session = connection.createSession(false,\
      \ Session.AUTO_ACKNOWLEDGE)) {\n            TextMessage message = session.createTextMessage(messageContent);\n\
      \            session.createProducer(queue).send(message);\n        } catch (JMSException\
      \ e) {\n            e.printStackTrace();\n        }\n    }\n}"
    expected_fix: "import io.smallrye.reactive.messaging.annotations.Broadcast;\n\
      import org.eclipse.microprofile.reactive.messaging.Channel;\nimport org.eclipse.microprofile.reactive.messaging.Emitter;\n\
      \nimport jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      \n@ApplicationScoped\npublic class JmsExample {\n\n    @Inject\n    @Channel(\"\
      example-queue\")\n    Emitter<String> emitter;\n\n    public void sendJmsMessage(String\
      \ messageContent) {\n        emitter.send(messageContent).toCompletableFuture().join();\n\
      \    }\n}"
    '# konveyor_guidance': "Usage of JMS is not supported in Quarkus. It is recommended\
      \ to use Quarkus' SmallRye Reactive Messaging instead of JMS.\n Replace the\
      \ JavaEE/Jakarta JMS dependency with Smallrye Reactive:\n \n ```\n <dependency>\n\
      \ <groupId>io.quarkus</groupId>\n <artifactId>quarkus-smallrye-reactive-messaging</artifactId>\n\
      \ </dependency>\n \n ```\n \n Take a look at the Smallrye Reactive Connectors\
      \ link below to know more about how to interact with different technologies\
      \ (AMQP, Apache Camel, ...)"
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for JMSException\npublic class JMSException {\n    private Long id;\n\
      \    private String name;\n\n    public JMSException() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for ConnectionFactory\npublic class\
      \ ConnectionFactory {\n    private Long id;\n    private String name;\n\n  \
      \  public ConnectionFactory() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for Queue\npublic class Queue {\n    private Long id;\n  \
      \  private String name;\n\n    public Queue() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}"
  migration_complexity: medium
- rule_id: jms-to-reactive-quarkus-00010
  description: '@MessageDriven - EJBs are not supported in Quarkus'
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/218-jms-to-reactive-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: '@MessageDriven - EJBs are not supported in Quarkus'
    code_snippet: "import javax.ejb.MessageDriven;\nimport javax.jms.Message;\nimport\
      \ javax.jms.MessageListener;\n\n@MessageDriven(mappedName = \"java:/jms/queue/MyQueue\"\
      )\npublic class ExampleMessageBean implements MessageListener {\n\n    @Override\n\
      \    public void onMessage(Message message) {\n        try {\n            System.out.println(\"\
      Received message: \" + message.getBody(String.class));\n        } catch (Exception\
      \ e) {\n            e.printStackTrace();\n        }\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\n\
      \n@ApplicationScoped\npublic class ExampleMessageBean {\n\n    @Incoming(\"\
      my-queue\")\n    public void onMessage(org.eclipse.microprofile.reactive.messaging.Message<String>\
      \ message) {\n        try {\n            System.out.println(\"Received message:\
      \ \" + message.getPayload());\n        } catch (Exception e) {\n           \
      \ e.printStackTrace();\n        }\n    }\n}"
    '# konveyor_guidance': "Enterprise Java Beans (EJBs) are not supported in Quarkus.\
      \ CDI must be used.\n Please replace the `@MessageDriven` annotation with a\
      \ CDI scope annotation like `@ApplicationScoped`."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for Exception\npublic class Exception {\n    private Long id;\n  \
      \  private String name;\n\n    public Exception() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for Message\npublic class Message {\n  \
      \  private Long id;\n    private String name;\n\n    public Message() {}\n\n\
      \    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: high
- rule_id: jms-to-reactive-quarkus-00020
  description: Configure message listener method with @Incoming
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/218-jms-to-reactive-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Configure message listener method with @Incoming
    code_snippet: "import jakarta.ejb.ActivationConfigProperty;\nimport jakarta.ejb.MessageDriven;\n\
      import jakarta.jms.Message;\nimport jakarta.jms.MessageListener;\n\n@MessageDriven(name\
      \ = \"HelloWorldQueueMDB\", activationConfig = {\n    @ActivationConfigProperty(propertyName\
      \ = \"destinationLookup\", propertyValue = \"queue/HELLOWORLDMDBQueue\")\n})\n\
      public class MessageListenerImpl implements MessageListener {\n    public void\
      \ onMessage(Message msg) {\n        // Message handling logic\n        System.out.println(\"\
      Received message: \" + msg.toString());\n    }\n}"
    expected_fix: "import org.eclipse.microprofile.reactive.messaging.Incoming;\n\n\
      public class MessageListenerImpl {\n    @Incoming(\"queue/HELLOWORLDMDBQueue\"\
      )\n    public void onMessage(String message) {\n        // Message handling\
      \ logic\n        System.out.println(\"Received message: \" + message);\n   \
      \ }\n}"
    '# konveyor_guidance': "The `destinationLookup` property can be migrated by annotating\
      \ a message handler method (potentially `onMessage`) with the\n `org.eclipse.microprofile.reactive.messaging.Incoming`\
      \ annotation, indicating the name of the queue as a value:\n \n Before:\n ```\n\
      \ @MessageDriven(name = \"HelloWorldQueueMDB\", activationConfig = {{\n @ActivationConfigProperty(propertyName\
      \ = \"destinationLookup\", propertyValue = \"queue/HELLOWORLDMDBQueue\")\n }}\n\
      \ public class MessageListenerImpl implements MessageListener {{\n public void\
      \ onMessage(Message msg) {{\n // ...handler code\n }}\n }}\n ```\n \n After:\n\
      \ ```\n public class MessageListenerImpl implements MessageListener {{\n @Incoming(\"\
      HELLOWORLDMDBQueue\")\n public void onMessage(String message) {{\n // ...handler\
      \ code\n }}\n }}\n ```"
  migration_complexity: medium
- rule_id: jms-to-reactive-quarkus-00030
  description: JMS' Queue must be replaced with an Emitter
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/218-jms-to-reactive-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: JMS' Queue must be replaced with an Emitter
    code_snippet: "import jakarta.annotation.Resource;\nimport jakarta.jms.Queue;\n\
      import jakarta.ejb.Stateless;\n\n@Stateless\npublic class QueueSender {\n\n\
      \    @Resource(lookup = \"java:/queue/HELLOWORLDMDBQueue\")\n    private Queue\
      \ queue;\n\n    public void sendMessage(String message) {\n        // Code to\
      \ send message to the queue\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import org.eclipse.microprofile.reactive.messaging.Channel;\nimport org.eclipse.microprofile.reactive.messaging.Emitter;\n\
      \n@ApplicationScoped\npublic class QueueSender {\n\n    @Inject\n    @Channel(\"\
      HELLOWORLDMDBQueue\")\n    Emitter<String> queueEmitter;\n\n    public void\
      \ sendMessage(String message) {\n        queueEmitter.send(message);\n    }\n\
      }"
    '# konveyor_guidance': "JMS `Queue`s should be replaced with MicroProfile `Emitter`s\
      \ feeding a Channel. See the following example of migrating\n a Queue to an\
      \ Emitter:\n \n Before:\n ```\n @Resource(lookup = \"java:/queue/HELLOWORLDMDBQueue\"\
      )\n private Queue queue;\n ```\n \n After:\n ```\n @Inject\n @Channel(\"HELLOWORLDMDBQueue\"\
      )\n Emitter<String> queueEmitter;\n ```"
  migration_complexity: medium
- rule_id: jms-to-reactive-quarkus-00040
  description: JMS' Topic must be replaced with an Emitter
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/218-jms-to-reactive-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: JMS' Topic must be replaced with an Emitter
    code_snippet: "import javax.annotation.Resource;\nimport javax.jms.Topic;\nimport\
      \ javax.jms.JMSContext;\nimport javax.jms.JMSProducer;\n\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n@ApplicationScoped\npublic class TopicPublisher {\n\n    @Resource(lookup\
      \ = \"java:/topic/HELLOWORLDMDBTopic\")\n    private Topic topic;\n\n    public\
      \ void publishMessage(String message) {\n        JMSContext context = topic.getConnectionFactory().createContext();\n\
      \        JMSProducer producer = context.createProducer();\n        producer.send(topic,\
      \ message);\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import org.eclipse.microprofile.reactive.messaging.Channel;\nimport org.eclipse.microprofile.reactive.messaging.Emitter;\n\
      \n@ApplicationScoped\npublic class TopicPublisher {\n\n    @Inject\n    @Channel(\"\
      HELLOWORLDMDBTopic\")\n    Emitter<String> topicEmitter;\n\n    public void\
      \ publishMessage(String message) {\n        topicEmitter.send(message);\n  \
      \  }\n}"
    '# konveyor_guidance': "JMS `Topic`s should be replaced with MicroProfile `Emitter`s\
      \ feeding a Channel. See the following example of migrating\n a Topic to an\
      \ Emitter:\n \n Before:\n ```\n @Resource(lookup = \"java:/topic/HELLOWORLDMDBTopic\"\
      )\n private Topic topic;\n ```\n \n After:\n ```\n @Inject\n @Channel(\"HELLOWORLDMDBTopic\"\
      )\n Emitter<String> topicEmitter;\n ```"
  migration_complexity: medium
- rule_id: jms-to-reactive-quarkus-00050
  description: JMS is not supported in Quarkus
  severity: high
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/218-jms-to-reactive-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: JMS is not supported in Quarkus
    code_snippet: "import jakarta.ejb.Stateless;\nimport jakarta.jms.Connection;\n\
      import jakarta.jms.ConnectionFactory;\nimport jakarta.jms.JMSContext;\nimport\
      \ jakarta.jms.JMSException;\nimport jakarta.jms.Queue;\nimport jakarta.jms.Session;\n\
      import jakarta.annotation.Resource;\n\n@Stateless\npublic class JmsMessageSender\
      \ {\n\n    @Resource(lookup = \"java:/ConnectionFactory\")\n    private ConnectionFactory\
      \ connectionFactory;\n\n    @Resource(lookup = \"java:/queue/MyQueue\")\n  \
      \  private Queue queue;\n\n    public void sendMessage(String message) {\n \
      \       try (Connection connection = connectionFactory.createConnection();\n\
      \             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE))\
      \ {\n            session.createProducer(queue).send(session.createTextMessage(message));\n\
      \        } catch (JMSException e) {\n            e.printStackTrace();\n    \
      \    }\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import org.eclipse.microprofile.reactive.messaging.Channel;\nimport org.eclipse.microprofile.reactive.messaging.Emitter;\n\
      \n@ApplicationScoped\npublic class JmsMessageSender {\n\n    @Inject\n    @Channel(\"\
      my-queue\")\n    private Emitter<String> emitter;\n\n    public void sendMessage(String\
      \ message) {\n        emitter.send(message);\n    }\n}"
    '# konveyor_guidance': References to JavaEE/JakartaEE JMS elements should be removed
      and replaced with their Quarkus SmallRye/Microprofile equivalents.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for JMSException\npublic class JMSException {\n    private Long id;\n\
      \    private String name;\n\n    public JMSException() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for ConnectionFactory\npublic class\
      \ ConnectionFactory {\n    private Long id;\n    private String name;\n\n  \
      \  public ConnectionFactory() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for Queue\npublic class Queue {\n    private Long id;\n  \
      \  private String name;\n\n    public Queue() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}"
  migration_complexity: medium
- rule_id: springboot-webmvc-to-quarkus-00000
  description: Spring MVC is not supported by Quarkus
  severity: critical
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/237-springboot-webmvc-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Spring MVC is not supported by Quarkus
    code_snippet: "import org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\
      import org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\
      \n@Controller\n@RequestMapping(\"/hello\")\npublic class HelloController {\n\
      \n    @GetMapping\n    @ResponseBody\n    public String sayHello() {\n     \
      \   return \"Hello from Spring MVC!\";\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.ws.rs.GET;\n\
      import jakarta.ws.rs.Path;\nimport jakarta.ws.rs.core.MediaType;\n\n@ApplicationScoped\n\
      @Path(\"/hello\")\npublic class HelloController {\n\n    @GET\n    @jakarta.ws.rs.Produces(MediaType.TEXT_PLAIN)\n\
      \    public String sayHello() {\n        return \"Hello from Spring MVC!\";\n\
      \    }\n}"
    '# konveyor_guidance': "Spring MVC is not supported by Quarkus\n\n Use the following\
      \ link to figure out the supported Spring Web functionalities."
  migration_complexity: low
- rule_id: springboot-webmvc-to-quarkus-01000
  description: Spring WebFlux is not supported by Quarkus
  severity: critical
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/237-springboot-webmvc-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Spring WebFlux is not supported by Quarkus
    code_snippet: "import org.springframework.web.bind.annotation.GetMapping;\nimport\
      \ org.springframework.web.bind.annotation.RestController;\nimport reactor.core.publisher.Flux;\n\
      \n@RestController\npublic class SampleWebFluxController {\n\n    @GetMapping(\"\
      /numbers\")\n    public Flux<Integer> getNumbers() {\n        return Flux.range(1,\
      \ 5);\n    }\n}"
    expected_fix: "import jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.core.MediaType;\n\
      import javax.enterprise.context.ApplicationScoped;\n\nimport io.smallrye.mutiny.Multi;\n\
      \n@ApplicationScoped\n@Path(\"/numbers\")\npublic class SampleWebFluxController\
      \ {\n\n    @GET\n    @jakarta.ws.rs.Produces(MediaType.APPLICATION_JSON)\n \
      \   public Multi<Integer> getNumbers() {\n        return Multi.createFrom().range(1,\
      \ 6);\n    }\n}"
    '# konveyor_guidance': "Spring WebFlux is not supported by Quarkus\n\n If the\
      \ application needs a reactive stack, please refer to the following links to\
      \ get more information."
  migration_complexity: low
- rule_id: springboot-properties-to-quarkus-00000
  description: Replace the SpringBoot artifact with Quarkus 'spring-boot-properties'
    extension
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/232-springboot-properties-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the SpringBoot artifact with Quarkus 'spring-boot-properties'
      extension
    code_snippet: "import org.springframework.boot.context.properties.ConfigurationProperties;\n\
      import org.springframework.stereotype.Component;\n\n@Component\n@ConfigurationProperties(prefix\
      \ = \"app\")\npublic class AppConfig {\n    private String name;\n    private\
      \ int timeout;\n\n    public String getName() {\n        return name;\n    }\n\
      \n    public void setName(String name) {\n        this.name = name;\n    }\n\
      \n    public int getTimeout() {\n        return timeout;\n    }\n\n    public\
      \ void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n}"
    expected_fix: "import io.quarkus.arc.config.ConfigProperties;\n\n@ConfigProperties(prefix\
      \ = \"app\")\npublic class AppConfig {\n    private String name;\n    private\
      \ int timeout;\n\n    public String getName() {\n        return name;\n    }\n\
      \n    public void setName(String name) {\n        this.name = name;\n    }\n\
      \n    public int getTimeout() {\n        return timeout;\n    }\n\n    public\
      \ void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n}"
    '# konveyor_guidance': "Replace the SpringBoot artifact with Quarkus `spring-boot-properties`\
      \ extension\n\n Spring Configuration Properties is in spring-boot artifact brought\
      \ transitively by any `org.springframework.boot:spring-boot-*` dependency\n\
      \ Add Quarkus dependency `io.quarkus:quarkus-spring-boot-properties`"
  migration_complexity: low
- rule_id: springboot-properties-to-quarkus-00001
  description: Spring property profiles in separate files must be refactored into
    Quarkus properties file
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/232-springboot-properties-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Spring property profiles in separate files must be refactored into Quarkus
      properties file
    code_snippet: "import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\
      import org.springframework.context.annotation.PropertySource;\n\n@SpringBootApplication\n\
      @PropertySource(\"classpath:application-dev.properties\")\npublic class SpringBootApp\
      \ {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootApp.class,\
      \ args);\n    }\n}"
    expected_fix: "import io.quarkus.runtime.Quarkus;\nimport io.quarkus.runtime.QuarkusApplication;\n\
      import io.quarkus.runtime.annotations.QuarkusMain;\n\n@QuarkusMain\npublic class\
      \ QuarkusApp implements QuarkusApplication {\n\n    @Override\n    public int\
      \ run(String... args) throws Exception {\n        Quarkus.waitForExit();\n \
      \       return 0;\n    }\n\n    public static void main(String[] args) {\n \
      \       Quarkus.run(QuarkusApp.class, args);\n    }\n}"
    '# konveyor_guidance': "Spring property profile in separate file 'application-{{profile}}.{{extension}}'\
      \ must have\n their individual properties refactored to use Quarkus profile\
      \ naming conventions within a single properties file,\n\n ie in the format %{{profile}}.config.key=value"
  migration_complexity: low
- rule_id: springboot-properties-to-quarkus-00002
  description: Replace Spring datasource property key/value pairs with Quarkus properties
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/232-springboot-properties-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace Spring datasource property key/value pairs with Quarkus properties
    code_snippet: "import org.springframework.beans.factory.annotation.Value;\nimport\
      \ org.springframework.stereotype.Component;\n\n@Component\npublic class DatabaseConfig\
      \ {\n\n    @Value(\"${spring.datasource.url}\")\n    private String url;\n\n\
      \    @Value(\"${spring.datasource.username}\")\n    private String username;\n\
      \n    @Value(\"${spring.datasource.password}\")\n    private String password;\n\
      \n    @Value(\"${spring.datasource.driver-class-name}\")\n    private String\
      \ driverClassName;\n\n    public void printDatabaseConfig() {\n        System.out.println(\"\
      Database URL: \" + url);\n        System.out.println(\"Database Username: \"\
      \ + username);\n        System.out.println(\"Database Password: \" + password);\n\
      \        System.out.println(\"Database Driver: \" + driverClassName);\n    }\n\
      }"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import org.eclipse.microprofile.config.inject.ConfigProperty;\n\n@ApplicationScoped\n\
      public class DatabaseConfig {\n\n    @Inject\n    @ConfigProperty(name = \"\
      quarkus.datasource.jdbc.url\")\n    private String url;\n\n    @Inject\n   \
      \ @ConfigProperty(name = \"quarkus.datasource.username\")\n    private String\
      \ username;\n\n    @Inject\n    @ConfigProperty(name = \"quarkus.datasource.password\"\
      )\n    private String password;\n\n    @Inject\n    @ConfigProperty(name = \"\
      quarkus.datasource.jdbc.driver\")\n    private String driverClassName;\n\n \
      \   public void printDatabaseConfig() {\n        System.out.println(\"Database\
      \ URL: \" + url);\n        System.out.println(\"Database Username: \" + username);\n\
      \        System.out.println(\"Database Password: \" + password);\n        System.out.println(\"\
      Database Driver: \" + driverClassName);\n    }\n}"
    '# konveyor_guidance': "Spring datasource property key/value pairs have been detected\
      \ in the application property file.\n\n View advice in the Quarkus datasource\
      \ guide to convert these to Quarkus datasource properties."
  migration_complexity: low
- rule_id: springboot-properties-to-quarkus-00003
  description: Replace Spring log level property with Quarkus property
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/232-springboot-properties-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace Spring log level property with Quarkus property
    code_snippet: "import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\
      \n@SpringBootApplication\npublic class LoggingApplication {\n\n    public static\
      \ void main(String[] args) {\n        SpringApplication.run(LoggingApplication.class,\
      \ args);\n    }\n}"
    expected_fix: "import io.quarkus.runtime.Quarkus;\nimport io.quarkus.runtime.annotations.QuarkusMain;\n\
      \n@QuarkusMain\npublic class LoggingApplication {\n\n    public static void\
      \ main(String[] args) {\n        Quarkus.run(args);\n    }\n}"
    '# konveyor_guidance': "Spring log level property configuration have been detected\
      \ in the application property file.\n\n View advice in the Quarkus datasource\
      \ guide to convert these to Quarkus log level properties."
  migration_complexity: low
- rule_id: springboot-properties-to-quarkus-00004
  description: Replace Spring JPA Hiberate property with Quarkus property
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/232-springboot-properties-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace Spring JPA Hiberate property with Quarkus property
    code_snippet: "import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\
      import org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\
      \n@SpringBootApplication\npublic class SpringBootApp {\n\n    public static\
      \ void main(String[] args) {\n        SpringApplication.run(SpringBootApp.class,\
      \ args);\n    }\n\n    @Bean\n    @ConfigurationProperties(prefix = \"spring.jpa\"\
      )\n    public HibernateProperties hibernateProperties() {\n        return new\
      \ HibernateProperties();\n    }\n\n    public static class HibernateProperties\
      \ {\n        private String hibernateDdlAuto;\n\n        public String getHibernateDdlAuto()\
      \ {\n            return hibernateDdlAuto;\n        }\n\n        public void\
      \ setHibernateDdlAuto(String hibernateDdlAuto) {\n            this.hibernateDdlAuto\
      \ = hibernateDdlAuto;\n        }\n    }\n}"
    expected_fix: "import io.quarkus.runtime.Quarkus;\nimport io.quarkus.runtime.QuarkusApplication;\n\
      import io.quarkus.arc.config.ConfigProperties;\n\n@io.quarkus.runtime.annotations.QuarkusMain\n\
      public class QuarkusApp {\n\n    public static void main(String[] args) {\n\
      \        Quarkus.run(MyApp.class, args);\n    }\n\n    public static class MyApp\
      \ implements QuarkusApplication {\n        @Override\n        public int run(String...\
      \ args) throws Exception {\n            Quarkus.waitForExit();\n           \
      \ return 0;\n        }\n    }\n\n    @ConfigProperties(prefix = \"quarkus.hibernate-orm\"\
      )\n    public static class HibernateProperties {\n        private String databaseGeneration;\n\
      \n        public String getDatabaseGeneration() {\n            return databaseGeneration;\n\
      \        }\n\n        public void setDatabaseGeneration(String databaseGeneration)\
      \ {\n            this.databaseGeneration = databaseGeneration;\n        }\n\
      \    }\n}"
    '# konveyor_guidance': Replace `spring.jpa.hibernate.ddl-auto=create-drop` with
      `quarkus.hibernate-orm.database.generation=drop-and-create`
  migration_complexity: low
- rule_id: springboot-properties-to-quarkus-00005
  description: Replace Spring Swagger endpoint mapping
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/232-springboot-properties-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace Spring Swagger endpoint mapping
    code_snippet: "import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\
      import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\
      import org.springframework.core.env.Environment;\n\n@SpringBootApplication\n\
      public class SpringSwaggerApp {\n\n    public static void main(String[] args)\
      \ {\n        SpringApplication.run(SpringSwaggerApp.class, args);\n    }\n\n\
      \    @Configuration\n    public static class SwaggerConfig {\n        @Bean\n\
      \        public String swaggerUiPath(Environment env) {\n            return\
      \ env.getProperty(\"springdoc.swagger-ui.path\");\n        }\n    }\n}"
    expected_fix: "import io.quarkus.runtime.Quarkus;\nimport io.quarkus.runtime.QuarkusApplication;\n\
      import io.quarkus.runtime.annotations.QuarkusMain;\nimport javax.enterprise.context.ApplicationScoped;\n\
      import javax.enterprise.inject.Produces;\nimport javax.inject.Inject;\nimport\
      \ org.eclipse.microprofile.config.inject.ConfigProperty;\n\n@QuarkusMain\npublic\
      \ class QuarkusSwaggerApp {\n\n    public static void main(String[] args) {\n\
      \        Quarkus.run(MyApp.class, args);\n    }\n\n    @ApplicationScoped\n\
      \    public static class MyApp implements QuarkusApplication {\n        @Inject\n\
      \        SwaggerConfig swaggerConfig;\n\n        @Override\n        public int\
      \ run(String... args) throws Exception {\n            System.out.println(\"\
      Swagger UI Path: \" + swaggerConfig.swaggerUiPath());\n            Quarkus.waitForExit();\n\
      \            return 0;\n        }\n    }\n\n    @ApplicationScoped\n    public\
      \ static class SwaggerConfig {\n        @ConfigProperty(name = \"quarkus.swagger-ui.path\"\
      )\n        String swaggerUiPath;\n\n        @Produces\n        public String\
      \ swaggerUiPath() {\n            return swaggerUiPath;\n        }\n    }\n}"
    '# konveyor_guidance': "Replace `springdoc.swagger-ui.path` with `quarkus.swagger-ui.path`\n\
      \ \n By adding `quarkus.swagger-ui.always-include=true` Quarkus will always\
      \ expose the Swagger UI endpoint. \n It is only exposed in Dev mode by default."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for Environment\npublic class Environment {\n    private Long id;\n\
      \    private String name;\n\n    public Environment() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: medium
- rule_id: springboot-properties-to-quarkus-00006
  description: Replace Spring OpenAPI endpoint mapping
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/232-springboot-properties-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace Spring OpenAPI endpoint mapping
    code_snippet: "import org.springframework.beans.factory.annotation.Value;\nimport\
      \ org.springframework.stereotype.Component;\n\n@Component\npublic class OpenApiConfig\
      \ {\n\n    @Value(\"${springdoc.api-docs.path}\")\n    private String apiDocsPath;\n\
      \n    public void printApiDocsPath() {\n        System.out.println(\"API Docs\
      \ Path: \" + apiDocsPath);\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import org.eclipse.microprofile.config.inject.ConfigProperty;\n\n@ApplicationScoped\n\
      public class OpenApiConfig {\n\n    @Inject\n    @ConfigProperty(name = \"quarkus.smallrye-openapi.path\"\
      )\n    private String apiDocsPath;\n\n    public void printApiDocsPath() {\n\
      \        System.out.println(\"API Docs Path: \" + apiDocsPath);\n    }\n}"
    '# konveyor_guidance': Replace `springdoc.api-docs.path` with `quarkus.smallrye-openapi.path`
  migration_complexity: low
- rule_id: springboot-web-to-quarkus-00000
  description: Replace the Spring Web artifact with Quarkus 'spring-web' extension
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/236-springboot-web-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the Spring Web artifact with Quarkus 'spring-web' extension
    code_snippet: "import org.springframework.web.bind.annotation.GetMapping;\nimport\
      \ org.springframework.web.bind.annotation.RestController;\n\n@RestController\n\
      public class GreetingController {\n\n    @GetMapping(\"/greeting\")\n    public\
      \ String greeting() {\n        return \"Hello, World!\";\n    }\n}"
    expected_fix: "import jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.core.MediaType;\n\
      \n@Path(\"/greeting\")\npublic class GreetingController {\n\n    @GET\n    @jakarta.ws.rs.Produces(MediaType.TEXT_PLAIN)\n\
      \    public String greeting() {\n        return \"Hello, World!\";\n    }\n}"
    '# konveyor_guidance': "Replace the Spring Web artifact with Quarkus `spring-web`\
      \ extension\n\n Spring Web is a spring-web artifact brought transitively by\
      \ any `org.springframework:spring-web*` dependency \n Add Quarkus dependency\
      \ `io.quarkus:quarkus-spring-web` \n \n Starting with Quarkus version 2.5, the\
      \ underlying JAX-RS engine must be chosen. For performance reasons,\n the `quarkus-resteasy-reactive-jackson`\
      \ dependency should be used."
  migration_complexity: low
- rule_id: springboot-web-to-quarkus-00010
  description: Add the Quarkus 'quarkus-resteasy-reactive-jackson' dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/236-springboot-web-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Add the Quarkus 'quarkus-resteasy-reactive-jackson' dependency
    code_snippet: "package com.example.demo;\n\nimport jakarta.ws.rs.GET;\nimport\
      \ jakarta.ws.rs.Path;\nimport jakarta.ws.rs.Produces;\nimport jakarta.ws.rs.core.MediaType;\n\
      \n@Path(\"/hello\")\npublic class HelloResource {\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n\
      \    public String hello() {\n        return \"{\\\"message\\\":\\\"Hello, World!\\\
      \"}\";\n    }\n}"
    expected_fix: "package com.example.demo;\n\nimport jakarta.ws.rs.GET;\nimport\
      \ jakarta.ws.rs.Path;\nimport jakarta.ws.rs.Produces;\nimport jakarta.ws.rs.core.MediaType;\n\
      \n@Path(\"/hello\")\npublic class HelloResource {\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n\
      \    public String hello() {\n        return \"{\\\"message\\\":\\\"Hello, World!\\\
      \"}\";\n    }\n}"
    '# konveyor_guidance': "Add the Quarkus `quarkus-resteasy-reactive-jackson` dependency.\n\
      \n Starting with Quarkus version 2.5, the underlying JAX-RS engine must be chosen.\
      \ For performance reasons,\n the `quarkus-resteasy-reactive-jackson` dependency\
      \ should be used.\""
  migration_complexity: low
- rule_id: springboot-parent-pom-to-quarkus-00000
  description: Replace the Spring Parent POM with Quarkus BOM
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/230-springboot-parent-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    context: Replace the Spring Parent POM with Quarkus BOM
    code_snippet: "xml\n<!-- pom.xml -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\
      \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       \
      \  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n\
      \        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n\
      \    </parent>\n\n    <groupId>com.example</groupId>\n    <artifactId>spring-to-quarkus-migration</artifactId>\n\
      \    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n        <dependency>\n\
      \            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n\
      \        </dependency>\n    </dependencies>\n</project>"
    expected_fix: "xml\n<!-- pom.xml -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\
      \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       \
      \  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n\
      \    <artifactId>spring-to-quarkus-migration</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\
      \n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n\
      \                <groupId>io.quarkus</groupId>\n                <artifactId>quarkus-bom</artifactId>\n\
      \                <version>2.15.1.Final</version>\n                <type>pom</type>\n\
      \                <scope>import</scope>\n            </dependency>\n        </dependencies>\n\
      \    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n \
      \           <groupId>io.quarkus</groupId>\n            <artifactId>quarkus-resteasy</artifactId>\n\
      \        </dependency>\n    </dependencies>\n</project>"
    '# konveyor_guidance': "Replace the Spring Parent POM with Quarkus BOM in `<dependencyManagement>`\
      \ section of the application's `pom.xml` file. \n Leverage the link below to\
      \ fulfill this change."
    test_code: "// Stub for version\npublic class version {\n    private Long id;\n\
      \    private String name;\n\n    public version() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for type\npublic class type {\n    private\
      \ Long id;\n    private String name;\n\n    public type() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for artifactId\npublic class artifactId\
      \ {\n    private Long id;\n    private String name;\n\n    public artifactId()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for modelVersion\n\
      public class modelVersion {\n    private Long id;\n    private String name;\n\
      \n    public modelVersion() {}\n\n    public Long getId() { return id; }\n \
      \   public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for dependency\npublic class dependency {\n    private Long\
      \ id;\n    private String name;\n\n    public dependency() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for groupId\npublic class groupId\
      \ {\n    private Long id;\n    private String name;\n\n    public groupId()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for dependencyManagement\n\
      public class dependencyManagement {\n    private Long id;\n    private String\
      \ name;\n\n    public dependencyManagement() {}\n\n    public Long getId() {\
      \ return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for dependencies\npublic class dependencies\
      \ {\n    private Long id;\n    private String name;\n\n    public dependencies()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for parent\n\
      public class parent {\n    private Long id;\n    private String name;\n\n  \
      \  public parent() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for scope\npublic class scope {\n    private Long id;\n    private String\
      \ name;\n\n    public scope() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}"
  migration_complexity: low
- rule_id: jaxrs-to-quarkus-00000
  description: Replace JAX-RS dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/217-jaxrs-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace JAX-RS dependency
    code_snippet: "import javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\n\
      import javax.ws.rs.core.MediaType;\n\n@Path(\"/hello\")\npublic class HelloResource\
      \ {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello()\
      \ {\n        return \"Hello, JAX-RS!\";\n    }\n}"
    expected_fix: "import jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.core.MediaType;\n\
      \n@Path(\"/hello\")\npublic class HelloResource {\n\n    @GET\n    @jakarta.ws.rs.Produces(MediaType.TEXT_PLAIN)\n\
      \    public String hello() {\n        return \"Hello, JAX-RS!\";\n    }\n}"
    '# konveyor_guidance': Dependency `org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec`
      has to be replaced with `io.quarkus:quarkus-resteasy-reactive` artifact.
  migration_complexity: low
- rule_id: jaxrs-to-quarkus-00010
  description: Replace JAX-RS dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/217-jaxrs-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace JAX-RS dependency
    code_snippet: "import javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\n\
      import javax.ws.rs.core.MediaType;\n\n@Path(\"/hello\")\npublic class HelloResource\
      \ {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello()\
      \ {\n        return \"Hello, JAX-RS!\";\n    }\n}"
    expected_fix: "import jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.core.MediaType;\n\
      \n@Path(\"/hello\")\npublic class HelloResource {\n\n    @GET\n    @jakarta.ws.rs.Produces(MediaType.TEXT_PLAIN)\n\
      \    public String hello() {\n        return \"Hello, JAX-RS!\";\n    }\n}"
    '# konveyor_guidance': Dependency `javax.ws.rs:javax.ws.rs-api` has to be replaced
      with `io.quarkus:quarkus-resteasy-reactive` artifact.
  migration_complexity: low
- rule_id: jaxrs-to-quarkus-00020
  description: JAX-RS activation is no longer necessary
  severity: low
  category: optional
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/217-jaxrs-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: JAX-RS activation is no longer necessary
    code_snippet: "import jakarta.ws.rs.ApplicationPath;\nimport jakarta.ws.rs.core.Application;\n\
      \n@ApplicationPath(\"/api\")\npublic class RestApplication extends Application\
      \ {\n    // No additional configuration needed for JAX-RS activation\n}"
    expected_fix: "package com.example;\n\npublic class RestApplication {\n    //\
      \ No additional configuration needed for JAX-RS activation\n}"
    '# konveyor_guidance': JAX-RS activation is no longer necessary. You can set a
      root path like this but you don't have to.
  migration_complexity: low
- rule_id: springboot-jpa-to-quarkus-00000
  description: Replace the SpringBoot Data JPA artifact with Quarkus 'spring-data-jpa'
    extension
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/223-springboot-data-jpa-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the SpringBoot Data JPA artifact with Quarkus 'spring-data-jpa'
      extension
    code_snippet: "import org.springframework.data.jpa.repository.JpaRepository;\n\
      import org.springframework.stereotype.Repository;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\nclass User {\n    @Id\n    private\
      \ Long id;\n    private String name;\n\n    // Getters and setters\n    public\
      \ Long getId() {\n        return id;\n    }\n\n    public void setId(Long id)\
      \ {\n        this.id = id;\n    }\n\n    public String getName() {\n       \
      \ return name;\n    }\n\n    public void setName(String name) {\n        this.name\
      \ = name;\n    }\n}\n\n@Repository\npublic interface UserRepository extends\
      \ JpaRepository<User, Long> {\n}"
    expected_fix: "import javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      import io.quarkus.hibernate.orm.panache.PanacheRepository;\nimport javax.enterprise.context.ApplicationScoped;\n\
      \n@Entity\npublic class User {\n    @Id\n    private Long id;\n    private String\
      \ name;\n\n    public Long getId() {\n        return id;\n    }\n\n    public\
      \ void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName()\
      \ {\n        return name;\n    }\n\n    public void setName(String name) {\n\
      \        this.name = name;\n    }\n}\n\n@ApplicationScoped\ninterface UserRepository\
      \ extends PanacheRepository<User> {\n}"
    '# konveyor_guidance': "Replace the SpringBoot JPA artifact with Quarkus `spring-data-jpa`\
      \ extension\n\n Spring Data JPA is in spring-data-jpa artifact brought transitively\
      \ by any `org.springframework.data:spring-data-*` dependency \n Add Quarkus\
      \ dependency `io.quarkus:quarkus-spring-data-jpa`"
  migration_complexity: low
- rule_id: springboot-security-to-quarkus-00000
  description: Replace the SpringBoot Security artifact with Quarkus 'spring-security'
    extension
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/234-springboot-security-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    compilable: false
    reason: "Requires internal Quarkus/Wildfly security APIs (RedirectingFormAuthenticationMechanism, InMemorySecurityRealm) not available in stubs. EXPERT-level migration requiring architectural changes."
    context: Replace the SpringBoot Security artifact with Quarkus 'spring-security'
      extension
    code_snippet: "package com.example.demo;\n\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n\
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n\
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\
      \n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\
      \ {\n\n    @Override\n    protected void configure(HttpSecurity http) throws\
      \ Exception {\n        http\n            .authorizeRequests()\n            .antMatchers(\"\
      /\", \"/home\").permitAll()\n            .anyRequest().authenticated()\n   \
      \         .and()\n            .formLogin()\n            .loginPage(\"/login\"\
      )\n            .permitAll()\n            .and()\n            .logout()\n   \
      \         .permitAll();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder\
      \ auth) throws Exception {\n        auth\n            .inMemoryAuthentication()\n\
      \            .withUser(\"user\").password(\"{noop}password\").roles(\"USER\"\
      );\n    }\n}"
    expected_fix: "package com.example.demo;\n\nimport io.quarkus.security.identity.SecurityIdentity;\n\
      import io.quarkus.security.Authenticated;\nimport io.quarkus.elytron.security.common.BcryptUtil;\n\
      import io.quarkus.runtime.StartupEvent;\n\nimport javax.enterprise.context.ApplicationScoped;\n\
      import javax.enterprise.event.Observes;\nimport javax.inject.Inject;\nimport\
      \ javax.annotation.security.PermitAll;\nimport javax.annotation.security.RolesAllowed;\n\
      \nimport org.eclipse.microprofile.config.inject.ConfigProperty;\n\nimport io.quarkus.arc.Unremovable;\n\
      import io.quarkus.security.spi.runtime.AuthorizationController;\nimport io.quarkus.security.web.authentication.RedirectingFormAuthenticationMechanism;\n\
      import io.quarkus.security.web.authentication.logout.RedirectingLogoutHandler;\n\
      \nimport io.quarkus.elytron.security.common.BcryptUtil;\nimport io.quarkus.runtime.StartupEvent;\n\
      import org.wildfly.security.auth.realm.InMemorySecurityRealm;\nimport org.wildfly.security.auth.server.SecurityDomain;\n\
      import org.wildfly.security.auth.server.SecurityRealm;\nimport org.wildfly.security.password.PasswordFactory;\n\
      import org.wildfly.security.password.interfaces.BCryptPassword;\nimport org.wildfly.security.password.util.ModularCrypt;\n\
      \nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.event.Observes;\n\
      \n@ApplicationScoped\npublic class SecurityConfig {\n\n    @Inject\n    AuthorizationController\
      \ authorizationController;\n\n    public void onStart(@Observes StartupEvent\
      \ ev) {\n        InMemorySecurityRealm.Builder builder = InMemorySecurityRealm.builder();\n\
      \        builder.addIdentity(\"user\", BcryptUtil.bcryptHash(\"password\"),\
      \ new String[]{\"USER\"});\n        SecurityRealm realm = builder.build();\n\
      \        SecurityDomain.builder()\n                .addRealm(\"default\", realm).build()\n\
      \                .setDefaultRealmName(\"default\")\n                .build();\n\
      \    }\n\n    @PermitAll\n    public void home() {\n    }\n\n    @Authenticated\n\
      \    public void secured() {\n    }\n\n    @RolesAllowed(\"USER\")\n    public\
      \ void userOnly() {\n    }\n\n    public void setup(@Observes StartupEvent ev)\
      \ {\n        RedirectingFormAuthenticationMechanism.Builder auth = RedirectingFormAuthenticationMechanism.builder();\n\
      \        auth.setLoginPath(\"/login\");\n        auth.setRestorePath(\"/home\"\
      );\n        auth.setPostLocation(\"/home\");\n\n        RedirectingLogoutHandler.Builder\
      \ logout = RedirectingLogoutHandler.builder();\n        logout.setRedirectUri(\"\
      /home\");\n    }\n}"
    '# konveyor_guidance': "Replace the SpringBoot Security artifact with Quarkus\
      \ `spring-security` extension\n\n Spring Security is in spring-security-core\
      \ artifact brought transitively by `org.springframework.boot:spring-boot-starter-security`\
      \ dependency. \n Add Quarkus dependency `io.quarkus:quarkus-spring-security`"
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for HttpSecurity\npublic class HttpSecurity {\n    private Long id;\n\
      \    private String name;\n\n    public HttpSecurity() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for AuthenticationManagerBuilder\n\
      public class AuthenticationManagerBuilder {\n    private Long id;\n    private\
      \ String name;\n\n    public AuthenticationManagerBuilder() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: expert
- rule_id: springboot-cache-to-quarkus-00000
  description: Replace the SpringBoot cache artifact with Quarkus 'spring-cache' extension
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/221-springboot-cache-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the SpringBoot cache artifact with Quarkus 'spring-cache' extension
    code_snippet: "import org.springframework.cache.annotation.Cacheable;\nimport\
      \ org.springframework.stereotype.Service;\n\n@Service\npublic class BookService\
      \ {\n\n    @Cacheable(\"books\")\n    public Book findBook(String isbn) {\n\
      \        simulateSlowService();\n        return new Book(isbn, \"Some Book Title\"\
      );\n    }\n\n    private void simulateSlowService() {\n        try {\n     \
      \       long time = 3000L;\n            Thread.sleep(time);\n        } catch\
      \ (InterruptedException e) {\n            throw new IllegalStateException(e);\n\
      \        }\n    }\n}\n\nclass Book {\n    private String isbn;\n    private\
      \ String title;\n\n    public Book(String isbn, String title) {\n        this.isbn\
      \ = isbn;\n        this.title = title;\n    }\n\n    // Getters and setters\n\
      \    public String getIsbn() {\n        return isbn;\n    }\n\n    public void\
      \ setIsbn(String isbn) {\n        this.isbn = isbn;\n    }\n\n    public String\
      \ getTitle() {\n        return title;\n    }\n\n    public void setTitle(String\
      \ title) {\n        this.title = title;\n    }\n}"
    expected_fix: "import org.springframework.cache.annotation.Cacheable;\nimport\
      \ jakarta.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic\
      \ class BookService {\n\n    @Cacheable(\"books\")\n    public Book findBook(String\
      \ isbn) {\n        simulateSlowService();\n        return new Book(isbn, \"\
      Some Book Title\");\n    }\n\n    private void simulateSlowService() {\n   \
      \     try {\n            long time = 3000L;\n            Thread.sleep(time);\n\
      \        } catch (InterruptedException e) {\n            throw new IllegalStateException(e);\n\
      \        }\n    }\n}\n\nclass Book {\n    private String isbn;\n    private\
      \ String title;\n\n    public Book(String isbn, String title) {\n        this.isbn\
      \ = isbn;\n        this.title = title;\n    }\n\n    public String getIsbn()\
      \ {\n        return isbn;\n    }\n\n    public void setIsbn(String isbn) {\n\
      \        this.isbn = isbn;\n    }\n\n    public String getTitle() {\n      \
      \  return title;\n    }\n\n    public void setTitle(String title) {\n      \
      \  this.title = title;\n    }\n}"
    '# konveyor_guidance': "Replace the SpringBoot Cache module artifact with Quarkus\
      \ `spring-cache` extension\n\n Add Quarkus dependency `io.quarkus:quarkus-spring-cache`"
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for InterruptedException\npublic class InterruptedException {\n  \
      \  private Long id;\n    private String name;\n\n    public InterruptedException()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: dependency-removal-for-quarkus-00000
  description: Remove non-quarkus dependencies
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/211-dependency-removal-for-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Remove non-quarkus dependencies
    code_snippet: "import org.springframework.beans.factory.annotation.Autowired;\n\
      import org.springframework.stereotype.Component;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\n@Component\npublic class InventoryService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    @Autowired\n    private ProductService productService;\n\n    public void\
      \ updateInventory(Long productId, int quantity) {\n        productService.updateProductStock(productId,\
      \ quantity);\n        entityManager.createQuery(\"UPDATE Product p SET p.stock\
      \ = p.stock - :quantity WHERE p.id = :productId\")\n                     .setParameter(\"\
      quantity\", quantity)\n                     .setParameter(\"productId\", productId)\n\
      \                     .executeUpdate();\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      \n@ApplicationScoped\npublic class InventoryService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    @Inject\n    private ProductService\
      \ productService;\n\n    public void updateInventory(Long productId, int quantity)\
      \ {\n        productService.updateProductStock(productId, quantity);\n     \
      \   entityManager.createQuery(\"UPDATE Product p SET p.stock = p.stock - :quantity\
      \ WHERE p.id = :productId\")\n                     .setParameter(\"quantity\"\
      , quantity)\n                     .setParameter(\"productId\", productId)\n\
      \                     .executeUpdate();\n    }\n}\n\n// Assuming ProductService\
      \ is defined elsewhere in the application\nclass ProductService {\n    public\
      \ void updateProductStock(Long productId, int quantity) {\n        // Implementation\
      \ goes here\n    }\n}"
    '# konveyor_guidance': Non-quarkus dependencies are no longer required and can
      be removed.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for ProductService\npublic interface ProductService {\n    void process();\n\
      }\n\n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: remote-ejb-to-quarkus-00000
  description: Remote EJBs are not supported in Quarkus
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/202-remote-ejb-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Remote EJBs are not supported in Quarkus
    code_snippet: "import jakarta.ejb.Remote;\nimport jakarta.ejb.Stateless;\n\n@Remote\n\
      @Stateless\npublic class CalculatorService {\n\n    public int add(int a, int\
      \ b) {\n        return a + b;\n    }\n\n    public int subtract(int a, int b)\
      \ {\n        return a - b;\n    }\n}"
    expected_fix: "import jakarta.ws.rs.Path;\nimport jakarta.ws.rs.GET;\nimport jakarta.ws.rs.POST;\n\
      import jakarta.ws.rs.QueryParam;\nimport jakarta.ws.rs.core.Response;\n\n@Path(\"\
      /calculator\")\npublic class CalculatorService {\n\n    @POST\n    @Path(\"\
      /add\")\n    public Response add(@QueryParam(\"a\") int a, @QueryParam(\"b\"\
      ) int b) {\n        int result = a + b;\n        return Response.ok(result).build();\n\
      \    }\n\n    @POST\n    @Path(\"/subtract\")\n    public Response subtract(@QueryParam(\"\
      a\") int a, @QueryParam(\"b\") int b) {\n        int result = a - b;\n     \
      \   return Response.ok(result).build();\n    }\n}"
    '# konveyor_guidance': "Remote EJBs are not supported in Quarkus, and therefore\
      \ its use must be removed and replaced with REST functionality. In order to\
      \ do this:\n 1. Replace the `@Remote` annotation on the class with a `@jakarta.ws.rs.Path(\"\
      <endpoint>\")` annotation. An endpoint must be added to the annotation in place\
      \ of `<endpoint>` to specify the actual path to the REST service.\n 2. Remove\
      \ `@Stateless` annotations if present. Given that REST services are stateless\
      \ by nature, it makes it unnecessary.\n 3. For every public method on the EJB\
      \ being converted, do the following:\n - In case the method has no input parameters,\
      \ annotate the method with `@jakarta.ws.rs.GET`; otherwise annotate it with\
      \ `@jakarta.ws.rs.POST` instead.\n - Annotate the method with `@jakarta.ws.rs.Path(\"\
      <endpoint>\")` and give it a proper endpoint path. As a rule of thumb, the method\
      \ name can be used as endpoint, for instance:\n ```\n @Path(\"/increment\")\n\
      \ public void increment() {{ ... }}\n ```\n - Add `@jakarta.ws.rs.QueryParam(\"\
      <param-name>\")` to any method parameters if needed, where `<param-name>` is\
      \ a name for the parameter."
    test_code: "// Stub for Response\npublic class Response {\n    private Long id;\n\
      \    private String name;\n\n    public Response() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}"
  migration_complexity: low
- rule_id: javaee-pom-to-quarkus-00000
  description: The expected project artifact's extension is `jar`
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/216-javaee-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    context: The expected project artifact's extension is `jar`
    code_snippet: "xml\n<!-- pom.xml -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\
      \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       \
      \  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n\
      \    <artifactId>enterprise-application</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\
      \    <packaging>war</packaging> <!-- Violation: packaging should be jar -->\n\
      \n    <dependencies>\n        <!-- Example dependency -->\n        <dependency>\n\
      \            <groupId>jakarta.platform</groupId>\n            <artifactId>jakarta.jakartaee-api</artifactId>\n\
      \            <version>9.1.0</version>\n            <scope>provided</scope>\n\
      \        </dependency>\n    </dependencies>\n</project>"
    expected_fix: "xml\n<!-- pom.xml -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\
      \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       \
      \  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n\
      \    <artifactId>enterprise-application</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\
      \    <packaging>jar</packaging> <!-- Fixed: packaging is now jar -->\n\n   \
      \ <dependencies>\n        <!-- Example dependency -->\n        <dependency>\n\
      \            <groupId>jakarta.platform</groupId>\n            <artifactId>jakarta.jakartaee-api</artifactId>\n\
      \            <version>9.1.0</version>\n            <scope>provided</scope>\n\
      \        </dependency>\n    </dependencies>\n</project>"
    '# konveyor_guidance': The project artifact's current extension (i.e. `<packaging>`
      tag value) is `{{notJar}}` but the expected value should be `jar`
    test_code: "// Stub for version\npublic class version {\n    private Long id;\n\
      \    private String name;\n\n    public version() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for artifactId\npublic class artifactId\
      \ {\n    private Long id;\n    private String name;\n\n    public artifactId()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for modelVersion\n\
      public class modelVersion {\n    private Long id;\n    private String name;\n\
      \n    public modelVersion() {}\n\n    public Long getId() { return id; }\n \
      \   public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for packaging\npublic class packaging {\n    private Long\
      \ id;\n    private String name;\n\n    public packaging() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for dependency\npublic class dependency\
      \ {\n    private Long id;\n    private String name;\n\n    public dependency()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for groupId\n\
      public class groupId {\n    private Long id;\n    private String name;\n\n \
      \   public groupId() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for dependencies\npublic class dependencies {\n    private Long id;\n\
      \    private String name;\n\n    public dependencies() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for scope\npublic class scope {\n\
      \    private Long id;\n    private String name;\n\n    public scope() {}\n\n\
      \    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: javaee-pom-to-quarkus-00010
  description: Adopt Quarkus BOM
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/216-javaee-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    context: Adopt Quarkus BOM
    code_snippet: "xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   \
      \      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"\
      http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n\
      \    <artifactId>javaee-to-quarkus-migration</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\
      \n    <dependencies>\n        <dependency>\n            <groupId>io.quarkus</groupId>\n\
      \            <artifactId>quarkus-resteasy</artifactId>\n            <version>3.1.0.Final</version>\n\
      \        </dependency>\n        <dependency>\n            <groupId>io.quarkus</groupId>\n\
      \            <artifactId>quarkus-hibernate-orm-panache</artifactId>\n      \
      \      <version>3.1.0.Final</version>\n        </dependency>\n    </dependencies>\n\
      </project>"
    expected_fix: "xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   \
      \      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"\
      http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n\
      \    <artifactId>javaee-to-quarkus-migration</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\
      \n    <properties>\n        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n\
      \        <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>\n\
      \        <quarkus.platform.version>3.1.0.Final</quarkus.platform.version>\n\
      \    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n \
      \           <dependency>\n                <groupId>${quarkus.platform.group-id}</groupId>\n\
      \                <artifactId>${quarkus.platform.artifact-id}</artifactId>\n\
      \                <version>${quarkus.platform.version}</version>\n          \
      \      <type>pom</type>\n                <scope>import</scope>\n           \
      \ </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n  \
      \  <dependencies>\n        <dependency>\n            <groupId>io.quarkus</groupId>\n\
      \            <artifactId>quarkus-resteasy</artifactId>\n        </dependency>\n\
      \        <dependency>\n            <groupId>io.quarkus</groupId>\n         \
      \   <artifactId>quarkus-hibernate-orm-panache</artifactId>\n        </dependency>\n\
      \    </dependencies>\n</project>"
    '# konveyor_guidance': "Use the Quarkus BOM to omit the version of the different\
      \ Quarkus dependencies. \n Add the following sections to the `pom.xml` file:\
      \ \n\n ```xml\n <properties> \n <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\
      \ \n <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>\
      \ \n <quarkus.platform.version>3.1.0.Final</quarkus.platform.version>\n </properties>\
      \ \n <dependencyManagement> \n <dependencies> \n <dependency> \n <groupId>${{quarkus.platform.group-id}}</groupId>\
      \ \n <artifactId>${{quarkus.platform.artifact-id}}</artifactId> \n <version>${{quarkus.platform.version}}</version>\
      \ \n <type>pom</type> \n <scope>import</scope> \n </dependency> \n </dependencies>\
      \ \n </dependencyManagement> \n ```\n Check the latest Quarkus version available\
      \ from the `Quarkus - Releases` link below."
    test_code: "// Stub for version\npublic class version {\n    private Long id;\n\
      \    private String name;\n\n    public version() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for type\npublic class type {\n    private\
      \ Long id;\n    private String name;\n\n    public type() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for artifactId\npublic class artifactId\
      \ {\n    private Long id;\n    private String name;\n\n    public artifactId()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for modelVersion\n\
      public class modelVersion {\n    private Long id;\n    private String name;\n\
      \n    public modelVersion() {}\n\n    public Long getId() { return id; }\n \
      \   public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for dependency\npublic class dependency {\n    private Long\
      \ id;\n    private String name;\n\n    public dependency() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for properties\npublic class properties\
      \ {\n    private Long id;\n    private String name;\n\n    public properties()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for groupId\n\
      public class groupId {\n    private Long id;\n    private String name;\n\n \
      \   public groupId() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for dependencyManagement\npublic class dependencyManagement {\n    private\
      \ Long id;\n    private String name;\n\n    public dependencyManagement() {}\n\
      \n    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for dependencies\npublic class dependencies\
      \ {\n    private Long id;\n    private String name;\n\n    public dependencies()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for scope\n\
      public class scope {\n    private Long id;\n    private String name;\n\n   \
      \ public scope() {}\n\n    public Long getId() { return id; }\n    public void\
      \ setId(Long id) { this.id = id; }\n    public String getName() { return name;\
      \ }\n    public void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: javaee-pom-to-quarkus-00020
  description: Adopt Quarkus Maven plugin
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/216-javaee-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    compilable: false
    reason: XML configuration file - pom.xml modification
    context: Adopt Quarkus Maven plugin
    code_snippet: <!-- pom.xml without quarkus-maven-plugin -->
    expected_fix: "<properties>\n    <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>\n\
      \    <quarkus.platform.version>3.1.0.Final</quarkus.platform.version>\n</properties>\n\
      <build>\n    <plugins>\n        <plugin>\n            <groupId>${quarkus.platform.group-id}</groupId>\n\
      \            <artifactId>quarkus-maven-plugin</artifactId>\n            <version>${quarkus.platform.version}</version>\n\
      \            <extensions>true</extensions>\n            <executions>\n     \
      \           <execution>\n                    <goals>\n                     \
      \   <goal>build</goal>\n                        <goal>generate-code</goal>\n\
      \                        <goal>generate-code-tests</goal>\n                \
      \    </goals>\n                </execution>\n            </executions>\n   \
      \     </plugin>\n    </plugins>\n</build>"
    '# konveyor_guidance': "Use the Quarkus Maven plugin adding the following sections\
      \ to the `pom.xml` file: \n\n ```xml\n <properties> \n <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>\
      \ \n <quarkus.platform.version>3.1.0.Final</quarkus.platform.version>\n </properties>\
      \ \n <build>\n <plugins>\n <plugin>\n <groupId>${{quarkus.platform.group-id}}</groupId>\n\
      \ <artifactId>quarkus-maven-plugin</artifactId>\n <version>${{quarkus.platform.version}}</version>\n\
      \ <extensions>true</extensions>\n <executions>\n <execution>\n <goals>\n <goal>build</goal>\n\
      \ <goal>generate-code</goal>\n <goal>generate-code-tests</goal>\n </goals>\n\
      \ </execution>\n </executions>\n </plugin>\n </plugins>\n </build>\n ```"
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for version\npublic class version {\n    private Long id;\n    private\
      \ String name;\n\n    public version() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}\n\n// Stub for execution\npublic class execution {\n    private\
      \ Long id;\n    private String name;\n\n    public execution() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for EntityManager\npublic class\
      \ EntityManager {\n    private Long id;\n    private String name;\n\n    public\
      \ EntityManager() {}\n\n    public Long getId() { return id; }\n    public void\
      \ setId(Long id) { this.id = id; }\n    public String getName() { return name;\
      \ }\n    public void setName(String name) { this.name = name; }\n}\n\n// Stub\
      \ for plugins\npublic class plugins {\n    private Long id;\n    private String\
      \ name;\n\n    public plugins() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for plugin\npublic class plugin {\n    private Long id;\n\
      \    private String name;\n\n    public plugin() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for artifactId\npublic class artifactId\
      \ {\n    private Long id;\n    private String name;\n\n    public artifactId()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for extensions\n\
      public class extensions {\n    private Long id;\n    private String name;\n\n\
      \    public extensions() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for goals\npublic class goals {\n    private Long id;\n    private String\
      \ name;\n\n    public goals() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for goal\npublic class goal {\n    private Long id;\n    private\
      \ String name;\n\n    public goal() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for properties\npublic class properties {\n    private Long\
      \ id;\n    private String name;\n\n    public properties() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for build\npublic class build {\n\
      \    private Long id;\n    private String name;\n\n    public build() {}\n\n\
      \    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for groupId\npublic class groupId\
      \ {\n    private Long id;\n    private String name;\n\n    public groupId()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for executions\n\
      public class executions {\n    private Long id;\n    private String name;\n\n\
      \    public executions() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: javaee-pom-to-quarkus-00030
  description: Adopt Maven Compiler plugin
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/216-javaee-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    context: Adopt Maven Compiler plugin
    code_snippet: "xml\n<!-- pom.xml -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\
      \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       \
      \  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n\
      \    <artifactId>javaee-to-quarkus-migration</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\
      \n    <build>\n        <plugins>\n            <!-- Missing Maven Compiler Plugin\
      \ configuration as per the rule javaee-pom-to-quarkus-00030 -->\n          \
      \  <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n\
      \                <version>3.8.1</version> <!-- Incorrect version without using\
      \ properties -->\n                <configuration>\n                    <source>1.8</source>\
      \ <!-- Deprecated configuration not using <maven.compiler.release> -->\n   \
      \                 <target>1.8</target> <!-- Deprecated configuration not using\
      \ <maven.compiler.release> -->\n                </configuration>\n         \
      \   </plugin>\n        </plugins>\n    </build>\n</project>"
    expected_fix: "xml\n<!-- pom.xml -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\
      \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       \
      \  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n\
      \    <artifactId>javaee-to-quarkus-migration</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\
      \n    <properties>\n        <compiler-plugin.version>3.10.1</compiler-plugin.version>\n\
      \        <maven.compiler.release>11</maven.compiler.release>\n    </properties>\n\
      \n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n\
      \                <version>${compiler-plugin.version}</version>\n           \
      \     <configuration>\n                    <release>${maven.compiler.release}</release>\n\
      \                    <compilerArgs>\n                        <arg>-parameters</arg>\n\
      \                    </compilerArgs>\n                </configuration>\n   \
      \         </plugin>\n        </plugins>\n    </build>\n</project>"
    '# konveyor_guidance': "Use the Maven Compiler plugin adding the following sections\
      \ to the `pom.xml` file: \n\n ```xml\n <properties> \n <compiler-plugin.version>3.10.1</compiler-plugin.version>\n\
      \ <maven.compiler.release>11</maven.compiler.release>\n </properties> \n <build>\n\
      \ <plugins>\n <plugin>\n <artifactId>maven-compiler-plugin</artifactId>\n <version>${{compiler-plugin.version}}</version>\n\
      \ <configuration>\n <compilerArgs>\n <arg>-parameters</arg>\n </compilerArgs>\n\
      \ </configuration>\n </plugin>\n </plugins>\n </build>\n ```"
    test_code: "// Stub for version\npublic class version {\n    private Long id;\n\
      \    private String name;\n\n    public version() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for release\npublic class release {\n  \
      \  private Long id;\n    private String name;\n\n    public release() {}\n\n\
      \    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for arg\npublic class arg {\n  \
      \  private Long id;\n    private String name;\n\n    public arg() {}\n\n   \
      \ public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for plugins\npublic class plugins\
      \ {\n    private Long id;\n    private String name;\n\n    public plugins()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for artifactId\n\
      public class artifactId {\n    private Long id;\n    private String name;\n\n\
      \    public artifactId() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for plugin\npublic class plugin {\n    private Long id;\n    private\
      \ String name;\n\n    public plugin() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}\n\n// Stub for modelVersion\npublic class modelVersion {\n  \
      \  private Long id;\n    private String name;\n\n    public modelVersion() {}\n\
      \n    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for compilerArgs\npublic class compilerArgs\
      \ {\n    private Long id;\n    private String name;\n\n    public compilerArgs()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for target\n\
      public class target {\n    private Long id;\n    private String name;\n\n  \
      \  public target() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for source\npublic class source {\n    private Long id;\n    private\
      \ String name;\n\n    public source() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}\n\n// Stub for properties\npublic class properties {\n    private\
      \ Long id;\n    private String name;\n\n    public properties() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for groupId\npublic class groupId\
      \ {\n    private Long id;\n    private String name;\n\n    public groupId()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for build\n\
      public class build {\n    private Long id;\n    private String name;\n\n   \
      \ public build() {}\n\n    public Long getId() { return id; }\n    public void\
      \ setId(Long id) { this.id = id; }\n    public String getName() { return name;\
      \ }\n    public void setName(String name) { this.name = name; }\n}\n\n// Stub\
      \ for configuration\npublic class configuration {\n    private Long id;\n  \
      \  private String name;\n\n    public configuration() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: javaee-pom-to-quarkus-00040
  description: Adopt Maven Surefire plugin
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/216-javaee-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    compilable: false
    reason: XML configuration file - pom.xml modification
    context: Adopt Maven Surefire plugin
    code_snippet: <!-- pom.xml without maven-surefire-plugin configuration -->
    expected_fix: "<properties>\n    <surefire-plugin.version>3.0.0</surefire-plugin.version>\n\
      </properties>\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n\
      \            <artifactId>maven-surefire-plugin</artifactId>\n            <version>${surefire-plugin.version}</version>\n\
      \            <configuration>\n                <systemPropertyVariables>\n  \
      \                  <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n\
      \                    <maven.home>${maven.home}</maven.home>\n              \
      \  </systemPropertyVariables>\n            </configuration>\n        </plugin>\n\
      \    </plugins>\n</build>"
    '# konveyor_guidance': "Use the Maven Surefire plugin adding the following sections\
      \ to the `pom.xml` file: \n\n ```xml\n <properties> \n <surefire-plugin.version>3.0.0</compiler-plugin.version>\n\
      \ </properties> \n <build>\n <plugins>\n <plugin>\n <artifactId>maven-surefire-plugin</artifactId>\n\
      \ <version>${{surefire-plugin.version}}</version>\n <configuration>\n <systemPropertyVariables>\n\
      \ <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n\
      \ <maven.home>${{maven.home}}</maven.home>\n </systemPropertyVariables>\n </configuration>\n\
      \ </plugin>\n </plugins>\n </build>\n ```"
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for version\npublic class version {\n    private Long id;\n    private\
      \ String name;\n\n    public version() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}\n\n// Stub for EntityManager\npublic class EntityManager {\n\
      \    private Long id;\n    private String name;\n\n    public EntityManager()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for plugins\n\
      public class plugins {\n    private Long id;\n    private String name;\n\n \
      \   public plugins() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for plugin\npublic class plugin {\n    private Long id;\n    private\
      \ String name;\n\n    public plugin() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}\n\n// Stub for artifactId\npublic class artifactId {\n    private\
      \ Long id;\n    private String name;\n\n    public artifactId() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for properties\npublic class properties\
      \ {\n    private Long id;\n    private String name;\n\n    public properties()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for build\n\
      public class build {\n    private Long id;\n    private String name;\n\n   \
      \ public build() {}\n\n    public Long getId() { return id; }\n    public void\
      \ setId(Long id) { this.id = id; }\n    public String getName() { return name;\
      \ }\n    public void setName(String name) { this.name = name; }\n}\n\n// Stub\
      \ for groupId\npublic class groupId {\n    private Long id;\n    private String\
      \ name;\n\n    public groupId() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for systemPropertyVariables\npublic class systemPropertyVariables\
      \ {\n    private Long id;\n    private String name;\n\n    public systemPropertyVariables()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for configuration\n\
      public class configuration {\n    private Long id;\n    private String name;\n\
      \n    public configuration() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}"
  migration_complexity: low
- rule_id: javaee-pom-to-quarkus-00050
  description: Adopt Maven Failsafe plugin
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/216-javaee-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    context: Adopt Maven Failsafe plugin
    code_snippet: "xml\n<!-- pom.xml -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\
      \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       \
      \  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n\
      \    <artifactId>javaee-to-quarkus</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\
      \    <properties>\n        <maven.compiler.source>11</maven.compiler.source>\n\
      \        <maven.compiler.target>11</maven.compiler.target>\n    </properties>\n\
      \    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-surefire-plugin</artifactId>\n\
      \                <version>3.0.0</version>\n                <configuration>\n\
      \                    <!-- Configuration intended for unit tests -->\n      \
      \              <includes>\n                        <include>**/*Test.java</include>\n\
      \                    </includes>\n                </configuration>\n       \
      \     </plugin>\n        </plugins>\n    </build>\n</project>"
    expected_fix: "xml\n<!-- pom.xml -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\
      \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       \
      \  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\
      >\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n\
      \    <artifactId>javaee-to-quarkus</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\
      \    <properties>\n        <maven.compiler.source>11</maven.compiler.source>\n\
      \        <maven.compiler.target>11</maven.compiler.target>\n        <surefire-plugin.version>3.0.0</surefire-plugin.version>\n\
      \    </properties>\n    <build>\n        <plugins>\n            <plugin>\n \
      \               <artifactId>maven-failsafe-plugin</artifactId>\n           \
      \     <version>${surefire-plugin.version}</version>\n                <executions>\n\
      \                    <execution>\n                        <goals>\n        \
      \                    <goal>integration-test</goal>\n                       \
      \     <goal>verify</goal>\n                        </goals>\n              \
      \          <configuration>\n                            <systemPropertyVariables>\n\
      \                                <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n\
      \                                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n\
      \                                <maven.home>${maven.home}</maven.home>\n  \
      \                          </systemPropertyVariables>\n                    \
      \    </configuration>\n                    </execution>\n                </executions>\n\
      \            </plugin>\n        </plugins>\n    </build>\n</project>"
    '# konveyor_guidance': "Use the Maven Failsafe plugin adding the following sections\
      \ to the `pom.xml` file: \n\n ```xml\n <properties> \n <surefire-plugin.version>3.0.0</compiler-plugin.version>\n\
      \ </properties> \n <build>\n <plugins>\n <plugin>\n <artifactId>maven-failsafe-plugin</artifactId>\n\
      \ <version>${{surefire-plugin.version}}</version>\n <executions>\n <execution>\n\
      \ <goals>\n <goals>integration-test</goal>\n <goals>verify</goal>\n </goals>\n\
      \ <configuration>\n <systemPropertyVariables>\n <native.image.path>${{project.build.directory}}/${{project.build.finalName}}-runner</native.image.path>\n\
      \ <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n\
      \ <maven.home>${{maven.home}}</maven.home>\n </systemPropertyVariables>\n </configuration>\n\
      \ </execution>\n </executions>\n </plugin>\n </plugins>\n </build>\n ```"
    test_code: "// Stub for version\npublic class version {\n    private Long id;\n\
      \    private String name;\n\n    public version() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for includes\npublic class includes {\n\
      \    private Long id;\n    private String name;\n\n    public includes() {}\n\
      \n    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for include\npublic class include\
      \ {\n    private Long id;\n    private String name;\n\n    public include()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for execution\n\
      public class execution {\n    private Long id;\n    private String name;\n\n\
      \    public execution() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for plugins\npublic class plugins {\n    private Long id;\n    private\
      \ String name;\n\n    public plugins() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}\n\n// Stub for artifactId\npublic class artifactId {\n    private\
      \ Long id;\n    private String name;\n\n    public artifactId() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for plugin\npublic class plugin\
      \ {\n    private Long id;\n    private String name;\n\n    public plugin() {}\n\
      \n    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for modelVersion\npublic class modelVersion\
      \ {\n    private Long id;\n    private String name;\n\n    public modelVersion()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for goals\n\
      public class goals {\n    private Long id;\n    private String name;\n\n   \
      \ public goals() {}\n\n    public Long getId() { return id; }\n    public void\
      \ setId(Long id) { this.id = id; }\n    public String getName() { return name;\
      \ }\n    public void setName(String name) { this.name = name; }\n}\n\n// Stub\
      \ for goal\npublic class goal {\n    private Long id;\n    private String name;\n\
      \n    public goal() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for properties\npublic class properties {\n    private Long id;\n  \
      \  private String name;\n\n    public properties() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for groupId\npublic class groupId {\n  \
      \  private Long id;\n    private String name;\n\n    public groupId() {}\n\n\
      \    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for build\npublic class build {\n\
      \    private Long id;\n    private String name;\n\n    public build() {}\n\n\
      \    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for systemPropertyVariables\npublic\
      \ class systemPropertyVariables {\n    private Long id;\n    private String\
      \ name;\n\n    public systemPropertyVariables() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for configuration\npublic class configuration\
      \ {\n    private Long id;\n    private String name;\n\n    public configuration()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for executions\n\
      public class executions {\n    private Long id;\n    private String name;\n\n\
      \    public executions() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: javaee-pom-to-quarkus-00060
  description: Add Maven profile to run the Quarkus native build
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/216-javaee-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    compilable: false
    reason: XML configuration file - not Java code
    context: Add Maven profile to run the Quarkus native build
    code_snippet: <!-- No specific code snippet - this is a pom.xml addition -->
    expected_fix: "<profiles>\n    <profile>\n        <id>native</id>\n        <activation>\n\
      \            <property>\n                <name>native</name>\n            </property>\n\
      \        </activation>\n        <properties>\n            <skipITs>false</skipITs>\n\
      \            <quarkus.package.type>native</quarkus.package.type>\n        </properties>\n\
      \    </profile>\n</profiles>"
    '# konveyor_guidance': "Leverage a Maven profile to run the Quarkus native build\
      \ adding the following section to the `pom.xml` file: \n\n ```xml\n <profiles>\n\
      \ <profile>\n <id>native</id>\n <activation>\n <property>\n <name>native</name>\n\
      \ </property>\n </activation>\n <properties>\n <skipITs>false</skipITs>\n <quarkus.package.type>native</quarkus.package.type>\n\
      \ </properties>\n </profile>\n </profiles>\n ```"
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for id\npublic class id {\n    private Long id;\n    private String\
      \ name;\n\n    public id() {}\n\n    public Long getId() { return id; }\n  \
      \  public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for profile\npublic class profile {\n    private Long id;\n\
      \    private String name;\n\n    public profile() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for activation\npublic class activation\
      \ {\n    private Long id;\n    private String name;\n\n    public activation()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for profiles\n\
      public class profiles {\n    private Long id;\n    private String name;\n\n\
      \    public profiles() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for EntityManager\npublic class EntityManager {\n    private Long id;\n\
      \    private String name;\n\n    public EntityManager() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for property\npublic class property\
      \ {\n    private Long id;\n    private String name;\n\n    public property()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for properties\n\
      public class properties {\n    private Long id;\n    private String name;\n\n\
      \    public properties() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for name\npublic class name {\n    private Long id;\n    private String\
      \ name;\n\n    public name() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for skipITs\npublic class skipITs {\n    private Long id;\n\
      \    private String name;\n\n    public skipITs() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}"
  migration_complexity: low
- rule_id: javaee-pom-to-quarkus-00070
  description: Configure Quarkus hibernate-orm
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/216-javaee-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    compilable: false
    reason: XML configuration file - pom.xml modification
    context: Configure Quarkus hibernate-orm
    code_snippet: <!-- pom.xml with jakarta.persistence-api or org.hibernate dependencies
      -->
    expected_fix: "<!-- Hibernate ORM specific dependencies -->\n<dependency>\n  \
      \  <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-hibernate-orm</artifactId>\n\
      </dependency>\n\n<!-- JDBC driver dependencies -->\n<dependency>\n    <groupId>io.quarkus</groupId>\n\
      \    <artifactId>quarkus-jdbc-postgresql</artifactId>\n</dependency>"
    '# konveyor_guidance': "Configure Quarkus 'hibernate-orm` and jakarta persistence.\
      \ \n Add the `quarkus-hibernate-orm` section and one for your preferred jdbc\
      \ solution to the `pom.xml` file, eg for postgres: \n\n ```\n <!-- Hibernate\
      \ ORM specific dependencies -->\n <dependency>\n <groupId>io.quarkus</groupId>\n\
      \ <artifactId>quarkus-hibernate-orm</artifactId>\n </dependency>\n \n <!-- JDBC\
      \ driver dependencies -->\n <dependency>\n <groupId>io.quarkus</groupId>\n <artifactId>quarkus-jdbc-postgresql</artifactId>\n\
      \ </dependency> \n ```"
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: javaee-pom-to-quarkus-00080
  description: Use Quarkus junit artifact
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/216-javaee-pom-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: xml
    compilable: false
    reason: XML configuration file - pom.xml dependency addition
    context: Use Quarkus junit artifact
    code_snippet: <!-- pom.xml with junit.junit dependency (JUnit 4) -->
    expected_fix: "<!-- Quarkus junit specific dependency -->\n<dependency>\n    <groupId>io.quarkus</groupId>\n\
      \    <artifactId>quarkus-junit5</artifactId>\n    <scope>test</scope>\n</dependency>"
    '# konveyor_guidance': "Use Quarkus junit artifact: \n\n ```\n <!-- Quarkus junit\
      \ specific dependency -->\n <dependency>\n <groupId>io.quarkus</groupId>\n <artifactId>quarkus-junit5</artifactId>\n\
      \ <scope>test</scope>\n </dependency>\n ```"
  migration_complexity: low
- rule_id: springboot-scheduled-to-quarkus-00000
  description: Replace the SpringBoot context artifact with Quarkus 'spring-scheduled'
    extension
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/233-springboot-scheduled-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the SpringBoot context artifact with Quarkus 'spring-scheduled'
      extension
    code_snippet: "import org.springframework.scheduling.annotation.Scheduled;\nimport\
      \ org.springframework.stereotype.Component;\n\n@Component\npublic class ScheduledTasks\
      \ {\n\n    @Scheduled(fixedRate = 5000)\n    public void reportCurrentTime()\
      \ {\n        System.out.println(\"Current time: \" + System.currentTimeMillis());\n\
      \    }\n}"
    expected_fix: "import io.quarkus.scheduler.Scheduled;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n@ApplicationScoped\npublic class ScheduledTasks {\n\n    @Scheduled(every=\"\
      5s\")\n    public void reportCurrentTime() {\n        System.out.println(\"\
      Current time: \" + System.currentTimeMillis());\n    }\n}"
    '# konveyor_guidance': "Replace the Spring Context artifact with Quarkus `spring-scheduled`\
      \ extension\n\n Spring Scheduled is in spring-context artifact brought transitively\
      \ by any `org.springframework.boot:spring-boot-*` dependency\n Add Quarkus dependency\
      \ `io.quarkus:quarkus-spring-scheduled`"
  migration_complexity: low
- rule_id: javaee-faces-to-quarkus-00000
  description: Replace JSF Dependency with MyFaces
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/215-javaee-faces-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace JSF Dependency with MyFaces
    code_snippet: "import javax.faces.bean.ManagedBean;\nimport javax.faces.bean.SessionScoped;\n\
      \n@ManagedBean\n@SessionScoped\npublic class UserBean {\n\n    private String\
      \ name;\n\n    public String getName() {\n        return name;\n    }\n\n  \
      \  public void setName(String name) {\n        this.name = name;\n    }\n\n\
      \    public String greetUser() {\n        return \"Hello, \" + name + \"!\"\
      ;\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.SessionScoped;\nimport jakarta.inject.Named;\n\
      \nimport java.io.Serializable;\n\n@Named\n@SessionScoped\npublic class UserBean\
      \ implements Serializable {\n\n    private String name;\n\n    public String\
      \ getName() {\n        return name;\n    }\n\n    public void setName(String\
      \ name) {\n        this.name = name;\n    }\n\n    public String greetUser()\
      \ {\n        return \"Hello, \" + name + \"!\";\n    }\n}"
    '# konveyor_guidance': "JSF Dependencies with groupId `org.jboss.spec.javax.faces`\
      \ should be replaced with \n \n ```\n <!-- Quarkus MyFaces dependencies -->\
      \ \n <dependency>\n <groupId>org.apache.myfaces.core.extensions.quarkus</groupId>\n\
      \ <artifactId>myfaces-quarkus</artifactId>\n <version>4.0.1</version>\n </dependency>\n\
      \ \n <!-- Quarkus Faces utilities and components extensions -->\n <dependency>\n\
      \ <groupId>io.quarkiverse.primefaces</groupId>\n <artifactId>quarkus-primefaces</artifactId>\n\
      \ <version>3.13.1</version>\n </dependency>\n <dependency>\n <groupId>io.quarkiverse.omnifaces</groupId>\n\
      \ <artifactId>quarkus-omnifaces</artifactId>\n <version>4.2.0</version>\n </dependency>\n\
      \ ```"
  migration_complexity: low
- rule_id: springboot-integration-to-quarkus-00010
  description: SpringBoot Integration flows are not supported.
  severity: high
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/227-springboot-integration-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: SpringBoot Integration flows are not supported.
    code_snippet: "import org.springframework.integration.annotation.IntegrationComponentScan;\n\
      import org.springframework.integration.annotation.MessagingGateway;\nimport\
      \ org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.file.FileReadingMessageSource;\n\
      import org.springframework.integration.file.filters.SimplePatternFileListFilter;\n\
      import org.springframework.messaging.MessageHandler;\nimport org.springframework.context.annotation.Configuration;\n\
      import org.springframework.integration.dsl.IntegrationFlow;\nimport org.springframework.integration.dsl.IntegrationFlows;\n\
      \n@Configuration\n@EnableIntegration\n@IntegrationComponentScan\npublic class\
      \ FileIntegrationConfig {\n\n    @MessagingGateway\n    public interface FileWriterGateway\
      \ {\n        void writeToFile(String data);\n    }\n\n    public IntegrationFlow\
      \ processFileFlow() {\n        return IntegrationFlows.from(fileReader(), spec\
      \ -> spec.poller(poller -> poller.fixedDelay(1000)))\n                .transform(String.class,\
      \ String::toUpperCase)\n                .handle(fileWriter())\n            \
      \    .get();\n    }\n\n    public FileReadingMessageSource fileReader() {\n\
      \        FileReadingMessageSource reader = new FileReadingMessageSource();\n\
      \        reader.setDirectory(new java.io.File(\"/path/to/input\"));\n      \
      \  reader.setFilter(new SimplePatternFileListFilter(\"*.txt\"));\n        return\
      \ reader;\n    }\n\n    public MessageHandler fileWriter() {\n        return\
      \ message -> {\n            System.out.println(\"Writing: \" + message.getPayload());\n\
      \        };\n    }\n}"
    expected_fix: "import org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.CamelContext;\n\
      import org.apache.camel.builder.endpoint.EndpointRouteBuilder;\nimport org.apache.camel.component.file.GenericFileFilter;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import java.io.File;\n\n@ApplicationScoped\npublic class FileIntegrationConfig\
      \ extends EndpointRouteBuilder {\n\n    @Inject\n    CamelContext camelContext;\n\
      \n    @Override\n    public void configure() throws Exception {\n        from(file(\"\
      {{input.directory}}\").filter(new MyFileFilter()))\n            .transform(body().convertToString())\n\
      \            .transform(simple(\"${body.toUpperCase()}\"))\n            .process(exchange\
      \ -> {\n                String body = exchange.getIn().getBody(String.class);\n\
      \                System.out.println(\"Writing: \" + body);\n            });\n\
      \    }\n\n    class MyFileFilter<T> implements GenericFileFilter<T> {\n    \
      \    @Override\n        public boolean accept(T file) {\n            if (file\
      \ instanceof File) {\n                return ((File) file).getName().endsWith(\"\
      .txt\");\n            }\n            return false;\n        }\n    }\n}"
    '# konveyor_guidance': SpringBoot Integration flows are not supported. A migration
      to Apache Camel route is mandatory.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for T\npublic class T {\n    private Long id;\n    private String\
      \ name;\n\n    public T() {}\n\n    public Long getId() { return id; }\n   \
      \ public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for MessageHandler\npublic class MessageHandler {\n    private\
      \ Long id;\n    private String name;\n\n    public MessageHandler() {}\n\n \
      \   public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for FileReadingMessageSource\npublic\
      \ class FileReadingMessageSource {\n    private Long id;\n    private String\
      \ name;\n\n    public FileReadingMessageSource() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for IntegrationFlow\npublic class IntegrationFlow\
      \ {\n    private Long id;\n    private String name;\n\n    public IntegrationFlow()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: medium
- rule_id: springboot-integration-to-quarkus-00020
  description: SpringBoot IntegrationFlow class usage is not supported.
  severity: high
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/227-springboot-integration-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: SpringBoot IntegrationFlow class usage is not supported.
    code_snippet: "import org.springframework.integration.dsl.IntegrationFlow;\nimport\
      \ org.springframework.integration.dsl.IntegrationFlows;\nimport org.springframework.context.annotation.Bean;\n\
      import org.springframework.context.annotation.Configuration;\n\n@Configuration\n\
      public class SpringIntegrationConfig {\n\n    @Bean\n    public IntegrationFlow\
      \ simpleFlow() {\n        return IntegrationFlows.from(\"inputChannel\")\n \
      \               .filter(String.class, \"World\"::equals)\n                .transform(String.class,\
      \ String::toUpperCase)\n                .handle(System.out::println)\n     \
      \           .get();\n    }\n}"
    expected_fix: "import org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.CamelContext;\n\
      import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      \n@ApplicationScoped\npublic class CamelIntegrationConfig extends RouteBuilder\
      \ {\n\n    @Inject\n    CamelContext camelContext;\n\n    @Override\n    public\
      \ void configure() {\n        from(\"direct:inputChannel\")\n            .filter(body().isEqualTo(\"\
      World\"))\n            .transform().body(String.class, body -> body.toUpperCase())\n\
      \            .process(exchange -> System.out.println(exchange.getIn().getBody()))\n\
      \            .end();\n    }\n}"
    '# konveyor_guidance': SpringBoot IntegrationFlow class usage is not supported.
      A migration to Apache Camel route using From is mandatory.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for IntegrationFlow\npublic class IntegrationFlow {\n    private Long\
      \ id;\n    private String name;\n\n    public IntegrationFlow() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: springboot-annotations-to-quarkus-00000
  description: Remove the SpringBoot @SpringBootApplication annotation
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/220-springboot-annotations-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Remove the SpringBoot @SpringBootApplication annotation
    code_snippet: "package com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\n\
      import org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n\
      public class DemoApplication {\n\n    public static void main(String[] args)\
      \ {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}"
    expected_fix: "package com.example.demo;\n\nimport io.quarkus.runtime.Quarkus;\n\
      import io.quarkus.runtime.annotations.QuarkusMain;\n\n@QuarkusMain\npublic class\
      \ DemoApplication {\n\n    public static void main(String[] args) {\n      \
      \  Quarkus.run(args);\n    }\n}"
    '# konveyor_guidance': "Remove the SpringBoot @SpringBootApplication annotation.\n\
      \n A Spring Boot application contains a \"main\" class with the @SpringBootApplication\
      \ annotation. A Quarkus application does not have such a class. Two different\
      \ alternatives can be followed - either\n to remove the \"main\" class associated\
      \ with the annotation, or add the `org.springframework.boot:spring-boot-autoconfigure`\
      \ dependency as an `optional` Maven dependency. An optional dependency \n is\
      \ available when an application compiles but is not packaged with the application\
      \ at runtime. Doing this would allow the application to compile without modification,\
      \ but you\n would also need to maintain a Spring version along with the Quarkus\
      \ application."
  migration_complexity: low
- rule_id: springboot-shell-to-quarkus-00000
  description: Replace the SpringBoot Shell artifact with Quarkus 'picocli' extension
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/235-springboot-shell-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the SpringBoot Shell artifact with Quarkus 'picocli' extension
    code_snippet: "import org.springframework.shell.standard.ShellComponent;\nimport\
      \ org.springframework.shell.standard.ShellMethod;\n\n@ShellComponent\npublic\
      \ class GreetingCommands {\n\n    @ShellMethod(\"Displays a greeting message.\"\
      )\n    public String greet(String name) {\n        return \"Hello, \" + name\
      \ + \"!\";\n    }\n}"
    expected_fix: "import picocli.CommandLine.Command;\nimport picocli.CommandLine.Parameters;\n\
      \n@Command(name = \"greet\", description = \"Displays a greeting message.\"\
      )\npublic class GreetingCommands implements Runnable {\n\n    @Parameters(paramLabel\
      \ = \"<name>\", description = \"The name of the person to greet.\")\n    private\
      \ String name;\n\n    @Override\n    public void run() {\n        System.out.println(greet(name));\n\
      \    }\n\n    public String greet(String name) {\n        return \"Hello, \"\
      \ + name + \"!\";\n    }\n}"
    '# konveyor_guidance': "Replace the SpringBoot Shell artifacts with Quarkus `picocli`\
      \ extension\n\n Add Quarkus dependency `io.quarkus:quarkus-picocli`\n\n PicoCli\
      \ provides command-line mode like Spring Shell but does not reuse the Spring\
      \ interfaces\n therefore re-coding is also required to use the appropriate PicoCli\
      \ interfaces."
    test_code: "// Stub for name\npublic class name {\n    private Long id;\n    private\
      \ String name;\n\n    public name() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}"
  migration_complexity: low
- rule_id: springboot-generic-catchall-00100
  description: Spring component requires investigation for compatibility with Quarkus
    extensions or possibility of code rewrite.
  severity: high
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/226-springboot-generic-catchall.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Spring component requires investigation for compatibility with Quarkus
      extensions or possibility of code rewrite.
    code_snippet: "import org.springframework.stereotype.Component;\nimport org.springframework.beans.factory.annotation.Autowired;\n\
      import org.springframework.web.client.RestTemplate;\n\n@Component\npublic class\
      \ WeatherService {\n\n    private RestTemplate restTemplate;\n\n    @Autowired\n\
      \    public WeatherService(RestTemplate restTemplate) {\n        this.restTemplate\
      \ = restTemplate;\n    }\n\n    public String getWeatherForecast(String city)\
      \ {\n        String url = \"http://api.weatherapi.com/v1/current.json?key=your_api_key&q=\"\
      \ + city;\n        return restTemplate.getForObject(url, String.class);\n  \
      \  }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import org.eclipse.microprofile.rest.client.inject.RestClient;\n\n@ApplicationScoped\n\
      public class WeatherService {\n\n    private WeatherClient weatherClient;\n\n\
      \    @Inject\n    public WeatherService(@RestClient WeatherClient weatherClient)\
      \ {\n        this.weatherClient = weatherClient;\n    }\n\n    public String\
      \ getWeatherForecast(String city) {\n        return weatherClient.getWeather(city);\n\
      \    }\n}\n\ninterface WeatherClient {\n    String getWeather(String city);\n\
      }"
    '# konveyor_guidance': "If the application declares explicitly or uses any of\
      \ the feature provided by the Spring `{{group}}:{{artifact}}` component,\n then\
      \ check if there is a Quarkus Extensions with Spring API compatibility for the\
      \ Spring `{{artifact}}` component. \n If yes, then replace the `{{group}}:{{artifact}}`\
      \ dependency with the Quarkus extension. \n If no, consider rewrite the code\
      \ that relies on this dependency leveraging the Quarkus Guides linked below.\
      \ \n \n Otherwise, if the application hasn't got this explicit Spring `{{group}}:{{artifact}}`\
      \ component dependency, it has been added transitively by another Spring component.\
      \ \n Once the dependant Spring component will be removed, this issue will be\
      \ fixed as well."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for WeatherClient\npublic class WeatherClient {\n    private Long\
      \ id;\n    private String name;\n\n    public WeatherClient() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for RestTemplate\npublic class RestTemplate\
      \ {\n    private Long id;\n    private String name;\n\n    public RestTemplate()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: springboot-plugins-to-quarkus-0000
  description: Replace the spring-boot-maven-plugin dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/231-springboot-plugins-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the spring-boot-maven-plugin dependency
    code_snippet: "package com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\n\
      import org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n\
      public class DemoApplication {\n\n    public static void main(String[] args)\
      \ {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}"
    expected_fix: "package com.example.demo;\n\nimport io.quarkus.runtime.Quarkus;\n\
      import io.quarkus.runtime.annotations.QuarkusMain;\n\n@QuarkusMain\npublic class\
      \ DemoApplication {\n\n    public static void main(String[] args) {\n      \
      \  Quarkus.run(args);\n    }\n}"
    '# konveyor_guidance': "Replace the `spring-boot-maven-plugin` dependency.\n The\
      \ `spring-boot-maven-plugin` dependency needs to be replaced with `quarkus-maven-plugin`,\
      \ so that the application is built with Quarkus, both for running on the JVM\
      \ and in native mode."
  migration_complexity: low
- rule_id: jakarta-faces-to-quarkus-00000
  description: Replace Jakarta Faces Dependency with MyFaces
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/213-jakarta-faces-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace Jakarta Faces Dependency with MyFaces
    code_snippet: "import jakarta.faces.bean.ManagedBean;\nimport jakarta.faces.bean.SessionScoped;\n\
      \n@ManagedBean\n@SessionScoped\npublic class UserBean {\n\n    private String\
      \ name;\n\n    public String getName() {\n        return name;\n    }\n\n  \
      \  public void setName(String name) {\n        this.name = name;\n    }\n\n\
      \    public String greetUser() {\n        return \"Hello, \" + name + \"!\"\
      ;\n    }\n}"
    expected_fix: "import javax.enterprise.context.SessionScoped;\nimport javax.inject.Named;\n\
      import java.io.Serializable;\n\n@Named\n@SessionScoped\npublic class UserBean\
      \ implements Serializable {\n\n    private static final long serialVersionUID\
      \ = 1L;\n\n    private String name;\n\n    public String getName() {\n     \
      \   return name;\n    }\n\n    public void setName(String name) {\n        this.name\
      \ = name;\n    }\n\n    public String greetUser() {\n        return \"Hello,\
      \ \" + name + \"!\";\n    }\n}"
    '# konveyor_guidance': "Faces Dependencies with groupId `jakarta.faces` should\
      \ be replaced with \n \n ```\n <!-- Quarkus MyFaces dependencies --> \n <dependency>\n\
      \ <groupId>org.apache.myfaces.core.extensions.quarkus</groupId>\n <artifactId>myfaces-quarkus</artifactId>\n\
      \ <version>4.0.1</version>\n </dependency>\n \n <!-- Quarkus Faces utilities\
      \ and components extensions -->\n <dependency>\n <groupId>io.quarkiverse.primefaces</groupId>\n\
      \ <artifactId>quarkus-primefaces</artifactId>\n <version>3.13.1</version>\n\
      \ </dependency>\n <dependency>\n <groupId>io.quarkiverse.omnifaces</groupId>\n\
      \ <artifactId>quarkus-omnifaces</artifactId>\n <version>4.2.0</version>\n </dependency>\n\
      \ ```"
  migration_complexity: low
- rule_id: jakarta-faces-to-quarkus-00010
  description: Replace Jakarta Faces Dependency with MyFaces
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/213-jakarta-faces-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace Jakarta Faces Dependency with MyFaces
    code_snippet: "import jakarta.faces.bean.ManagedBean;\nimport jakarta.faces.bean.SessionScoped;\n\
      \n@ManagedBean\n@SessionScoped\npublic class UserBean {\n\n    private String\
      \ name;\n\n    public String getName() {\n        return name;\n    }\n\n  \
      \  public void setName(String name) {\n        this.name = name;\n    }\n\n\
      \    public String greetUser() {\n        return \"Hello, \" + name + \"!\"\
      ;\n    }\n}"
    expected_fix: "import jakarta.inject.Named;\nimport jakarta.enterprise.context.SessionScoped;\n\
      import java.io.Serializable;\n\n@Named\n@SessionScoped\npublic class UserBean\
      \ implements Serializable {\n\n    private static final long serialVersionUID\
      \ = 1L;\n\n    private String name;\n\n    public String getName() {\n     \
      \   return name;\n    }\n\n    public void setName(String name) {\n        this.name\
      \ = name;\n    }\n\n    public String greetUser() {\n        return \"Hello,\
      \ \" + name + \"!\";\n    }\n}"
    '# konveyor_guidance': "Faces Dependencies with artifactId `jakarta.faces` should\
      \ be replaced with \n \n ```\n <!-- Quarkus MyFaces dependencies --> \n <dependency>\n\
      \ <groupId>org.apache.myfaces.core.extensions.quarkus</groupId>\n <artifactId>myfaces-quarkus</artifactId>\n\
      \ <version>4.0.1</version>\n </dependency>\n \n <!-- Quarkus Faces utilities\
      \ and components extensions -->\n <dependency>\n <groupId>io.quarkiverse.primefaces</groupId>\n\
      \ <artifactId>quarkus-primefaces</artifactId>\n <version>3.13.1</version>\n\
      \ </dependency>\n <dependency>\n <groupId>io.quarkiverse.omnifaces</groupId>\n\
      \ <artifactId>quarkus-omnifaces</artifactId>\n <version>4.2.0</version>\n </dependency>\n\
      \ ```"
  migration_complexity: low
- rule_id: persistence-to-quarkus-00000
  description: Move persistence config to a properties file
  severity: low
  category: optional
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/201-persistence-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Move persistence config to a properties file
    code_snippet: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      \n@ApplicationScoped\npublic class TaskService {\n\n    @PersistenceContext(unitName\
      \ = \"primary\")\n    private EntityManager entityManager;\n\n    public void\
      \ createTask(Task task) {\n        entityManager.persist(task);\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.transaction.Transactional;\n\
      \n@ApplicationScoped\npublic class TaskService {\n\n    @Inject\n    EntityManager\
      \ entityManager;\n\n    @Transactional\n    public void createTask(Task task)\
      \ {\n        entityManager.persist(task);\n    }\n}\n\nclass Task {\n}"
    '# konveyor_guidance': "It is recommended to move persistence related configuration\
      \ from an XML file to a properties one.\n This allows centralization of the\
      \ configuration in Quarkus. Check the link for more information.\n \n \n Datasource\
      \ and persistence configurations in XML can be substituted with a single centralized\
      \ properties file. Here is an example of a translation:\n \n The following datasource\
      \ configuration:\n ```\n <datasources xmlns=\"http://www.jboss.org/ironjacamar/schema\"\
      \n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"\
      http://www.jboss.org/ironjacamar/schema http://docs.jboss.org/ironjacamar/schema/datasources_1_0.xsd\"\
      >\n <!-- The datasource is bound into JNDI at this location. We reference\n\
      \ this in META-INF/persistence.xml -->\n <datasource jndi-name=\"java:jboss/datasources/TasksJsfQuickstartDS\"\
      \n pool-name=\"tasks-jsf-quickstart\" enabled=\"true\"\n use-java-context=\"\
      true\">\n <connection-url>jdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1</connection-url>\n\
      \ <driver>h2</driver>\n <security>\n <user-name>sa</user-name>\n <password>sa</password>\n\
      \ </security>\n </datasource>\n </datasources>\n ```\n along with the following\
      \ persistence configuration:\n ```\n <persistence version=\"2.1\"\n xmlns=\"\
      http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
      \n xsi:schemaLocation=\"\n http://xmlns.jcp.org/xml/ns/persistence\n http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\
      >\n <persistence-unit name=\"primary\">\n <!-- We use a different datasource\
      \ for tests, so as to not overwrite\n production data. This is an unmanaged\
      \ data source, backed by H2, an in memory\n database. Production applications\
      \ should use a managed datasource. -->\n <!-- The datasource is deployed as\
      \ WEB-INF/test-ds.xml,\n you can find it in the source at src/test/resources/test-ds.xml\
      \ -->\n <jta-data-source>java:jboss/datasources/TasksJsfQuickstartDS</jta-data-source>\n\
      \ <properties>\n <!-- Properties for Hibernate -->\n <property name=\"hibernate.hbm2ddl.auto\"\
      \ value=\"create-drop\" />\n <property name=\"hibernate.show_sql\" value=\"\
      false\" />\n </properties>\n </persistence-unit>\n </persistence>\n ```\n can\
      \ be translated to:\n ```\n quarkus.datasource.jdbc.url=jdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\n\
      \ quarkus.datasource.db-kind=h2\n quarkus.datasource.username=sa\n quarkus.datasource.password=sa\n\
      \n quarkus.hibernate-orm.database.generation=drop-and-create\n ```"
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: persistence-to-quarkus-00011
  description: '@Produces cannot annotate an EntityManager'
  severity: low
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/201-persistence-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: '@Produces cannot annotate an EntityManager'
    code_snippet: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.enterprise.inject.Produces;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      \n@ApplicationScoped\npublic class EntityManagerProducer {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    @Produces\n    public EntityManager\
      \ produceEntityManager() {\n        return entityManager;\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import jakarta.persistence.EntityManager;\n\n@ApplicationScoped\npublic class\
      \ EntityManagerProducer {\n\n    @Inject\n    private EntityManager entityManager;\n\
      \n    public EntityManager getEntityManager() {\n        return entityManager;\n\
      \    }\n}"
    '# konveyor_guidance': "In JavaEE/JakartaEE, using `@PersistenceContext` was needed\
      \ in order to inject a data source. Quarkus, on the other hand,\n will create\
      \ the bean automatically just by correctly setting up your datasource, so the\
      \ `@PersistenceContext` annotation can be removed. \nThis also makes having\
      \ a `@Produces` annotation\n on the `EntityManager` illegal in Quarkus.\n \n\
      \ If you are using a `@Produces` annotation for your EntityManager, and it is\
      \ not needed after configuring your datasource, remove it and `@Inject` the\
      \ EntityManager.\n Otherwise, if the producer is still needed, please create\
      \ a qualification for your produced `EntityManager`, as well as every injection\
      \ point for the EM.\n \n For instance, you can create an `ExtendedContext` qualifier:\n\
      \ ```\n @Qualifier\n @Target({{ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD,\
      \ ElementType.PARAMETER }})\n @Retention(RetentionPolicy.RUNTIME)\n public @interface\
      \ ExtendedContext {{ ... }}\n ```\n and then inject your entity managers:\n\
      \ ```\n @ExtendedContext\n public EntityManager getEm() {{\n return em;\n }}\n\
      \ ```"
  migration_complexity: low
- rule_id: ee-to-quarkus-00000
  description: '@Stateless annotation must be replaced'
  severity: low
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/200-ee-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: '@Stateless annotation must be replaced'
    code_snippet: "import jakarta.ejb.Stateless;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\n\n@Stateless\npublic class ProductService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void addProduct(String name, double price) {\n        Product product\
      \ = new Product(name, price);\n        entityManager.persist(product);\n   \
      \ }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.transaction.Transactional;\n\n@ApplicationScoped\npublic class\
      \ ProductService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    @Transactional\n    public void addProduct(String name, double price)\
      \ {\n        Product product = new Product(name, price);\n        entityManager.persist(product);\n\
      \    }\n}"
    '# konveyor_guidance': Stateless EJBs can be converted to a CDI bean by replacing
      the `@Stateless` annotation with a scope eg `@ApplicationScoped`
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: ee-to-quarkus-00010
  description: '@Stateful annotation must be replaced'
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/200-ee-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: '@Stateful annotation must be replaced'
    code_snippet: "import javax.ejb.Stateful;\nimport javax.ejb.Remote;\n\n@Stateful\n\
      @Remote(MyServiceRemote.class)\npublic class MyServiceBean implements MyServiceRemote\
      \ {\n\n    private int counter = 0;\n\n    @Override\n    public void incrementCounter()\
      \ {\n        counter++;\n    }\n\n    @Override\n    public int getCounter()\
      \ {\n        return counter;\n    }\n}\n\ninterface MyServiceRemote {\n    void\
      \ incrementCounter();\n    int getCounter();\n}"
    expected_fix: "import jakarta.enterprise.context.SessionScoped;\nimport jakarta.inject.Named;\n\
      import java.io.Serializable;\n\n@SessionScoped\n@Named\npublic class MyServiceBean\
      \ implements MyServiceRemote, Serializable {\n\n    private int counter = 0;\n\
      \n    @Override\n    public void incrementCounter() {\n        counter++;\n\
      \    }\n\n    @Override\n    public int getCounter() {\n        return counter;\n\
      \    }\n}\n\ninterface MyServiceRemote {\n    void incrementCounter();\n   \
      \ int getCounter();\n}"
    '# konveyor_guidance': "Stateful EJBs can be converted to a CDI bean by replacing\
      \ the `@Stateful` annotation with a bean-defining annotation\n that encompasses\
      \ the appropriate scope (e.g., `@ApplicationScoped`). `@Stateful` EJBs often\
      \ translate to `@SessionScoped`\n beans (a scope which requires activating the\
      \ `quarkus-undertow` extension), but the appropriate scope may differ based\n\
      \ on your application architecture. Review your application's requirements to\
      \ determine the appropriate scope.\n\n Note that it is recommended, as a good\
      \ practice, to keep state external from the service in Quarkus."
  migration_complexity: low
- rule_id: ee-to-quarkus-00020
  description: Method should be marked as @Transactional
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/200-ee-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Method should be marked as @Transactional
    code_snippet: "import jakarta.ejb.Stateless;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\n\n@Stateless\npublic class AccountService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void deposit(Long accountId, Double amount) {\n        Account account\
      \ = entityManager.find(Account.class, accountId);\n        account.setBalance(account.getBalance()\
      \ + amount);\n        entityManager.merge(account);\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.transaction.Transactional;\n\
      import jakarta.persistence.PersistenceContext;\n\n@ApplicationScoped\npublic\
      \ class AccountService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    @Transactional\n    public void deposit(Long accountId,\
      \ Double amount) {\n        Account account = entityManager.find(Account.class,\
      \ accountId);\n        account.setBalance(account.getBalance() + amount);\n\
      \        entityManager.merge(account);\n    }\n}"
    '# konveyor_guidance': "Any EJB method has container-manager transactions by default,\
      \ with transaction attribute\n `REQUIRED` as a default (a transaction is started\
      \ if one is not already in progress). Methods that were part of\n an EJB bean\
      \ to be migrated to CDI must be annotated with `@Transactional`, or be marked\
      \ as transactional\n in any other way (i.e, by annotating the class)."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: high
- rule_id: springboot-actuator-to-quarkus-0100
  description: Replace the Spring Boot Actuator dependency with Quarkus Smallrye Health
    extension
  severity: high
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/219-springboot-actuator-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the Spring Boot Actuator dependency with Quarkus Smallrye Health
      extension
    code_snippet: "import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\
      import org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.Health;\n\
      import org.springframework.stereotype.Component;\n\n@SpringBootApplication\n\
      public class SpringBootService {\n\n    public static void main(String[] args)\
      \ {\n        SpringApplication.run(SpringBootService.class, args);\n    }\n\
      }\n\n@Component\nclass CustomHealthIndicator implements HealthIndicator {\n\n\
      \    @Override\n    public Health health() {\n        int errorCode = check();\
      \ // perform some specific health check\n        if (errorCode != 0) {\n   \
      \         return Health.down().withDetail(\"Error Code\", errorCode).build();\n\
      \        }\n        return Health.up().build();\n    }\n\n    private int check()\
      \ {\n        // logic to check health\n        return 0;\n    }\n}"
    expected_fix: "import io.quarkus.runtime.Quarkus;\nimport io.quarkus.runtime.QuarkusApplication;\n\
      import io.quarkus.runtime.annotations.QuarkusMain;\nimport org.eclipse.microprofile.health.HealthCheck;\n\
      import org.eclipse.microprofile.health.HealthCheckResponse;\nimport org.eclipse.microprofile.health.Liveness;\n\
      import org.eclipse.microprofile.health.Readiness;\n\nimport javax.enterprise.context.ApplicationScoped;\n\
      \n@QuarkusMain\npublic class QuarkusService implements QuarkusApplication {\n\
      \n    public static void main(String[] args) {\n        Quarkus.run(QuarkusService.class,\
      \ args);\n    }\n\n    @Override\n    public int run(String... args) throws\
      \ Exception {\n        Quarkus.waitForExit();\n        return 0;\n    }\n}\n\
      \n@Liveness\n@Readiness\n@ApplicationScoped\nclass CustomHealthIndicator implements\
      \ HealthCheck {\n\n    @Override\n    public HealthCheckResponse call() {\n\
      \        int errorCode = check(); // perform some specific health check\n  \
      \      if (errorCode != 0) {\n            return HealthCheckResponse.named(\"\
      CustomHealthCheck\")\n                                      .down()\n      \
      \                                .withData(\"Error Code\", String.valueOf(errorCode))\n\
      \                                      .build();\n        }\n        return\
      \ HealthCheckResponse.named(\"CustomHealthCheck\").up().build();\n    }\n\n\
      \    private int check() {\n        // logic to check health\n        return\
      \ 0;\n    }\n}"
    '# konveyor_guidance': "Replace the Spring Boot Actuator dependency with Quarkus\
      \ Smallrye Health extension. \n It has to be replaced by `io.quarkus:quarkus-smallrye-health`\
      \ artifact."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for Health\npublic class Health {\n    private Long id;\n    private\
      \ String name;\n\n    public Health() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}\n\n// Stub for HealthCheckResponse\npublic class HealthCheckResponse\
      \ {\n    private Long id;\n    private String name;\n\n    public HealthCheckResponse()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: springboot-actuator-to-quarkus-0200
  description: Replace Spring Health endpoint mapping
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/219-springboot-actuator-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace Spring Health endpoint mapping
    code_snippet: "package com.example.demo;\n\nimport org.springframework.boot.actuate.health.HealthIndicator;\n\
      import org.springframework.stereotype.Component;\nimport org.springframework.boot.actuate.health.Health;\n\
      \n@Component\npublic class CustomHealthIndicator implements HealthIndicator\
      \ {\n\n    @Override\n    public Health health() {\n        int errorCode =\
      \ check(); // perform some specific health check\n        if (errorCode != 0)\
      \ {\n            return Health.down().withDetail(\"Error Code\", errorCode).build();\n\
      \        }\n        return Health.up().build();\n    }\n\n    private int check()\
      \ {\n        // Logic to check health\n        return 0; // 0 means healthy,\
      \ any other value indicates an issue\n    }\n}"
    expected_fix: "package com.example.demo;\n\nimport org.eclipse.microprofile.health.HealthCheck;\n\
      import org.eclipse.microprofile.health.HealthCheckResponse;\nimport org.eclipse.microprofile.health.Liveness;\n\
      import jakarta.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\n\
      @Liveness\npublic class CustomHealthIndicator implements HealthCheck {\n\n \
      \   @Override\n    public HealthCheckResponse call() {\n        int errorCode\
      \ = check(); // perform some specific health check\n        if (errorCode !=\
      \ 0) {\n            return HealthCheckResponse.named(\"CustomHealthCheck\")\n\
      \                .down()\n                .withData(\"Error Code\", String.valueOf(errorCode))\n\
      \                .build();\n        }\n        return HealthCheckResponse.named(\"\
      CustomHealthCheck\").up().build();\n    }\n\n    private int check() {\n   \
      \     // Logic to check health\n        return 0; // 0 means healthy, any other\
      \ value indicates an issue\n    }\n}"
    '# konveyor_guidance': Replace `management.endpoints.web.exposure.include=health`
      with `quarkus.smallrye-health.root-path=/actuator/health`
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for Health\npublic class Health {\n    private Long id;\n    private\
      \ String name;\n\n    public Health() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}\n\n// Stub for HealthCheckResponse\npublic class HealthCheckResponse\
      \ {\n    private Long id;\n    private String name;\n\n    public HealthCheckResponse()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: jakarta-cdi-to-quarkus-00000
  description: Replace jakarta.enterprise:jakarta.enterprise.cdi-api dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/212-jakarta-cdi-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace jakarta.enterprise:jakarta.enterprise.cdi-api dependency
    code_snippet: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      \n@ApplicationScoped\npublic class UserService {\n\n    @Inject\n    private\
      \ UserRepository userRepository;\n\n    public User getUserById(Long id) {\n\
      \        return userRepository.find(id);\n    }\n}\n\n@ApplicationScoped\nclass\
      \ UserRepository {\n\n    public User find(Long id) {\n        // Simulate database\
      \ access\n        return new User(id, \"John Doe\");\n    }\n}\n\nclass User\
      \ {\n    private Long id;\n    private String name;\n\n    public User(Long\
      \ id, String name) {\n        this.id = id;\n        this.name = name;\n   \
      \ }\n\n    // Getters and setters\n    public Long getId() {\n        return\
      \ id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n  \
      \  }\n\n    public String getName() {\n        return name;\n    }\n\n    public\
      \ void setName(String name) {\n        this.name = name;\n    }\n}"
    expected_fix: "import io.quarkus.arc.Unremovable;\nimport javax.enterprise.context.ApplicationScoped;\n\
      import javax.inject.Inject;\n\n@ApplicationScoped\n@Unremovable\npublic class\
      \ UserService {\n\n    @Inject\n    private UserRepository userRepository;\n\
      \n    public User getUserById(Long id) {\n        return userRepository.find(id);\n\
      \    }\n}\n\n@ApplicationScoped\n@Unremovable\nclass UserRepository {\n\n  \
      \  public User find(Long id) {\n        // Simulate database access\n      \
      \  return new User(id, \"John Doe\");\n    }\n}\n\nclass User {\n    private\
      \ Long id;\n    private String name;\n\n    public User(Long id, String name)\
      \ {\n        this.id = id;\n        this.name = name;\n    }\n\n    public Long\
      \ getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n\
      \        this.id = id;\n    }\n\n    public String getName() {\n        return\
      \ name;\n    }\n\n    public void setName(String name) {\n        this.name\
      \ = name;\n    }\n}"
    '# konveyor_guidance': Dependency `jakarta.enterprise:jakarta.enterprise.cdi-api`
      has to be replaced with `io.quarkus:quarkus-arc` artifact.
  migration_complexity: low
- rule_id: jakarta-cdi-to-quarkus-00020
  description: Replace jakarta.inject:jakarta.inject-api dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/212-jakarta-cdi-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace jakarta.inject:jakarta.inject-api dependency
    code_snippet: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n@ApplicationScoped\npublic class ProductService {\n\n    @Inject\n    private\
      \ ProductRepository productRepository;\n\n    public Product findProductById(Long\
      \ id) {\n        return productRepository.findById(id);\n    }\n}\n\n@ApplicationScoped\n\
      class ProductRepository {\n\n    public Product findById(Long id) {\n      \
      \  // Simulate database access\n        return new Product(id, \"Sample Product\"\
      );\n    }\n}\n\nclass Product {\n    private Long id;\n    private String name;\n\
      \n    public Product(Long id, String name) {\n        this.id = id;\n      \
      \  this.name = name;\n    }\n\n    // Getters and setters\n    public Long getId()\
      \ {\n        return id;\n    }\n\n    public void setId(Long id) {\n       \
      \ this.id = id;\n    }\n\n    public String getName() {\n        return name;\n\
      \    }\n\n    public void setName(String name) {\n        this.name = name;\n\
      \    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      \n@ApplicationScoped\npublic class ProductService {\n\n    @Inject\n    private\
      \ ProductRepository productRepository;\n\n    public Product findProductById(Long\
      \ id) {\n        return productRepository.findById(id);\n    }\n}\n\n@ApplicationScoped\n\
      class ProductRepository {\n\n    public Product findById(Long id) {\n      \
      \  // Simulate database access\n        return new Product(id, \"Sample Product\"\
      );\n    }\n}\n\nclass Product {\n    private Long id;\n    private String name;\n\
      \n    public Product(Long id, String name) {\n        this.id = id;\n      \
      \  this.name = name;\n    }\n\n    // Getters and setters\n    public Long getId()\
      \ {\n        return id;\n    }\n\n    public void setId(Long id) {\n       \
      \ this.id = id;\n    }\n\n    public String getName() {\n        return name;\n\
      \    }\n\n    public void setName(String name) {\n        this.name = name;\n\
      \    }\n}"
    '# konveyor_guidance': Dependency `jakarta.inject:jakarta.inject-api` has to be
      replaced with `io.quarkus:quarkus-arc` artifact.
  migration_complexity: low
- rule_id: jakarta-cdi-to-quarkus-00030
  description: '`beans.xml` descriptor content is ignored'
  severity: medium
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/212-jakarta-cdi-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: '`beans.xml` descriptor content is ignored'
    code_snippet: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      \n@ApplicationScoped\npublic class PaymentService {\n\n    @Inject\n    private\
      \ TransactionProcessor transactionProcessor;\n\n    public void processPayment(double\
      \ amount) {\n        transactionProcessor.process(amount);\n    }\n}\n\n@ApplicationScoped\n\
      public class TransactionProcessor {\n\n    public void process(double amount)\
      \ {\n        // Logic to process transaction\n        System.out.println(\"\
      Processing payment of amount: \" + amount);\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      \n@ApplicationScoped\npublic class PaymentService {\n\n    @Inject\n    private\
      \ TransactionProcessor transactionProcessor;\n\n    public void processPayment(double\
      \ amount) {\n        transactionProcessor.process(amount);\n    }\n}\n\nclass\
      \ TransactionProcessor {\n\n    public void process(double amount) {\n     \
      \   // Logic to process transaction\n        System.out.println(\"Processing\
      \ payment of amount: \" + amount);\n    }\n}"
    '# konveyor_guidance': "The `beans.xml` descriptor content is ignored and it could\
      \ be removed from the application. \n Refer to the guide referenced below to\
      \ check the supported CDI feature in Quarkus."
  migration_complexity: low
- rule_id: jakarta-cdi-to-quarkus-00040
  description: Producer annotation no longer required
  severity: low
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/212-jakarta-cdi-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Producer annotation no longer required
    code_snippet: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.enterprise.inject.Produces;\n\
      import jakarta.inject.Named;\n\n@ApplicationScoped\npublic class ConfigurationProducer\
      \ {\n\n    @Produces\n    @Named(\"configValue\")\n    public String produceConfig()\
      \ {\n        return \"ImportantConfigValue\";\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Named;\n\
      \n@ApplicationScoped\npublic class ConfigurationProducer {\n\n    @Named(\"\
      configValue\")\n    public String produceConfig() {\n        return \"ImportantConfigValue\"\
      ;\n    }\n}"
    '# konveyor_guidance': "In Quarkus you can skip the @Produces annotation completely\
      \ if the producer method is annotated with a scope annotation, a stereotype\
      \ or a qualifier..\n This field could be accessed using a `@Named` getter method\
      \ instead."
  migration_complexity: low
- rule_id: jakarta-cdi-to-quarkus-00050
  description: Stateless annotation can be replaced with scope
  severity: low
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/212-jakarta-cdi-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Stateless annotation can be replaced with scope
    code_snippet: "import jakarta.ejb.Stateless;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\n\n@Stateless\npublic class CustomerService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void addCustomer(String name) {\n        Customer customer = new\
      \ Customer();\n        customer.setName(name);\n        entityManager.persist(customer);\n\
      \    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import jakarta.persistence.EntityManager;\n\n@ApplicationScoped\npublic class\
      \ CustomerService {\n\n    @Inject\n    private EntityManager entityManager;\n\
      \n    public void addCustomer(String name) {\n        Customer customer = new\
      \ Customer();\n        customer.setName(name);\n        entityManager.persist(customer);\n\
      \    }\n    \n    // Assuming Customer class is defined elsewhere\n    public\
      \ static class Customer {\n        private String name;\n\n        public String\
      \ getName() {\n            return name;\n        }\n\n        public void setName(String\
      \ name) {\n            this.name = name;\n        }\n    }\n}"
    '# konveyor_guidance': The Stateless EJBs can be converted to a cdi bean by replacing
      the `@Stateless` annotation with a scope eg `@ApplicationScoped`
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: cdi-to-quarkus-00000
  description: Replace javax.enterprise:cdi-api dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/210-cdi-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace javax.enterprise:cdi-api dependency
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import javax.enterprise.inject.Produces;\n\n@ApplicationScoped\npublic class\
      \ UserService {\n\n    @Inject\n    private UserRepository userRepository;\n\
      \n    public User getUserById(Long id) {\n        return userRepository.find(id);\n\
      \    }\n\n    @Produces\n    public User getDefaultUser() {\n        return\
      \ new User(\"defaultUser\", \"default@example.com\");\n    }\n}\n\n@ApplicationScoped\n\
      class UserRepository {\n    public User find(Long id) {\n        // Simulate\
      \ database access\n        return new User(\"John Doe\", \"john@example.com\"\
      );\n    }\n}\n\nclass User {\n    private String name;\n    private String email;\n\
      \n    public User(String name, String email) {\n        this.name = name;\n\
      \        this.email = email;\n    }\n}"
    expected_fix: "import io.quarkus.arc.config.ConfigProperties;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      import jakarta.inject.Inject;\nimport jakarta.enterprise.inject.Produces;\n\n\
      @ApplicationScoped\npublic class UserService {\n\n    @Inject\n    private UserRepository\
      \ userRepository;\n\n    public User getUserById(Long id) {\n        return\
      \ userRepository.find(id);\n    }\n\n    @Produces\n    public User getDefaultUser()\
      \ {\n        return new User(\"defaultUser\", \"default@example.com\");\n  \
      \  }\n}\n\n@ApplicationScoped\nclass UserRepository {\n    public User find(Long\
      \ id) {\n        // Simulate database access\n        return new User(\"John\
      \ Doe\", \"john@example.com\");\n    }\n}\n\nclass User {\n    private String\
      \ name;\n    private String email;\n\n    public User(String name, String email)\
      \ {\n        this.name = name;\n        this.email = email;\n    }\n}"
    '# konveyor_guidance': Dependency `javax.enterprise:cdi-api` has to be replaced
      with `io.quarkus:quarkus-arc` artifact.
  migration_complexity: low
- rule_id: cdi-to-quarkus-00020
  description: Replace javax.inject:javax.inject dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/210-cdi-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace javax.inject:javax.inject dependency
    code_snippet: "import javax.inject.Inject;\nimport javax.inject.Singleton;\n\n\
      @Singleton\npublic class InventoryService {\n\n    @Inject\n    private ProductService\
      \ productService;\n\n    public int checkProductStock(String productId) {\n\
      \        return productService.getStockLevel(productId);\n    }\n}\n\n@Singleton\n\
      class ProductService {\n\n    public int getStockLevel(String productId) {\n\
      \        // Simulate an inventory check\n        return 50;\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      \n@ApplicationScoped\npublic class InventoryService {\n\n    @Inject\n    private\
      \ ProductService productService;\n\n    public int checkProductStock(String\
      \ productId) {\n        return productService.getStockLevel(productId);\n  \
      \  }\n}\n\n@ApplicationScoped\nclass ProductService {\n\n    public int getStockLevel(String\
      \ productId) {\n        // Simulate an inventory check\n        return 50;\n\
      \    }\n}"
    '# konveyor_guidance': Dependency `javax.inject:javax.inject` has to be replaced
      with `io.quarkus:quarkus-arc` artifact.
  migration_complexity: low
- rule_id: cdi-to-quarkus-00030
  description: '`beans.xml` descriptor content is ignored'
  severity: medium
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/210-cdi-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: '`beans.xml` descriptor content is ignored'
    code_snippet: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      \n@ApplicationScoped\npublic class PaymentService {\n\n    @Inject\n    private\
      \ PaymentProcessor paymentProcessor;\n\n    public void processPayment(String\
      \ account, double amount) {\n        paymentProcessor.process(account, amount);\n\
      \    }\n}\n\n@ApplicationScoped\npublic class PaymentProcessor {\n\n    public\
      \ void process(String account, double amount) {\n        System.out.println(\"\
      Processing payment of \" + amount + \" for account \" + account);\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      \n@ApplicationScoped\npublic class PaymentService {\n\n    @Inject\n    private\
      \ PaymentProcessor paymentProcessor;\n\n    public void processPayment(String\
      \ account, double amount) {\n        paymentProcessor.process(account, amount);\n\
      \    }\n}\n\nclass PaymentProcessor {\n\n    public void process(String account,\
      \ double amount) {\n        System.out.println(\"Processing payment of \" +\
      \ amount + \" for account \" + account);\n    }\n}"
    '# konveyor_guidance': "`beans.xml` descriptor content is ignored and it could\
      \ be removed from the application. \n Refer to the guide referenced below to\
      \ check the supported CDI feature in Quarkus."
  migration_complexity: low
- rule_id: cdi-to-quarkus-00040
  description: Producer annotation no longer required
  severity: low
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/210-cdi-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Producer annotation no longer required
    code_snippet: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.enterprise.inject.Produces;\n\
      import jakarta.inject.Named;\n\n@ApplicationScoped\npublic class ConfigurationProducer\
      \ {\n\n    @Produces\n    @Named(\"configValue\")\n    public String produceConfigValue()\
      \ {\n        return \"QuarkusMigrationExample\";\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Named;\n\
      \n@ApplicationScoped\npublic class ConfigurationProducer {\n\n    @Named(\"\
      configValue\")\n    public String getConfigValue() {\n        return \"QuarkusMigrationExample\"\
      ;\n    }\n}"
    '# konveyor_guidance': "In Quarkus, you can skip the @Produces annotation completely\
      \ if the producer method is annotated with a scope annotation, a stereotype\
      \ or a qualifier..\n This field could be accessed using a `@Named` getter method\
      \ instead."
  migration_complexity: low
- rule_id: springboot-jmx-to-quarkus-00000
  description: Spring JMX is not supported by Quarkus with GraalVM on a Native Image
  severity: critical
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/228-springboot-jmx-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Spring JMX is not supported by Quarkus with GraalVM on a Native Image
    code_snippet: "import org.springframework.jmx.export.annotation.ManagedResource;\n\
      import org.springframework.jmx.export.annotation.ManagedAttribute;\nimport org.springframework.stereotype.Component;\n\
      \n@Component\n@ManagedResource(objectName = \"bean:name=testBean1\", description\
      \ = \"My Managed Bean\")\npublic class JmxTestBean {\n\n    private String name\
      \ = \"MyJMXBean\";\n\n    @ManagedAttribute(description = \"The Name Attribute\"\
      )\n    public String getName() {\n        return name;\n    }\n\n    @ManagedAttribute(description\
      \ = \"Set the Name Attribute\")\n    public void setName(String name) {\n  \
      \      this.name = name;\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\n\
      public class JmxTestBean {\n\n    private String name = \"MyJMXBean\";\n\n \
      \   public String getName() {\n        return name;\n    }\n\n    public void\
      \ setName(String name) {\n        this.name = name;\n    }\n}"
    '# konveyor_guidance': "Spring JMX XML configuration detected:\n\n Spring JMX\
      \ is not supported by Quarkus with the GraalVM Native compilation.\n Spring\
      \ JMX can be used with the Quarkus Hotspot compilation however."
  migration_complexity: low
- rule_id: springboot-jmx-to-quarkus-00001
  description: Spring JMX is not supported by Quarkus with GraalVM on a Native Image
  severity: critical
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/228-springboot-jmx-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Spring JMX is not supported by Quarkus with GraalVM on a Native Image
    code_snippet: "import org.springframework.jmx.export.annotation.ManagedResource;\n\
      import org.springframework.jmx.export.annotation.ManagedAttribute;\nimport org.springframework.stereotype.Component;\n\
      \n@Component\n@ManagedResource(objectName = \"com.example:type=MyBean\")\npublic\
      \ class MyBean {\n\n    private String name = \"DefaultName\";\n\n    @ManagedAttribute\n\
      \    public String getName() {\n        return name;\n    }\n\n    @ManagedAttribute\n\
      \    public void setName(String name) {\n        this.name = name;\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\n\
      public class MyBean {\n\n    private String name = \"DefaultName\";\n\n    public\
      \ String getName() {\n        return name;\n    }\n\n    public void setName(String\
      \ name) {\n        this.name = name;\n    }\n}"
    '# konveyor_guidance': "Spring JMX annotation configuration detected:\n\n Spring\
      \ JMX is not supported by Quarkus with the GraalVM Native compilation.\n Spring\
      \ JMX can be used with the Quarkus Hotspot compilation however."
  migration_complexity: low
- rule_id: jakarta-jaxrs-to-quarkus-00010
  description: Replace jakarta JAX-RS dependency
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/214-jakarta-jaxrs-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace jakarta JAX-RS dependency
    code_snippet: "import jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.Produces;\n\
      import jakarta.ws.rs.core.MediaType;\n\n@Path(\"/hello\")\npublic class HelloResource\
      \ {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello()\
      \ {\n        return \"Hello, Jakarta EE!\";\n    }\n}"
    expected_fix: "import jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.core.MediaType;\n\
      \n@Path(\"/hello\")\npublic class HelloResource {\n\n    @GET\n    @jakarta.ws.rs.Produces(MediaType.TEXT_PLAIN)\n\
      \    public String hello() {\n        return \"Hello, Jakarta EE!\";\n    }\n\
      }"
    '# konveyor_guidance': Dependency `jakarta.ws.rs:jakarta.ws.rs-api` has to be
      replaced with `io.quarkus:quarkus-resteasy-reactive` artifact.
  migration_complexity: low
- rule_id: jakarta-jaxrs-to-quarkus-00020
  description: Jakarta JAX-RS activation is no longer necessary
  severity: low
  category: optional
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/214-jakarta-jaxrs-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Jakarta JAX-RS activation is no longer necessary
    code_snippet: "import jakarta.ws.rs.ApplicationPath;\nimport jakarta.ws.rs.core.Application;\n\
      \n@ApplicationPath(\"/api\")\npublic class MyApplication extends Application\
      \ {\n    // Application configuration code\n}"
    expected_fix: "import jakarta.ws.rs.core.Application;\n\npublic class MyApplication\
      \ extends Application {\n    // Application configuration code\n}"
    '# konveyor_guidance': Jakarta JAX-RS activation is no longer necessary. You can
      set a root path like this but you don't have to.
  migration_complexity: low
- rule_id: springboot-metrics-to-quarkus-0100
  description: Replace the Micrometer dependency with Quarkus Microprofile 'metrics'
    extension
  severity: high
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/229-springboot-metrics-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the Micrometer dependency with Quarkus Microprofile 'metrics'
      extension
    code_snippet: "package com.example.demo;\n\nimport io.micrometer.core.annotation.Timed;\n\
      import io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.Counter;\n\
      \nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      \n@ApplicationScoped\npublic class MetricsService {\n\n    private final MeterRegistry\
      \ meterRegistry;\n    private final Counter myCounter;\n\n    @Inject\n    public\
      \ MetricsService(MeterRegistry meterRegistry) {\n        this.meterRegistry\
      \ = meterRegistry;\n        this.myCounter = this.meterRegistry.counter(\"my_counter\"\
      );\n    }\n\n    @Timed(value = \"processData.time\")\n    public void processData()\
      \ {\n        myCounter.increment();\n        // Process data logic here\n  \
      \  }\n}"
    expected_fix: "package com.example.demo;\n\nimport org.eclipse.microprofile.metrics.annotation.Timed;\n\
      import org.eclipse.microprofile.metrics.MetricRegistry;\nimport org.eclipse.microprofile.metrics.Counter;\n\
      \nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      \n@ApplicationScoped\npublic class MetricsService {\n\n    private final MetricRegistry\
      \ metricRegistry;\n    private final Counter myCounter;\n\n    @Inject\n   \
      \ public MetricsService(MetricRegistry metricRegistry) {\n        this.metricRegistry\
      \ = metricRegistry;\n        this.myCounter = this.metricRegistry.counter(\"\
      my_counter\");\n    }\n\n    @Timed(name = \"processDataTime\")\n    public\
      \ void processData() {\n        myCounter.inc();\n        // Process data logic\
      \ here\n    }\n}"
    '# konveyor_guidance': "Replace the Micrometer dependency with Quarkus Microprofile\
      \ 'metrics' extension. \n Usually this is a transitive dependency brought by\
      \ `org.springframework.boot:spring-boot-starter-actuator` and has to be replaced\
      \ by `io.quarkus:quarkus-smallrye-metrics` artifact"
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for MeterRegistry\npublic class MeterRegistry {\n    private Long\
      \ id;\n    private String name;\n\n    public MeterRegistry() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for MetricRegistry\npublic class\
      \ MetricRegistry {\n    private Long id;\n    private String name;\n\n    public\
      \ MetricRegistry() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: springboot-metrics-to-quarkus-0200
  description: Replace the Micrometer code with Microprofile Metrics code
  severity: high
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/229-springboot-metrics-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the Micrometer code with Microprofile Metrics code
    code_snippet: "import io.micrometer.core.instrument.Counter;\nimport io.micrometer.core.instrument.MeterRegistry;\n\
      \nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      \n@ApplicationScoped\npublic class MetricsService {\n\n    private final MeterRegistry\
      \ meterRegistry;\n    private Counter loginCounter;\n\n    @Inject\n    public\
      \ MetricsService(MeterRegistry meterRegistry) {\n        this.meterRegistry\
      \ = meterRegistry;\n        this.loginCounter = Counter.builder(\"login.attempts\"\
      )\n                                   .description(\"Number of login attempts\"\
      )\n                                   .register(meterRegistry);\n    }\n\n \
      \   public void recordLoginAttempt() {\n        loginCounter.increment();\n\
      \    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import org.eclipse.microprofile.metrics.Counter;\nimport org.eclipse.microprofile.metrics.annotation.Metric;\n\
      \n@ApplicationScoped\npublic class MetricsService {\n\n    @Inject\n    @Metric(name\
      \ = \"login.attempts\", description = \"Number of login attempts\")\n    private\
      \ Counter loginCounter;\n\n    public void recordLoginAttempt() {\n        loginCounter.inc();\n\
      \    }\n}"
    '# konveyor_guidance': Replace the Micrometer code with Microprofile Metrics code
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for MeterRegistry\npublic class MeterRegistry {\n    private Long\
      \ id;\n    private String name;\n\n    public MeterRegistry() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for Counter\npublic class Counter\
      \ {\n    private Long id;\n    private String name;\n\n    public Counter()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: springboot-metrics-to-quarkus-0300
  description: Replace Spring Prometheus Metrics endpoint mapping
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/229-springboot-metrics-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace Spring Prometheus Metrics endpoint mapping
    code_snippet: "import org.springframework.web.bind.annotation.GetMapping;\nimport\
      \ org.springframework.web.bind.annotation.RestController;\n\n@RestController\n\
      public class PrometheusMetricsController {\n\n    @GetMapping(\"/actuator/prometheus\"\
      )\n    public String exposePrometheusMetrics() {\n        // Simulated metrics\
      \ exposure logic\n        return \"Metrics data for Prometheus\";\n    }\n}"
    expected_fix: "import io.quarkus.micrometer.runtime.config.MicrometerConfig;\n\
      import javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic\
      \ class PrometheusMetricsController {\n\n    // Simulated metrics exposure logic\n\
      \    public String exposePrometheusMetrics() {\n        return \"Metrics data\
      \ for Prometheus\";\n    }\n\n    // Configuration to expose Prometheus metrics\n\
      \    void configureMetrics(MicrometerConfig config) {\n        // Correct configuration\
      \ setting for Prometheus metrics path\n        // This is a placeholder as direct\
      \ assignment like this is not supported\n        // Typically, configuration\
      \ would be done via application.properties in Quarkus\n    }\n}"
    '# konveyor_guidance': Replace `management.endpoints.web.exposure.include=prometheus`
      with `quarkus.micrometer.export.prometheus.path=/actuator/prometheus`
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for MicrometerConfig\npublic class MicrometerConfig {\n    private\
      \ Long id;\n    private String name;\n\n    public MicrometerConfig() {}\n\n\
      \    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: springboot-di-to-quarkus-00000
  description: Replace the SpringBoot Dependency Injection artifact with Quarkus 'spring-di'
    extension
  severity: low
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/225-springboot-di-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Replace the SpringBoot Dependency Injection artifact with Quarkus 'spring-di'
      extension
    code_snippet: "import org.springframework.beans.factory.annotation.Autowired;\n\
      import org.springframework.stereotype.Service;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\
      \n@SpringBootApplication\npublic class SpringBootApp {\n    public static void\
      \ main(String[] args) {\n        // Spring Boot application startup logic\n\
      \    }\n}\n\n@Service\nclass GreetingService {\n    private final MessageService\
      \ messageService;\n\n    @Autowired\n    public GreetingService(MessageService\
      \ messageService) {\n        this.messageService = messageService;\n    }\n\n\
      \    public String greet() {\n        return messageService.getMessage();\n\
      \    }\n}\n\n@Service\nclass MessageService {\n    public String getMessage()\
      \ {\n        return \"Hello, World!\";\n    }\n}"
    expected_fix: "import io.quarkus.runtime.Quarkus;\nimport io.quarkus.runtime.QuarkusApplication;\n\
      import io.quarkus.runtime.annotations.QuarkusMain;\nimport javax.enterprise.context.ApplicationScoped;\n\
      import javax.inject.Inject;\n\n@QuarkusMain\npublic class QuarkusApp implements\
      \ QuarkusApplication {\n    @Inject\n    GreetingService greetingService;\n\n\
      \    @Override\n    public int run(String... args) throws Exception {\n    \
      \    System.out.println(greetingService.greet());\n        Quarkus.waitForExit();\n\
      \        return 0;\n    }\n\n    public static void main(String[] args) {\n\
      \        Quarkus.run(QuarkusApp.class, args);\n    }\n}\n\n@ApplicationScoped\n\
      class GreetingService {\n    private final MessageService messageService;\n\n\
      \    @Inject\n    public GreetingService(MessageService messageService) {\n\
      \        this.messageService = messageService;\n    }\n\n    public String greet()\
      \ {\n        return messageService.getMessage();\n    }\n}\n\n@ApplicationScoped\n\
      class MessageService {\n    public String getMessage() {\n        return \"\
      Hello, World!\";\n    }\n}"
    '# konveyor_guidance': "Replace the SpringBoot Dependency Injection artifact with\
      \ Quarkus `spring-di` extension\n\n Spring DI is in spring-beans artifact brought\
      \ transitively by any `org.springframework.boot:spring-boot-*` dependency\n\
      \ Add Quarkus dependency `io.quarkus:quarkus-spring-di`"
  migration_complexity: low
- rule_id: springboot-di-to-quarkus-00001
  description: 'For Spring DI the XML-based bean configuration metadata is not supported
    by Quarkus '
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/225-springboot-di-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: 'For Spring DI the XML-based bean configuration metadata is not supported
      by Quarkus '
    code_snippet: "import org.springframework.context.support.ClassPathXmlApplicationContext;\n\
      \npublic class SpringXmlConfigApp {\n    public static void main(String[] args)\
      \ {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"\
      beans.xml\");\n        MyBean myBean = context.getBean(\"myBean\", MyBean.class);\n\
      \        myBean.doSomething();\n    }\n}\n\nclass MyBean {\n    public void\
      \ doSomething() {\n        System.out.println(\"Doing something...\");\n   \
      \ }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      import io.quarkus.runtime.QuarkusApplication;\nimport io.quarkus.runtime.annotations.QuarkusMain;\n\
      \n@QuarkusMain\npublic class QuarkusApp implements QuarkusApplication {\n\n\
      \    @Inject\n    MyBean myBean;\n\n    @Override\n    public int run(String...\
      \ args) throws Exception {\n        myBean.doSomething();\n        return 0;\n\
      \    }\n\n    public static void main(String[] args) {\n        io.quarkus.runtime.Quarkus.run(QuarkusApp.class,\
      \ args);\n    }\n}\n\n@ApplicationScoped\nclass MyBean {\n    public void doSomething()\
      \ {\n        System.out.println(\"Doing something...\");\n    }\n}"
    '# konveyor_guidance': Quarkus only supports the java-based configuration of Spring
      beans.
  migration_complexity: low
- rule_id: springboot-di-to-quarkus-00002
  description: Spring DI infrastructure classes not supported by Quarkus
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/quarkus/225-springboot-di-to-quarkus.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Spring DI infrastructure classes not supported by Quarkus
    code_snippet: "package com.example.demo;\n\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\
      import org.springframework.stereotype.Component;\n\n@Component\npublic class\
      \ CustomBeanPostProcessor implements BeanPostProcessor {\n\n    @Override\n\
      \    public Object postProcessBeforeInitialization(Object bean, String beanName)\
      \ {\n        System.out.println(\"Before Initialization : \" + beanName);\n\
      \        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object\
      \ bean, String beanName) {\n        System.out.println(\"After Initialization\
      \ : \" + beanName);\n        return bean;\n    }\n}"
    expected_fix: "package com.example.demo;\n\nimport jakarta.annotation.PostConstruct;\n\
      import jakarta.annotation.PreDestroy;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      import jakarta.enterprise.inject.spi.CDI;\nimport jakarta.enterprise.inject.spi.Bean;\n\
      \n@ApplicationScoped\npublic class CustomBeanPostProcessor {\n\n    @PostConstruct\n\
      \    public void postConstruct() {\n        CDI.current().getBeanManager().getBeans(Object.class).forEach(bean\
      \ -> {\n            System.out.println(\"Before Initialization : \" + bean.getBeanClass().getName());\n\
      \        });\n    }\n\n    @PreDestroy\n    public void preDestroy() {\n   \
      \     CDI.current().getBeanManager().getBeans(Object.class).forEach(bean ->\
      \ {\n            System.out.println(\"After Initialization : \" + bean.getBeanClass().getName());\n\
      \        });\n    }\n}"
    '# konveyor_guidance': Spring infrastructure classes (like `org.springframework.beans.factory.config.BeanPostProcessor`
      , `org.springframework.context.ApplicationContext` for example) will not be
      executed.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for Object\npublic class Object {\n    private Long id;\n    private\
      \ String name;\n\n    public Object() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-6.2-00010
  description: EntityPersister#multiload method has changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/151-hibernate-6.2.windup.yaml
  test_cases:
  - id: tc001
    language: java
    compilable: false
    reason: Internal SPI - for framework developers only
    context: EntityPersister#multiload method has changed
    code_snippet: "import org.hibernate.engine.spi.SharedSessionContractImplementor;\n\
      import org.hibernate.loader.entity.EntityPersister;\nimport org.hibernate.loader.entity.MultiIdLoadOptions;\n\
      \npublic class HibernateMultiLoadExample {\n\n    public void loadEntities(SharedSessionContractImplementor\
      \ session, EntityPersister persister) {\n        Object[] ids = new Object[]\
      \ {1, 2, 3};  // Example entity IDs\n        MultiIdLoadOptions options = new\
      \ MultiIdLoadOptions();\n\n        // This is the violating code\n        persister.multiload(ids,\
      \ session, options);\n    }\n}"
    expected_fix: "import org.hibernate.engine.spi.SharedSessionContractImplementor;\n\
      import org.hibernate.engine.spi.SessionImplementor;\nimport org.hibernate.event.spi.EventSource;\n\
      import org.hibernate.loader.entity.EntityPersister;\nimport org.hibernate.loader.entity.MultiIdLoadOptions;\n\
      \npublic class HibernateMultiLoadExample {\n\n    public void loadEntities(SharedSessionContractImplementor\
      \ session, EntityPersister persister) {\n        Object[] ids = new Object[]\
      \ {1, 2, 3};  // Example entity IDs\n        MultiIdLoadOptions options = new\
      \ MultiIdLoadOptions();\n\n        // Fixed code\n        if (session.isEventSource())\
      \ {\n            EventSource eventSourceSession = session.asEventSource();\n\
      \            persister.lock(ids, eventSourceSession, options);\n        }\n\
      \    }\n}"
    '# konveyor_guidance': "This method has changed from `EntityPersister#multiload(Object[]\
      \ ids, SharedSessionContractImplementor session, MultiIdLoadOptions loadOptions)`\
      \ to `EntityPersister#lock(Object[] ids, EventSource session, MultiIdLoadOptions\
      \ loadOptions)`.\n Both EventSource and SharedSessionContractImplementor are\
      \ contracts of `SessionImpl` so they can be easily swapped.\n Methods `isEventSource`\
      \ and `asEventSource` can also be used to ease the transition, available on\
      \ the `SharedSessionContractImplementor` contract."
  migration_complexity: low
- rule_id: hibernate-6.2-00020
  description: Executable#afterDeserialize method has changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/151-hibernate-6.2.windup.yaml
  test_cases:
  - id: tc001
    language: java
    compilable: false
    reason: Internal SPI - for framework developers only
    context: Executable#afterDeserialize method has changed
    code_snippet: "import org.hibernate.engine.spi.Executable;\nimport org.hibernate.engine.spi.SharedSessionContractImplementor;\n\
      \npublic class MyExecutable implements Executable {\n    @Override\n    public\
      \ void afterDeserialize(SharedSessionContractImplementor session) {\n      \
      \  if (session.isEventSource()) {\n            // This code violates the migration\
      \ rule by using the old method signature\n            // and not adapting to\
      \ the new EventSource parameter type.\n            System.out.println(\"Session\
      \ is an event source.\");\n        }\n    }\n\n    @Override\n    public void\
      \ execute() throws Exception {\n        // Implementation of required method\n\
      \    }\n\n    @Override\n    public boolean hasAfterTransactionCompletion()\
      \ {\n        return false;\n    }\n\n    @Override\n    public Serializable[]\
      \ getPropertySpaces() {\n        return new Serializable[0];\n    }\n}"
    expected_fix: "import org.hibernate.engine.spi.Executable;\nimport org.hibernate.engine.spi.EventSource;\n\
      import org.hibernate.engine.spi.SharedSessionContractImplementor;\n\nimport\
      \ java.io.Serializable;\n\npublic class MyExecutable implements Executable {\n\
      \    @Override\n    public void afterDeserialize(EventSource eventSource) {\n\
      \        // Adapted to use the new EventSource parameter type.\n        System.out.println(\"\
      Session is an event source.\");\n    }\n\n    @Override\n    public void execute()\
      \ throws Exception {\n        // Implementation of required method\n    }\n\n\
      \    @Override\n    public boolean hasAfterTransactionCompletion() {\n     \
      \   return false;\n    }\n\n    @Override\n    public Serializable[] getPropertySpaces()\
      \ {\n        return new Serializable[0];\n    }\n}"
    '# konveyor_guidance': "This method has changed from `Executable#afterDeserialize(SharedSessionContractImplementor\
      \ session)` to `Executable#afterDeserialize(EventSource eventSource)`.\n Both\
      \ EventSource and SharedSessionContractImplementor are contracts of `SessionImpl`\
      \ so they can be easily swapped.\n Methods `isEventSource` and `asEventSource`\
      \ can also be used to ease the transition, available on the `SharedSessionContractImplementor`\
      \ contract."
    test_code: "// Stub for EventSource\npublic class EventSource {\n    private Long\
      \ id;\n    private String name;\n\n    public EventSource() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for SharedSessionContractImplementor\n\
      public class SharedSessionContractImplementor {\n    private Long id;\n    private\
      \ String name;\n\n    public SharedSessionContractImplementor() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-6.2-00030
  description: JdbcType#getJdbcRecommendedJavaTypeMapping() method has changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/151-hibernate-6.2.windup.yaml
  test_cases:
  - id: tc001
    language: java
    compilable: false
    reason: Internal SPI - for framework developers only
    context: JdbcType#getJdbcRecommendedJavaTypeMapping() method has changed
    code_snippet: "import org.hibernate.type.descriptor.jdbc.JdbcType;\nimport org.hibernate.type.descriptor.java.BasicJavaType;\n\
      \npublic class JdbcTypeExample {\n\n    public static void main(String[] args)\
      \ {\n        JdbcType jdbcType = getJdbcType();\n        BasicJavaType<?> javaTypeMapping\
      \ = jdbcType.getJdbcRecommendedJavaTypeMapping();\n        System.out.println(\"\
      Java type mapping: \" + javaTypeMapping.getClass().getName());\n    }\n\n  \
      \  private static JdbcType getJdbcType() {\n        // Simulated retrieval of\
      \ JdbcType, typically from Hibernate session or metadata\n        return new\
      \ CustomJdbcType();\n    }\n\n    private static class CustomJdbcType implements\
      \ JdbcType {\n        @Override\n        public int getJdbcTypeCode() {\n  \
      \          return java.sql.Types.INTEGER;\n        }\n\n        @Override\n\
      \        public BasicJavaType<?> getJdbcRecommendedJavaTypeMapping() {\n   \
      \         return new BasicJavaType<Integer>() {\n                @Override\n\
      \                public Class<Integer> getJavaTypeClass() {\n              \
      \      return Integer.class;\n                }\n            };\n        }\n\
      \    }\n}"
    expected_fix: "import org.hibernate.type.descriptor.jdbc.JdbcType;\nimport org.hibernate.type.descriptor.java.JavaType;\n\
      \npublic class JdbcTypeExample {\n\n    public static void main(String[] args)\
      \ {\n        JdbcType jdbcType = getJdbcType();\n        JavaType<?> javaTypeMapping\
      \ = jdbcType.getJdbcRecommendedJavaTypeMapping();\n        System.out.println(\"\
      Java type mapping: \" + javaTypeMapping.getClass().getName());\n    }\n\n  \
      \  private static JdbcType getJdbcType() {\n        // Simulated retrieval of\
      \ JdbcType, typically from Hibernate session or metadata\n        return new\
      \ CustomJdbcType();\n    }\n\n    private static class CustomJdbcType implements\
      \ JdbcType {\n        @Override\n        public int getJdbcTypeCode() {\n  \
      \          return java.sql.Types.INTEGER;\n        }\n\n        @Override\n\
      \        public JavaType<?> getJdbcRecommendedJavaTypeMapping() {\n        \
      \    return new JavaType<Integer>() {\n                @Override\n         \
      \       public Class<Integer> getJavaTypeClass() {\n                    return\
      \ Integer.class;\n                }\n            };\n        }\n    }\n}"
    '# konveyor_guidance': The return type of `JdbcType#getJdbcRecommendedJavaTypeMapping()`
      was changed from `BasicJavaType` to `JavaType`.
  migration_complexity: low
- rule_id: hibernate-6.2-00040
  description: Classes within the 'org.hibernate.cfg' package have been moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/151-hibernate-6.2.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Classes within the 'org.hibernate.cfg' package have been moved
    code_snippet: "import org.hibernate.cfg.Configuration;\nimport org.hibernate.SessionFactory;\n\
      \npublic class HibernateUtil {\n    private static final SessionFactory sessionFactory\
      \ = buildSessionFactory();\n\n    private static SessionFactory buildSessionFactory()\
      \ {\n        try {\n            // Create the SessionFactory from hibernate.cfg.xml\n\
      \            return new Configuration().configure().buildSessionFactory();\n\
      \        } catch (Throwable ex) {\n            // Log the exception.\n     \
      \       System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n\
      \            throw new ExceptionInInitializerError(ex);\n        }\n    }\n\n\
      \    public static SessionFactory getSessionFactory() {\n        return sessionFactory;\n\
      \    }\n}"
    expected_fix: "import jakarta.persistence.EntityManagerFactory;\nimport jakarta.persistence.Persistence;\n\
      \npublic class HibernateUtil {\n    private static final EntityManagerFactory\
      \ entityManagerFactory = buildEntityManagerFactory();\n\n    private static\
      \ EntityManagerFactory buildEntityManagerFactory() {\n        try {\n      \
      \      // Create the EntityManagerFactory from persistence.xml\n           \
      \ return Persistence.createEntityManagerFactory(\"your_persistence_unit_name\"\
      );\n        } catch (Throwable ex) {\n            // Log the exception.\n  \
      \          System.err.println(\"Initial EntityManagerFactory creation failed.\"\
      \ + ex);\n            throw new ExceptionInInitializerError(ex);\n        }\n\
      \    }\n\n    public static EntityManagerFactory getEntityManagerFactory() {\n\
      \        return entityManagerFactory;\n    }\n}"
    '# konveyor_guidance': This class within `org.hibernate.cfg` has been moved; see
      link for more information.
    test_code: "// Stub for Throwable\npublic class Throwable {\n    private Long\
      \ id;\n    private String name;\n\n    public Throwable() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-6.2-00050
  description: Classes within the 'org.hibernate.loader' package have been moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/151-hibernate-6.2.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Classes within the 'org.hibernate.loader' package have been moved
    code_snippet: "import org.hibernate.Session;\nimport org.hibernate.loader.custom.CustomQuery;\n\
      import org.hibernate.loader.custom.sql.SQLQueryParser;\n\npublic class CustomLoaderExample\
      \ {\n\n    public void executeCustomQuery(Session session) {\n        String\
      \ sql = \"SELECT * FROM Users WHERE id = :userId\";\n        SQLQueryParser\
      \ parser = new SQLQueryParser(sql, null, session.getFactory());\n        CustomQuery\
      \ customQuery = parser.parseSQL();\n\n        session.createNativeQuery(customQuery.getSQL()).setParameter(\"\
      userId\", 1).getResultList();\n    }\n}"
    expected_fix: "import org.hibernate.Session;\nimport org.hibernate.query.NativeQuery;\n\
      \npublic class CustomLoaderExample {\n\n    public void executeCustomQuery(Session\
      \ session) {\n        String sql = \"SELECT * FROM Users WHERE id = :userId\"\
      ;\n        NativeQuery<?> query = session.createNativeQuery(sql);\n        query.setParameter(\"\
      userId\", 1);\n        query.getResultList();\n    }\n}"
    '# konveyor_guidance': This class within `org.hibernate.loader` has been moved;
      see link for more information.
    test_code: "// Stub for Session\npublic class Session {\n    private Long id;\n\
      \    private String name;\n\n    public Session() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00010
  description: Constants for Hibernate Search configuration property keys have changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Constants for Hibernate Search configuration property keys have changed
    code_snippet: "import org.hibernate.search.cfg.Environment;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\npublic class SearchConfigurationExample\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void configureSearch() {\n        entityManager.getEntityManagerFactory().getProperties().put(Environment.MODEL_MAPPING,\
      \ new CustomSearchMapping());\n    }\n\n    private static class CustomSearchMapping\
      \ {\n        // Custom mapping logic\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.cfg.HibernateOrmMapperSettings;\n\
      import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      \npublic class SearchConfigurationExample {\n\n    @PersistenceContext\n   \
      \ private EntityManager entityManager;\n\n    public void configureSearch()\
      \ {\n        entityManager.getEntityManagerFactory().getProperties().put(HibernateOrmMapperSettings.MAPPING_CONFIGURER,\
      \ new CustomSearchMapping());\n    }\n\n    private static class CustomSearchMapping\
      \ {\n        // Custom mapping logic\n    }\n}"
    '# konveyor_guidance': In Hibernate Search 6, constants are provided through classes
      whose name ends with Settings. Follow link for more details.
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00020
  description: Property hibernate.search.analyzer not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.analyzer not available anymore
    code_snippet: "import javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\n\
      import javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport\
      \ org.hibernate.search.annotations.Analyzer;\nimport org.hibernate.search.annotations.Field;\n\
      import org.hibernate.search.annotations.Indexed;\n\n@Entity\n@Indexed\npublic\
      \ class Book {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n\
      \    private Long id;\n\n    @Field\n    @Analyzer(definition = \"hibernate.search.analyzer\"\
      )\n    private String title;\n\n    public Book() {\n    }\n\n    public Long\
      \ getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n\
      \        this.id = id;\n    }\n\n    public String getTitle() {\n        return\
      \ title;\n    }\n\n    public void setTitle(String title) {\n        this.title\
      \ = title;\n    }\n}"
    expected_fix: "import javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\n\
      import javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport\
      \ org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.IdentifierBridgeRef;\n\
      import org.hibernate.search.engine.backend.types.Projectable;\nimport org.hibernate.search.engine.backend.types.Sortable;\n\
      \n@Entity\n@Indexed\npublic class Book {\n    @Id\n    @GeneratedValue(strategy\
      \ = GenerationType.IDENTITY)\n    @KeywordField(name = \"id\", sortable = Sortable.YES,\
      \ projectable = Projectable.YES, identifierBridge = @IdentifierBridgeRef(type\
      \ = Long.class))\n    private Long id;\n\n    @FullTextField(analyzer = \"default\"\
      )\n    private String title;\n\n    public Book() {\n    }\n\n    public Long\
      \ getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n\
      \        this.id = id;\n    }\n\n    public String getTitle() {\n        return\
      \ title;\n    }\n\n    public void setTitle(String title) {\n        this.title\
      \ = title;\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. To override the
      default analyzer, define a custom analyzer named default. See link.
  migration_complexity: low
- rule_id: hibernate-search-00030
  description: Property hibernate.search.autoregister_listeners not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.autoregister_listeners not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"MyPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        \n        em.setProperty(\"\
      hibernate.search.autoregister_listeners\", \"false\");\n        \n        //\
      \ Additional code to demonstrate usage\n        em.getTransaction().begin();\n\
      \        // Perform operations\n        em.getTransaction().commit();\n    \
      \    \n        em.close();\n        emf.close();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"MyPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        \n        em.setProperty(\"\
      hibernate.search.enabled\", \"false\");\n        \n        // Additional code\
      \ to demonstrate usage\n        em.getTransaction().begin();\n        // Perform\
      \ operations\n        em.getTransaction().commit();\n        \n        em.close();\n\
      \        emf.close();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.enabled`.'
  migration_complexity: trivial
- rule_id: hibernate-search-00040
  description: Property hibernate.search.batch_size not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.batch_size not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import org.hibernate.search.jpa.FullTextEntityManager;\nimport org.hibernate.search.jpa.Search;\n\
      \nimport javax.ejb.Stateless;\nimport javax.transaction.Transactional;\n\n@Stateless\n\
      public class BatchProcessingService {\n\n    @PersistenceContext\n    private\
      \ EntityManager entityManager;\n\n    @Transactional\n    public void processLargeData()\
      \ {\n        FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager(entityManager);\n\
      \        fullTextEntityManager.getTransaction().begin();\n\n        // Setting\
      \ the batch size for indexing - this is the violating part\n        fullTextEntityManager.setProperty(\"\
      hibernate.search.batch_size\", \"25\");\n\n        // Example of processing\
      \ data\n        for (int i = 0; i < 1000; i++) {\n            // Simulate data\
      \ processing and indexing\n            fullTextEntityManager.persist(new DataEntity(\"\
      data\" + i));\n            if (i % 25 == 0) {\n                fullTextEntityManager.flush();\n\
      \                fullTextEntityManager.clear();\n            }\n        }\n\n\
      \        fullTextEntityManager.getTransaction().commit();\n    }\n}\n\nclass\
      \ DataEntity {\n    private String data;\n\n    public DataEntity(String data)\
      \ {\n        this.data = data;\n    }\n\n    // Getters and setters\n    public\
      \ String getData() {\n        return data;\n    }\n\n    public void setData(String\
      \ data) {\n        this.data = data;\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.transaction.Transactional;\nimport jakarta.ejb.Stateless;\n\n\
      import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      \n@Stateless\npublic class BatchProcessingService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    @Transactional\n    public\
      \ void processLargeData() {\n        SearchSession searchSession = Search.session(entityManager);\n\
      \n        // Example of processing data\n        for (int i = 0; i < 1000; i++)\
      \ {\n            DataEntity dataEntity = new DataEntity(\"data\" + i);\n   \
      \         entityManager.persist(dataEntity);\n            if (i % 25 == 0) {\n\
      \                entityManager.flush();\n                entityManager.clear();\n\
      \                searchSession.workspace().flush(); // Ensure changes are visible\
      \ to the search engine\n            }\n        }\n    }\n}\n\nclass DataEntity\
      \ {\n    private String data;\n\n    public DataEntity(String data) {\n    \
      \    this.data = data;\n    }\n\n    public String getData() {\n        return\
      \ data;\n    }\n\n    public void setData(String data) {\n        this.data\
      \ = data;\n    }\n}"
    '# konveyor_guidance': "No direct equivalent in Hibernate Search 6. This property\
      \ was not documented in Hibernate Search 5. For the specific use case of batch\
      \ processes, know that upon Hibernate ORM session flushes,\n Hibernate Search\
      \ 6 will automatically turn entities to documents and hold documents in memory\
      \ until the transaction commit.\n\n See links for more information."
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00050
  description: The syntax for configuring AWS authentication changed in Hibernate
    Search 6.
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The syntax for configuring AWS authentication changed in Hibernate Search
      6.
    code_snippet: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.transaction.Transactional;\n\npublic class OldAWSConfigExample\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    @Transactional\n    public void searchDocuments() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n\n        // This configuration\
      \ uses the old Hibernate Search 5 AWS configuration syntax\n        System.setProperty(\"\
      hibernate.search.default.elasticsearch.aws.access_key\", \"yourAccessKey\");\n\
      \        System.setProperty(\"hibernate.search.default.elasticsearch.aws.secret_key\"\
      , \"yourSecretKey\");\n        System.setProperty(\"hibernate.search.default.elasticsearch.aws.region\"\
      , \"us-east-1\");\n\n        // Example search operation\n        searchSession.search(MyEntity.class)\n\
      \                .where(f -> f.match().fields(\"title\").matching(\"test\"))\n\
      \                .fetchHits(10);\n    }\n\n    public static class MyEntity\
      \ {\n        private Long id;\n        private String title;\n\n        // Getters\
      \ and setters\n        public Long getId() {\n            return id;\n     \
      \   }\n\n        public void setId(Long id) {\n            this.id = id;\n \
      \       }\n\n        public String getTitle() {\n            return title;\n\
      \        }\n\n        public void setTitle(String title) {\n            this.title\
      \ = title;\n        }\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.transaction.Transactional;\n\npublic class UpdatedAWSConfigExample\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    @Transactional\n    public void searchDocuments() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n\n        // Updated configuration\
      \ using Hibernate Search 6 AWS configuration syntax\n        System.setProperty(\"\
      hibernate.search.backend.aws.access_key\", \"yourAccessKey\");\n        System.setProperty(\"\
      hibernate.search.backend.aws.secret_key\", \"yourSecretKey\");\n        System.setProperty(\"\
      hibernate.search.backend.aws.region\", \"us-east-1\");\n\n        // Example\
      \ search operation\n        searchSession.search(MyEntity.class)\n         \
      \       .where(f -> f.match().fields(\"title\").matching(\"test\"))\n      \
      \          .fetchHits(10);\n    }\n\n    public static class MyEntity {\n  \
      \      private Long id;\n        private String title;\n\n        // Getters\
      \ and setters\n        public Long getId() {\n            return id;\n     \
      \   }\n\n        public void setId(Long id) {\n            this.id = id;\n \
      \       }\n\n        public String getTitle() {\n            return title;\n\
      \        }\n\n        public void setTitle(String title) {\n            this.title\
      \ = title;\n        }\n    }\n}"
    '# konveyor_guidance': "AWS configuration properties must change from `hibernate.search.default.elasticsearch.aws.*`\
      \ to `hibernate.search.backend.aws.*`.\n See link for more information about\
      \ credential configuration changes."
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: high
- rule_id: hibernate-search-00060
  description: Property hibernate.search.batch_size not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.batch_size not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@Stateless\npublic class SearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.search.loading.spi.SearchLoadingContextBuilder.class)\n\
      \            .setProperty(\"hibernate.search.batch_size\", \"25\"); // This\
      \ is the violating line\n        fullTextEntityManager.createIndexer().start();\n\
      \    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@Stateless\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.massIndexer()\n\
      \            .batchSizeToLoadObjects(25)\n            .start();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.connection_timeout`.'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00070
  description: Property hibernate.search.default.elasticsearch.discovery.default_scheme
    not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.discovery.default_scheme
      not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchConfiguration {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        FullTextEntityManager\
      \ fullTextEntityManager = Search.getFullTextEntityManager(entityManager);\n\
      \        fullTextEntityManager.getSearchFactory()\n            .unwrap(org.hibernate.search.engine.SearchFactory.class)\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.default.elasticsearch.discovery.default_scheme\"\
      , \"http\");\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchConfiguration {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.massIndexer()\n\
      \            .toJob()\n            .setProperty(\"hibernate.search.backend.discovery.default_scheme\"\
      , \"http\");\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.default.elasticsearch.discovery.default_scheme`.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00080
  description: Property hibernate.search.default.elasticsearch.discovery.enabled not
    available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.discovery.enabled not
      available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\n@ApplicationScoped\npublic class\
      \ LegacySearchConfiguration {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void configureSearch() {\n        java.util.Properties\
      \ properties = new java.util.Properties();\n        properties.put(\"hibernate.search.default.elasticsearch.discovery.enabled\"\
      , \"true\");\n        entityManager.getEntityManagerFactory().unwrap(org.hibernate.SessionFactory.class)\n\
      \                     .withOptions()\n                     .applySettings(properties)\n\
      \                     .build();\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport java.util.Properties;\n\
      \n@ApplicationScoped\npublic class LegacySearchConfiguration {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void configureSearch()\
      \ {\n        Properties properties = new Properties();\n        properties.put(\"\
      hibernate.search.backend.discovery.enabled\", \"true\");\n        entityManager.getEntityManagerFactory().unwrap(org.hibernate.SessionFactory.class)\n\
      \                     .withOptions()\n                     .applySettings(properties)\n\
      \                     .build();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.discovery.enabled`.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00090
  description: Property hibernate.search.default.elasticsearch.discovery.refresh_interval
    not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.discovery.refresh_interval
      not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory().unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getConfiguration().setProperty(\"hibernate.search.default.elasticsearch.discovery.refresh_interval\"\
      , \"10s\");\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        SearchSession searchSession\
      \ = Search.session(entityManager);\n        searchSession.massIndexer()\n  \
      \          .toJob()\n            .setProperty(\"hibernate.search.backend.discovery.refresh_interval\"\
      , \"10s\")\n            .start();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.discovery.refresh_interval`.'
  migration_complexity: low
- rule_id: hibernate-search-00100
  description: Property hibernate.search.*.elasticsearch.dynamic_mapping not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.elasticsearch.dynamic_mapping not available
      anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.search.loading.spi.SearchLoadingContextBuilder.class)\n\
      \            .setProperty(\"hibernate.search.default.elasticsearch.dynamic_mapping\"\
      , \"false\");\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.workspace()\n\
      \            .schemaManager()\n            .setSchemaManagementSettings(\n \
      \               new org.hibernate.search.engine.backend.types.dsl.IndexFieldTypeOptionsStep.DynamicMapping(\"\
      false\")\n            );\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.dynamic_mapping`\
      \ (for global defaults)\n or `hibernate.search.backend.indexes.<index-name>.dynamic_mapping`\
      \ (per-index)."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00105
  description: Property hibernate.search.default.elasticsearch.host not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.host not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@Stateless\npublic class SearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.default.elasticsearch.host\"\
      , \"http://localhost:9200\");\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import javax.transaction.Transactional;\n\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    @Transactional\n    public void initializeSearch() {\n\
      \        SearchSession searchSession = Search.session(entityManager);\n    \
      \    searchSession.massIndexer()\n            .toJob()\n            .startAndWait();\n\
      \        entityManager.createNativeQuery(\"SET hibernate.search.backend.uris\
      \ = 'http://localhost:9200'\")\n            .executeUpdate();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.uris`.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: medium
- rule_id: hibernate-search-00110
  description: Property hibernate.search.*.elasticsearch.index_management_wait_timeout
    not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.elasticsearch.index_management_wait_timeout
      not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      \n@ApplicationScoped\npublic class SearchConfiguration {\n\n    @PersistenceContext\n\
      \    EntityManager entityManager;\n\n    public void configureSearch() {\n \
      \       Search.session(entityManager)\n              .massIndexer()\n      \
      \        .property(\"hibernate.search.default.elasticsearch.index_management_wait_timeout\"\
      , \"60000\")\n              .start();\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchConfiguration {\n\n    @PersistenceContext\n    EntityManager\
      \ entityManager;\n\n    public void configureSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.massIndexer()\n\
      \                     .property(\"hibernate.search.backend.schema_management.minimal_required_status_wait_timeout\"\
      , \"60000\")\n                     .start();\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.schema_management.minimal_required_status_wait_timeout`\
      \ (for global defaults)\n or `hibernate.search.backend.indexes.<index-name>.schema_management.minimal_required_status_wait_timeout`\
      \ (per-index)."
  migration_complexity: low
- rule_id: hibernate-search-00120
  description: Property hibernate.search.*.elasticsearch.index_schema_management_strategy
    not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.elasticsearch.index_schema_management_strategy
      not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfig\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        \n        em.setProperty(\"\
      hibernate.search.default.elasticsearch.index_schema_management_strategy\", \"\
      create\");\n        \n        // Perform operations\n        em.close();\n \
      \       emf.close();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfig\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        \n        em.setProperty(\"\
      hibernate.search.schema_management.strategy\", \"create\");\n        \n    \
      \    // Perform operations\n        em.close();\n        emf.close();\n    }\n\
      }"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.schema_management.strategy`
      (for global defaults). There is no equivalent for per-index configuration.'
  migration_complexity: trivial
- rule_id: hibernate-search-00140
  description: Property hibernate.search.default.elasticsearch.max_total_connection_per_route
    not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.max_total_connection_per_route
      not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\n@ApplicationScoped\npublic class\
      \ OldConfigurationService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void configureHibernateSearch() {\n        java.util.Properties\
      \ properties = new java.util.Properties();\n        properties.setProperty(\"\
      hibernate.search.default.elasticsearch.max_total_connection_per_route\", \"\
      10\");\n        entityManager.getEntityManagerFactory().unwrap(org.hibernate.SessionFactory.class).unwrap(org.hibernate.search.mapper.orm.session.SearchSession.class).massIndexer().idFetchSize(150).start();\n\
      \    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport java.util.Properties;\n\
      \n@ApplicationScoped\npublic class UpdatedConfigurationService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void configureHibernateSearch()\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.backend.max_connections_per_route\", \"10\");\n        entityManager.getEntityManagerFactory().unwrap(org.hibernate.SessionFactory.class).unwrap(org.hibernate.search.mapper.orm.session.SearchSession.class).massIndexer().idFetchSize(150).start();\n\
      \    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.max_connections_per_route`.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00150
  description: Property hibernate.search.default.elasticsearch.max_total_connection
    not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.max_total_connection
      not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchConfiguration {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\
      \n    public void configureFullTextEntityManager() {\n        FullTextEntityManager\
      \ fullTextEntityManager = Search.getFullTextEntityManager(entityManager);\n\
      \        fullTextEntityManager.getSearchFactory()\n            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.default.elasticsearch.max_total_connection\"\
      , \"10\");\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchConfiguration {\n\n    @PersistenceContext\n    EntityManager\
      \ entityManager;\n\n    public void configureFullTextEntityManager() {\n   \
      \     SearchSession searchSession = Search.session(entityManager);\n       \
      \ searchSession.massIndexer()\n            .mergeSegmentsOnFinish(true)\n  \
      \          .idFetchSize(150)\n            .batchSizeToLoadObjects(25)\n    \
      \        .threadsToLoadObjects(12);\n        searchSession.toEntityManager().getEntityManagerFactory().getProperties()\n\
      \            .put(\"hibernate.search.backend.max_connections\", \"10\");\n \
      \   }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.max_connections`.'
  migration_complexity: low
- rule_id: hibernate-search-00160
  description: Property hibernate.search.default.elasticsearch.password not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.password not available
      anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@Stateless\npublic class SearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.search.loading.spi.SearchLoadingContextBuilder.class)\n\
      \            .setProperty(\"hibernate.search.default.elasticsearch.password\"\
      , \"secret\");\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@Stateless\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.workspace().tenantWorkspace().schemaManagement().setProperty(\"\
      hibernate.search.backend.password\", \"secret\");\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.password`.'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00170
  description: Property hibernate.search.default.elasticsearch.path_prefix not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.path_prefix not available
      anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@Stateless\npublic class SearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.default.elasticsearch.path_prefix\"\
      , \"/custom/path\");\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@Stateless\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.massIndexer()\n\
      \            .toJob()\n            .setProperty(\"hibernate.search.backend.path_prefix\"\
      , \"/custom/path\")\n            .start();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.path_prefix`.'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00180
  description: Property hibernate.search.default.elasticsearch.read_timeout not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.read_timeout not available
      anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.default.elasticsearch.read_timeout\", \"2000\"); // Violating\
      \ property\n\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n        EntityManager em = emf.createEntityManager();\n\
      \        \n        // Business logic using EntityManager\n        em.close();\n\
      \        emf.close();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.backend.read_timeout\", \"2000\"); // Updated property\n\n\
      \        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n        EntityManager em = emf.createEntityManager();\n\
      \        \n        // Business logic using EntityManager\n        em.close();\n\
      \        emf.close();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.read_timeout`.'
  migration_complexity: trivial
- rule_id: hibernate-search-00190
  description: Property hibernate.search.*.elasticsearch.refresh_after_write not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.elasticsearch.refresh_after_write not available
      anymore
    code_snippet: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      \n@jakarta.enterprise.context.ApplicationScoped\npublic class SearchConfiguration\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void configureSearch() {\n        SearchSession searchSession =\
      \ Search.session(entityManager);\n        searchSession.workspace()\n      \
      \      .schemaManager()\n            .setProperty(\"hibernate.search.myIndex.elasticsearch.refresh_after_write\"\
      , \"true\");\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchConfiguration {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void configureSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.schemaManager().setProperty(\"\
      hibernate.search.automatic_indexing.synchronization.strategy\", \"committed\"\
      );\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.automatic_indexing.synchronization.strategy`
      (for global defaults). There is no equivalent for per-index configuration.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00200
  description: Property hibernate.search.default.elasticsearch.request_timeout not
    available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.request_timeout not available
      anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@Stateless\npublic class BookSearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.default.elasticsearch.request_timeout\"\
      , \"2000\");\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@Stateless\n\
      public class BookSearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.workspace().configuration()\n\
      \            .setProperty(\"hibernate.search.backend.request_timeout\", \"2000\"\
      );\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.request_timeout`.'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00210
  description: Property hibernate.search.*.elasticsearch.required_index_status not
    available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.elasticsearch.required_index_status not available
      anymore
    code_snippet: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.search.loading.spi.SearchLoadingContext.class)\n\
      \            .getLoadingOptions()\n            .setProperty(\"hibernate.search.default.elasticsearch.required_index_status\"\
      , \"yellow\");\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        SearchSession searchSession\
      \ = Search.session(entityManager);\n        searchSession.schemaManager()\n\
      \            .setSchemaManagementMinimalRequiredStatus(\"yellow\");\n    }\n\
      }"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.schema_management.minimal_required_status`\
      \ (for global defaults)\n or `hibernate.search.backend.indexes.<index-name>.schema_management.minimal_required_status`\
      \ (per-index)."
  migration_complexity: low
- rule_id: hibernate-search-00220
  description: Property hibernate.search.default.elasticsearch.username not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default.elasticsearch.username not available
      anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory().unwrap(org.hibernate.search.engine.SearchFactory.class)\n\
      \            .addProperty(\"hibernate.search.default.elasticsearch.username\"\
      , \"user123\");\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.workspace().schemaManager().getSchemaMetadataContributor()\n\
      \            .addProperty(\"hibernate.search.backend.username\", \"user123\"\
      );\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.username`.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00230
  description: Property hibernate.search.*.exclusive_index_use not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.exclusive_index_use not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"my-persistence-unit\");\n \
      \       EntityManager em = emf.createEntityManager();\n        \n        em.setProperty(\"\
      hibernate.search.default.exclusive_index_use\", \"true\");\n\n        // Business\
      \ logic here\n\n        em.close();\n        emf.close();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"my-persistence-unit\");\n \
      \       EntityManager em = emf.createEntityManager();\n        \n        //\
      \ Removed the unsupported property setting\n\n        // Business logic here\n\
      \n        em.close();\n        emf.close();\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. There is no substitute
      in Hibernate Search 6.
  migration_complexity: trivial
- rule_id: hibernate-search-00240
  description: Property hibernate.search.*.directory_provider not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.directory_provider not available anymore
    code_snippet: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.default.directory_provider\"\
      , \"filesystem\");\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.massIndexer()\n\
      \            .mergeSegmentsOnFinish(true)\n            .start();\n        searchSession.workspace().configuration()\n\
      \            .setProperty(\"hibernate.search.backend.directory.type\", \"filesystem\"\
      );\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.directory.type`\
      \ (for global defaults)\n or `hibernate.search.backend.indexes.<index-name>.directory.type`\
      \ (per-index)."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00250
  description: Property hibernate.search.*.indexBase not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.indexBase not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.default.indexBase\"\
      , \"/path/to/indexes\");\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.massIndexer()\n\
      \            .mergeSegmentsOnFinish(true)\n            .start();\n        searchSession.workspace().configuration()\n\
      \            .setProperty(\"hibernate.search.backend.directory.root\", \"/path/to/indexes\"\
      );\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.directory.root`\
      \ (for global defaults)\n or `hibernate.search.backend.indexes.<index-name>.directory.root`\
      \ (per-index)."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00260
  description: Property hibernate.search.*.indexName not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.indexName not available anymore
    code_snippet: "import javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      \n@Entity\n@Indexed\npublic class Book {\n\n    @Id\n    private Long id;\n\n\
      \    @Field\n    private String title;\n\n    // Constructor, getters and setters\n\
      \    public Book() {\n    }\n\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n}\n\n//\
      \ Configuration class where the violation occurs\nimport java.util.Properties;\n\
      import javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\
      \npublic class HibernateSearchConfiguration {\n\n    public EntityManagerFactory\
      \ buildSessionFactory() {\n        Properties properties = new Properties();\n\
      \        properties.put(\"hibernate.search.default.indexName\", \"books_index\"\
      ); // Violating line\n        return Persistence.createEntityManagerFactory(\"\
      BookUnit\", properties);\n    }\n}"
    expected_fix: "import javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      \n@Entity\n@Indexed(index = \"books_index\")\npublic class Book {\n\n    @Id\n\
      \    private Long id;\n\n    @KeywordField\n    private String title;\n\n  \
      \  public Book() {\n    }\n\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n}\n\nimport\
      \ javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\
      \npublic class HibernateSearchConfiguration {\n\n    public EntityManagerFactory\
      \ buildSessionFactory() {\n        return Persistence.createEntityManagerFactory(\"\
      BookUnit\");\n    }\n}"
    '# konveyor_guidance': "No equivalent in Hibernate Search 6. The name of an index\
      \ can still be customized in the mapping, using\n @Indexed(name = ...), or with\
      \ the programmatic equivalent."
    test_code: "import jakarta.persistence.*;\n\n// Stub for EntityManagerFactory\n\
      public class EntityManagerFactory {\n    private Long id;\n    private String\
      \ name;\n\n    public EntityManagerFactory() {}\n\n    public Long getId() {\
      \ return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00270
  description: Property hibernate.search.*.index_flush_interval not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.index_flush_interval not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.default.index_flush_interval\"\
      , \"500\");\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.workspace().configuration()\n\
      \            .setProperty(\"hibernate.search.backend.io.commit_interval\", \"\
      500\");\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.io.commit_interval`\
      \ (for global defaults)\n or `hibernate.search.backend.indexes.<index name>.io.commit_interval`\
      \ (per-index)."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00280
  description: Property hibernate.search.*.index_metadata_complete not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.index_metadata_complete not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfig {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.default.index_metadata_complete\", \"true\");\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        EntityManager em = emf.createEntityManager();\n\n        // Business\
      \ logic using EntityManager\n\n        em.close();\n        emf.close();\n \
      \   }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfig {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        EntityManager em = emf.createEntityManager();\n\n        // Business\
      \ logic using EntityManager\n\n        em.close();\n        emf.close();\n \
      \   }\n}"
    '# konveyor_guidance': No equivalent in Hibernate Search 6. This property was
      not documented in Hibernate Search 5.
  migration_complexity: trivial
- rule_id: hibernate-search-00290
  description: Property hibernate.search.*.indexmanager not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.indexmanager not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getIndexManagerHolder()\n            .getIndexManager(\"booksIndex\"\
      )\n            .setIndexProperty(\"hibernate.search.booksIndex.indexmanager\"\
      , \"elasticsearch\");\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.massIndexer()\n\
      \            .start();\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.type` (for global\
      \ defaults).\n No equivalent for the per-index configuration. See link for more\
      \ information."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00300
  description: Property hibernate.search.*.indexwriter not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.indexwriter not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchConfiguration {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\
      \n    public void configureSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getDefaultIndexingStrategy()\n            .getIndexManagerHolder()\n\
      \            .getIndexManager(\"exampleIndex\")\n            .setIndexWriterSetting(\"\
      ram_buffer_size\", 1024);\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\nimport org.hibernate.search.backend.elasticsearch.index.ElasticsearchIndexManager;\n\
      \n@ApplicationScoped\npublic class SearchConfiguration {\n\n    @PersistenceContext\n\
      \    EntityManager entityManager;\n\n    public void configureSearch() {\n \
      \       SearchSession searchSession = Search.session(entityManager);\n     \
      \   ElasticsearchIndexManager indexManager = searchSession.searchMapping()\n\
      \            .indexManager(\"exampleIndex\")\n            .unwrap(ElasticsearchIndexManager.class);\n\
      \n        indexManager.schemaManager()\n            .getSchemaContributor()\n\
      \            .contribute(ElasticsearchIndexManager.SchemaContributionPhase.INDEX_CREATION,\
      \ (context, partialMapping) -> {\n                partialMapping.addProperty(\"\
      indexing.io.writer.ram_buffer_size\", 1024);\n            });\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.io.writer` or\
      \ `hibernate.search.backend.io.merge` (for global defaults)\n or `hibernate.search.backend.indexes.<index-name>.io.writer`\
      \ or `hibernate.search.backend.indexes.<index-name>.io.merge` (per-index)."
  migration_complexity: low
- rule_id: hibernate-search-00310
  description: Property hibernate.search.*.locking_strategy not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.locking_strategy not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic\
      \ class SearchConfigurationService {\n\n    @PersistenceContext\n    private\
      \ EntityManager entityManager;\n\n    public void configureSearch() {\n    \
      \    java.util.Properties properties = new java.util.Properties();\n       \
      \ // The following line violates the migration rule hibernate-search-00310\n\
      \        properties.put(\"hibernate.search.default.locking_strategy\", \"simple\"\
      );\n        entityManager.getEntityManagerFactory().unwrap(org.hibernate.SessionFactory.class)\n\
      \                     .withOptions()\n                     .applySettings(properties)\n\
      \                     .build();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic\
      \ class SearchConfigurationService {\n\n    @PersistenceContext\n    private\
      \ EntityManager entityManager;\n\n    public void configureSearch() {\n    \
      \    java.util.Properties properties = new java.util.Properties();\n       \
      \ // Updated property name according to migration guidance\n        properties.put(\"\
      hibernate.search.backend.directory.locking.strategy\", \"simple\");\n      \
      \  entityManager.getEntityManagerFactory().unwrap(org.hibernate.SessionFactory.class)\n\
      \                     .withOptions()\n                     .applySettings(properties)\n\
      \                     .build();\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.directory.locking.strategy`\
      \ (for global defaults)\n or `hibernate.search.backend.indexes.<index-name>.directory.locking.strategy`\
      \ (per-index)."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00320
  description: Property hibernate.search.*.max_queue_length not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.max_queue_length not available anymore
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.default.max_queue_length\"\
      , \"1000\");\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.workspace()\n\
      \            .schemaManager()\n            .setSchemaManagementSettings(\n \
      \               new org.hibernate.search.engine.cfg.spi.ConfigurationPropertySource()\
      \ {\n                    @Override\n                    public <T> Optional<T>\
      \ get(String key, Class<T> aClass) {\n                        if (key.equals(\"\
      hibernate.search.backend.indexing.queue_size\")) {\n                       \
      \     return Optional.of(aClass.cast(\"1000\"));\n                        }\n\
      \                        return Optional.empty();\n                    }\n \
      \               }\n            );\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. Substitute with\
      \ the Hibernate Search 6 equivalent: `hibernate.search.backend.indexing.queue_size`\
      \ (for global defaults)\n or `hibernate.search.backend.indexes.<index-name>.indexing.queue_size`\
      \ (per-index)."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for T\npublic class T {\n    private Long id;\n    private String\
      \ name;\n\n    public T() {}\n\n    public Long getId() { return id; }\n   \
      \ public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00330
  description: Property hibernate.search.default_null_token not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.default_null_token not available anymore
    code_snippet: "import org.hibernate.search.jpa.FullTextEntityManager;\nimport\
      \ org.hibernate.search.jpa.Search;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\npublic class SearchConfiguration\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void configureSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory().getConfiguration().setProperty(\"\
      hibernate.search.default_null_token\", \"NULL_VALUE\");\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic\
      \ class SearchConfiguration {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void configureSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        // Configuration for\
      \ indexNullAs is now handled at the field mapping level, not globally\n    }\n\
      }"
    '# konveyor_guidance': No equivalent in Hibernate Search 6. In most cases, you
      won’t need to use indexNullAs anymore. Where indexNullAs is still needed, define
      the token explicitly for each index field. See links for more info.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00340
  description: Property hibernate.search.*.reader not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.reader not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        EntityManagerFactory emf = configureHibernateSearch();\n\
      \        EntityManager em = emf.createEntityManager();\n        // Perform operations\n\
      \        em.close();\n        emf.close();\n    }\n\n    private static EntityManagerFactory\
      \ configureHibernateSearch() {\n        Properties props = new Properties();\n\
      \        props.put(\"hibernate.search.default.reader.strategy\", \"shared\"\
      );\n        \n        return Persistence.createEntityManagerFactory(\"myPersistenceUnit\"\
      , props);\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        EntityManagerFactory emf = configureHibernateSearch();\n\
      \        EntityManager em = emf.createEntityManager();\n        // Perform operations\n\
      \        em.close();\n        emf.close();\n    }\n\n    private static EntityManagerFactory\
      \ configureHibernateSearch() {\n        Properties props = new Properties();\n\
      \        props.put(\"hibernate.search.backend.io.refresh_interval\", \"1000\"\
      ); // 1000 milliseconds\n        \n        return Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", props);\n    }\n}"
    '# konveyor_guidance': "No direct equivalent in Hibernate Search 6. To enable\
      \ async reader refresh, set hibernate.search.backend.io.refresh_interval or\
      \ hibernate.search.backend.indexes.<index-name>.io.refresh_interval\n to a strictly\
      \ positive value (in milliseconds). See links for more information. Custom reader\
      \ strategies are no longer supported."
  migration_complexity: trivial
- rule_id: hibernate-search-00350
  description: Property hibernate.search.*.retry_marker_lookup not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.retry_marker_lookup not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfig {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        properties.put(\"\
      hibernate.search.default.retry_marker_lookup\", \"true\");\n        \n     \
      \   EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\"\
      , properties);\n        EntityManager em = emf.createEntityManager();\n    \
      \    \n        try {\n            // Business logic that uses EntityManager\n\
      \        } finally {\n            em.close();\n            emf.close();\n  \
      \      }\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfig {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        // Removed the\
      \ unsupported property setting\n        \n        EntityManagerFactory emf =\
      \ Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        EntityManager em = emf.createEntityManager();\n        \n        try\
      \ {\n            // Business logic that uses EntityManager\n        } finally\
      \ {\n            em.close();\n            emf.close();\n        }\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. The filesystem-slave
      directory provider is no longer supported. See links for more information.
  migration_complexity: trivial
- rule_id: hibernate-search-00360
  description: Property hibernate.search.*.sharding_strategy not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.sharding_strategy not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import org.hibernate.search.jpa.FullTextEntityManager;\nimport org.hibernate.search.jpa.Search;\n\
      \nimport javax.ejb.Stateless;\n\n@Stateless\npublic class BookSearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.SearchFactory.class)\n    \
      \        .getConfiguration()\n            .setProperty(\"hibernate.search.default.sharding_strategy\"\
      , \"id\");\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import javax.transaction.Transactional;\n\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class BookSearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    @Transactional\n    public void initializeSearch() {\n\
      \        SearchSession searchSession = Search.session(entityManager);\n    \
      \    // Sharding configuration must be set up through the mapping, not at runtime.\n\
      \        // Assuming the sharding strategy is set through application configuration\
      \ or at bootstrap.\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. Sharding is configured
      differently. See links for more information.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: medium
- rule_id: hibernate-search-00370
  description: Property hibernate.search.*.similarity not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.similarity not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic\
      \ class SearchConfiguration {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void configureSearch() {\n        java.util.Properties\
      \ props = new java.util.Properties();\n        props.put(\"hibernate.search.default.similarity\"\
      , \"org.apache.lucene.search.similarities.ClassicSimilarity\");\n        entityManager.getEntityManagerFactory().unwrap(org.hibernate.SessionFactory.class).unwrap(org.hibernate.search.mapper.orm.SearchMappingConfigurer.class).configure(props);\n\
      \    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport org.hibernate.search.mapper.orm.cfg.HibernateOrmMapperSettings;\n\
      import org.hibernate.search.mapper.orm.mapping.HibernateOrmSearchMappingConfigurer;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\nimport org.hibernate.search.engine.backend.analysis.AnalyzerNames;\n\
      \n@ApplicationScoped\npublic class SearchConfiguration {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void configureSearch()\
      \ {\n        entityManager.getEntityManagerFactory().unwrap(org.hibernate.SessionFactory.class)\n\
      \            .unwrap(HibernateOrmSearchMappingConfigurer.class)\n          \
      \  .configure(searchMapping -> {\n                searchMapping.analyzer(AnalyzerNames.DEFAULT)\n\
      \                    .custom()\n                    .tokenizer(\"standard\"\
      )\n                    .tokenFilters(\"lowercase\", \"stop\");\n           \
      \ });\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. The similarity
      is configured through the analysis configurer. See links for more information.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00380
  description: Property hibernate.search.*.worker.backend not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.worker.backend not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@Stateless\npublic class SearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getWorker()\n            .getWorkerBuildContext()\n          \
      \  .getUninitializedSearchFactory()\n            .getConfigurationProperties()\n\
      \            .setProperty(\"hibernate.search.default.worker.backend\", \"jms\"\
      );\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      \n@ApplicationScoped\npublic class SearchService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void initializeSearch()\
      \ {\n        SearchSession searchSession = Search.session(entityManager);\n\
      \        // Since JMS/JGroups backends are no longer supported, this specific\
      \ configuration setup is removed.\n        // The following line is intentionally\
      \ left as a placeholder for where backend-specific configuration would have\
      \ been.\n        // Consider using alternative methods or updating to supported\
      \ backend configurations.\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. The JMS/JGroups
      backends are no longer supported. See links for more information.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: medium
- rule_id: hibernate-search-00390
  description: Property hibernate.search.*.worker.execution not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.worker.execution not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfig {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.default.worker.execution\", \"async\");\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        EntityManager em = emf.createEntityManager();\n\n        try {\n  \
      \          em.getTransaction().begin();\n            // Business logic here\n\
      \            em.getTransaction().commit();\n        } catch (Exception e) {\n\
      \            if (em.getTransaction().isActive()) {\n                em.getTransaction().rollback();\n\
      \            }\n        } finally {\n            em.close();\n            emf.close();\n\
      \        }\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfig {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.automatic_indexing.synchronization.strategy\", \"async\");\n\
      \n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n        EntityManager em = emf.createEntityManager();\n\
      \n        try {\n            em.getTransaction().begin();\n            // Business\
      \ logic here\n            em.getTransaction().commit();\n        } catch (Exception\
      \ e) {\n            if (em.getTransaction().isActive()) {\n                em.getTransaction().rollback();\n\
      \            }\n        } finally {\n            em.close();\n            emf.close();\n\
      \        }\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. Setting hibernate.search.automatic_indexing.synchronization.strategy
      to async or sync will produce results similar to setting hibernate.search.<index-name>.worker.execution
      to the same value. See links for more information.
    test_code: "// Stub for Exception\npublic class Exception {\n    private Long\
      \ id;\n    private String name;\n\n    public Exception() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: trivial
- rule_id: hibernate-search-00400
  description: Property hibernate.search.*.worker not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.*.worker not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@Stateless\npublic class SearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .getWorker()\n            .initialize(PropertiesBuilder.fromProperties()\n\
      \                .setProperty(\"hibernate.search.default.worker.backend\", \"\
      jms\")\n                .setProperty(\"hibernate.search.default.worker.jms.connection_factory_jndi_name\"\
      , \"java:/JmsXA\")\n                .build());\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      \n@ApplicationScoped\npublic class SearchService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void initializeSearch()\
      \ {\n        SearchSession searchSession = Search.session(entityManager);\n\
      \        searchSession.massIndexer()\n            .start();\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. The JMS/JGroups
      backends are no longer supported. See links for more information.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00410
  description: Property hibernate.search.elasticsearch.analysis_definition_provider
    not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.elasticsearch.analysis_definition_provider
      not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n\n        em.getProperties().put(\"\
      hibernate.search.elasticsearch.analysis_definition_provider\", \"com.example.MyAnalysisProvider\"\
      );\n\n        // Additional logic to use EntityManager\n        em.close();\n\
      \        emf.close();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n\n        em.getProperties().put(\"\
      hibernate.search.backend.analysis.configurer\", \"com.example.MyAnalysisConfigurer\"\
      );\n\n        // Additional logic to use EntityManager\n        em.close();\n\
      \        emf.close();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.analysis.configurer`.'
  migration_complexity: trivial
- rule_id: hibernate-search-00420
  description: Property hibernate.search.elasticsearch.log.json_pretty_printing not
    available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.elasticsearch.log.json_pretty_printing not
      available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport java.util.Properties;\n\n@Stateless\npublic\
      \ class SearchConfigurationService {\n\n    @PersistenceContext\n    private\
      \ EntityManager entityManager;\n\n    public void configureSearch() {\n    \
      \    Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.elasticsearch.log.json_pretty_printing\", \"true\");\n    \
      \    entityManager.getEntityManagerFactory().getProperties().putAll(properties);\n\
      \    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport java.util.Properties;\nimport java.util.Map;\n\
      \n@Stateless\npublic class SearchConfigurationService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void configureSearch()\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.backend.log.json_pretty_printing\", \"true\");\n        Map<String,\
      \ Object> map = (Map<String, Object>) (Map<?, ?>) properties;\n        entityManager.getEntityManagerFactory().getProperties().putAll(map);\n\
      \    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.log.json_pretty_printing`.'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00430
  description: Property hibernate.search.elasticsearch.scroll_backtracking_window_size
    not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.elasticsearch.scroll_backtracking_window_size
      not available anymore
    code_snippet: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      \npublic class ElasticsearchConfiguration {\n\n    @PersistenceContext\n   \
      \ private EntityManager entityManager;\n\n    public void configureElasticsearch()\
      \ {\n        SearchSession searchSession = Search.session(entityManager);\n\
      \        searchSession.workspace().configuration()\n            .setProperty(\"\
      hibernate.search.elasticsearch.scroll_backtracking_window_size\", \"20\");\n\
      \    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      \npublic class ElasticsearchConfiguration {\n\n    @PersistenceContext\n   \
      \ private EntityManager entityManager;\n\n    public void configureElasticsearch()\
      \ {\n        SearchSession searchSession = Search.session(entityManager);\n\
      \        // Removed the configuration line that sets the scroll_backtracking_window_size\n\
      \        // as it is no longer supported and scrolling is forward-only.\n  \
      \  }\n}"
    '# konveyor_guidance': 'This property is not available anymore: scrolling is forward-only.
      See links for more information.'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00440
  description: Property hibernate.search.elasticsearch.scroll_fetch_size not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.elasticsearch.scroll_fetch_size not available
      anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.elasticsearch.scroll_fetch_size\", \"50\");\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        EntityManager em = emf.createEntityManager();\n        \n        try\
      \ {\n            // Business logic that would use the EntityManager\n      \
      \  } finally {\n            em.close();\n            emf.close();\n        }\n\
      \    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport\
      \ java.util.Properties;\n\npublic class HibernateSearchConfiguration {\n\n \
      \   public static void main(String[] args) {\n        Properties properties\
      \ = new Properties();\n\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n        EntityManager em = emf.createEntityManager();\n\
      \        \n        try {\n            Query query = em.createQuery(\"SELECT\
      \ e FROM MyEntity e\");\n            query.setHint(\"jakarta.persistence.fetch.size\"\
      , 50);\n            query.getResultList();\n            // Business logic that\
      \ would use the EntityManager\n        } finally {\n            em.close();\n\
      \            emf.close();\n        }\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. When using Hibernate
      Search APIs, the "chunk size" is an argument to the scroll method. When using
      the Hibernate ORM or JPA adapters, the "chunk size" is set to the same value
      as the fetch size. See links for more information.
  migration_complexity: trivial
- rule_id: hibernate-search-00450
  description: Property hibernate.search.elasticsearch.scroll_timeout not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.elasticsearch.scroll_timeout not available
      anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \                .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \                .getDefaultIndexingProperties()\n                .setProperty(\"\
      hibernate.search.elasticsearch.scroll_timeout\", \"60000\"); // Violating line\n\
      \    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void initializeSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        searchSession.massIndexer()\n\
      \            .toJobParameters()\n            .setProperty(\"hibernate.search.backend.scroll_timeout\"\
      , \"60000\");\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.scroll_timeout`.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00460
  description: Property hibernate.search.enable_dirty_check not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.enable_dirty_check not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport org.hibernate.Session;\n\
      import org.hibernate.search.jpa.FullTextEntityManager;\nimport org.hibernate.search.jpa.Search;\n\
      \n@ApplicationScoped\npublic class SearchService {\n\n    @PersistenceContext\n\
      \    EntityManager entityManager;\n\n    public void initializeSearch() {\n\
      \        FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager(entityManager);\n\
      \        Session session = fullTextEntityManager.unwrap(Session.class);\n  \
      \      session.getSessionFactory().getProperties().put(\"hibernate.search.enable_dirty_check\"\
      , true);\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport org.hibernate.Session;\n\
      import org.hibernate.search.jpa.FullTextEntityManager;\nimport org.hibernate.search.jpa.Search;\n\
      \n@ApplicationScoped\npublic class SearchService {\n\n    @PersistenceContext\n\
      \    EntityManager entityManager;\n\n    public void initializeSearch() {\n\
      \        FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager(entityManager);\n\
      \        Session session = fullTextEntityManager.unwrap(Session.class);\n  \
      \      session.getSessionFactory().getProperties().put(\"hibernate.search.automatic_indexing.enable_dirty_check\"\
      , true);\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.automatic_indexing.enable_dirty_check`.'
  migration_complexity: low
- rule_id: hibernate-search-00470
  description: Property hibernate.search.error_handler not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.error_handler not available anymore
    code_snippet: "import org.hibernate.cfg.Configuration;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public EntityManagerFactory configureHibernateSearch() {\n      \
      \  Configuration cfg = new Configuration();\n        cfg.setProperty(\"hibernate.search.default.directory_provider\"\
      , \"filesystem\");\n        cfg.setProperty(\"hibernate.search.default.indexBase\"\
      , \"/var/lucene/indexes\");\n        cfg.setProperty(\"hibernate.search.error_handler\"\
      , \"log\"); // This line violates the rule\n\n        return Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", cfg.getProperties());\n    }\n}"
    expected_fix: "import org.hibernate.cfg.Configuration;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public EntityManagerFactory configureHibernateSearch() {\n      \
      \  Configuration cfg = new Configuration();\n        cfg.setProperty(\"hibernate.search.default.directory_provider\"\
      , \"filesystem\");\n        cfg.setProperty(\"hibernate.search.default.indexBase\"\
      , \"/var/lucene/indexes\");\n        cfg.setProperty(\"hibernate.search.background_failure_handler\"\
      , \"log\"); // Fixed according to migration guidance\n\n        return Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", cfg.getProperties());\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.background_failure_handler`.
      A different interface should be implemented: see links for more information.'
    test_code: "// Stub for EntityManagerFactory\npublic class EntityManagerFactory\
      \ {\n    private Long id;\n    private String name;\n\n    public EntityManagerFactory()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: trivial
- rule_id: hibernate-search-00480
  description: Property hibernate.search.filter.cache_docidresults.size not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.filter.cache_docidresults.size not available
      anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\npublic class LegacySearchConfiguration\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        FullTextEntityManager\
      \ fullTextEntityManager = Search.getFullTextEntityManager(em);\n\n        //\
      \ Setting the deprecated property\n        fullTextEntityManager.getSearchFactory().getStatistics()\n\
      \                .setStatisticsEnabled(true);\n        fullTextEntityManager.getSearchFactory().getConfigurationProperties()\n\
      \                .setProperty(\"hibernate.search.filter.cache_docidresults.size\"\
      , \"1000\");\n\n        // Business logic here\n\n        em.close();\n    \
      \    emf.close();\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\n\
      import jakarta.persistence.Persistence;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\npublic class\
      \ LegacySearchConfiguration {\n\n    public static void main(String[] args)\
      \ {\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\");\n        EntityManager em = emf.createEntityManager();\n\
      \        SearchSession searchSession = Search.session(em);\n\n        // Note:\
      \ Statistics API not available in Hibernate Search 6+\n        // Consider upgrading\
      \ to Hibernate Search 6.1+ for configurable low-level hit caching\n\n      \
      \  // Business logic here\n\n        em.close();\n        emf.close();\n   \
      \ }\n}"
    '# konveyor_guidance': This property is not available anymore. There's no equivalent
      for Hibernate Search 6. If you need caching for some of your Lucene queries,
      consider upgrading directly to Hibernate Search 6.1, which provides configurable
      Low-level hit caching. See link for more information.
  migration_complexity: trivial
- rule_id: hibernate-search-00490
  description: Property hibernate.search.filter.cache_strategy not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.filter.cache_strategy not available anymore
    code_snippet: "import org.hibernate.search.jpa.FullTextEntityManager;\nimport\
      \ org.hibernate.search.jpa.Search;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\npublic class SearchConfiguration\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void configureSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \                             .getConfiguration()\n                        \
      \     .setProperty(\"hibernate.search.filter.cache_strategy\", \"shared\");\n\
      \    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic\
      \ class SearchConfiguration {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void configureSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        // Hibernate Search\
      \ 6.1+ approach for low-level hit caching\n        // Note: Actual caching configurations\
      \ should be defined as per the application's requirements\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. There's no equivalent
      for Hibernate Search 6. If you need caching for some of your Lucene queries,
      consider upgrading directly to Hibernate Search 6.1, which provides configurable
      Low-level hit caching. See link for more information.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00500
  description: Property hibernate.search.generate_statistics not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.generate_statistics not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfig\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n\n        em.getProperties().put(\"\
      hibernate.search.generate_statistics\", \"true\");\n\n        // Business logic\
      \ here\n\n        em.close();\n        emf.close();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfig\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n\n        // Removed the\
      \ property hibernate.search.generate_statistics as it is not available in Hibernate\
      \ Search 6\n\n        // Business logic here\n\n        em.close();\n      \
      \  emf.close();\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. There's no equivalent
      for Hibernate Search 6. No equivalent in Hibernate Search 6. See links for more
      information.
  migration_complexity: trivial
- rule_id: hibernate-search-00510
  description: Property hibernate.search.index_uninverting_allowed not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.index_uninverting_allowed not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        Properties properties = new Properties();\n        properties.put(\"\
      hibernate.search.default.directory_provider\", \"filesystem\");\n        properties.put(\"\
      hibernate.search.default.indexBase\", \"/var/lucene/indexes\");\n        properties.put(\"\
      hibernate.search.index_uninverting_allowed\", \"true\"); // Violation here\n\
      \n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      MyPersistenceUnit\", properties);\n        EntityManager em = emf.createEntityManager();\n\
      \n        // Business logic using EntityManager\n        em.close();\n     \
      \   emf.close();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        Properties properties = new Properties();\n        properties.put(\"\
      hibernate.search.default.directory_provider\", \"filesystem\");\n        properties.put(\"\
      hibernate.search.default.indexBase\", \"/var/lucene/indexes\");\n        //\
      \ Removed the property hibernate.search.index_uninverting_allowed\n\n      \
      \  EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"MyPersistenceUnit\"\
      , properties);\n        EntityManager em = emf.createEntityManager();\n\n  \
      \      // Business logic using EntityManager\n        em.close();\n        emf.close();\n\
      \    }\n}"
    '# konveyor_guidance': Index uninverting was deprecated in Hibernate Search 5
      due to poor performance and is no longer allowed. All index fields that you
      want to sort on must be marked as sortable. See links for more information.
  migration_complexity: trivial
- rule_id: hibernate-search-00520
  description: Property hibernate.search.indexing_strategy not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.indexing_strategy not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfig\
      \ {\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        em.setProperty(\"\
      hibernate.search.indexing_strategy\", \"manual\");\n        // Additional code\
      \ to demonstrate usage\n        em.getTransaction().begin();\n        // Perform\
      \ operations\n        em.getTransaction().commit();\n        em.close();\n \
      \       emf.close();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class HibernateSearchConfig\
      \ {\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        em.setProperty(\"\
      hibernate.search.automatic_indexing.strategy\", \"none\");\n        // Additional\
      \ code to demonstrate usage\n        em.getTransaction().begin();\n        //\
      \ Perform operations\n        em.getTransaction().commit();\n        em.close();\n\
      \        emf.close();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.automatic_indexing.strategy`.
      Set to `none` to get the equivalent of `hibernate.search.indexing_strategy =
      manual` in Hibernate Search 5.'
  migration_complexity: trivial
- rule_id: hibernate-search-00530
  description: Property hibernate.search.jmx_bean_suffix not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.jmx_bean_suffix not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class JMXConfigurationExample\
      \ {\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"MyPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        \n        em.getProperties().put(\"\
      hibernate.search.jmx_bean_suffix\", \"MyAppJMXSuffix\");\n        \n       \
      \ // Business logic here\n        \n        em.close();\n        emf.close();\n\
      \    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class JMXConfigurationExample\
      \ {\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"MyPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        \n        // Removed\
      \ the JMX configuration line as it is no longer supported\n        \n      \
      \  // Business logic here\n        \n        em.close();\n        emf.close();\n\
      \    }\n}"
    '# konveyor_guidance': This property is not available anymore. See links for more
      information.
  migration_complexity: trivial
- rule_id: hibernate-search-00540
  description: Property hibernate.search.jmx_enabled not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.jmx_enabled not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class JMXEnabledConfiguration {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.search.jmx_enabled\", \"true\");\n\n        EntityManagerFactory emf\
      \ = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        EntityManager em = emf.createEntityManager();\n\n        // Perform\
      \ operations with EntityManager\n        em.close();\n        emf.close();\n\
      \    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class JMXEnabledConfiguration {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        // The property\
      \ \"hibernate.search.jmx_enabled\" is removed as it is no longer available.\n\
      \n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n        EntityManager em = emf.createEntityManager();\n\
      \n        // Perform operations with EntityManager\n        em.close();\n  \
      \      emf.close();\n    }\n}"
    '# konveyor_guidance': This property is not available anymore. See links for more
      information.
  migration_complexity: trivial
- rule_id: hibernate-search-00550
  description: Property hibernate.search.error_handler not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.error_handler not available anymore
    code_snippet: "import org.hibernate.cfg.Configuration;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public void configureHibernateSearch() {\n        Configuration cfg\
      \ = new Configuration();\n        cfg.setProperty(\"hibernate.search.default.directory_provider\"\
      , \"filesystem\");\n        cfg.setProperty(\"hibernate.search.default.indexBase\"\
      , \"/var/lucene/indexes\");\n        cfg.setProperty(\"hibernate.search.error_handler\"\
      , \"log\");\n    }\n}"
    expected_fix: "import org.hibernate.cfg.Configuration;\nimport org.hibernate.search.backend.analysis.AnalysisConfigurer;\n\
      import org.hibernate.search.engine.backend.analysis.AnalyzerNames;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public void configureHibernateSearch()\
      \ {\n        Configuration cfg = new Configuration();\n        cfg.setProperty(\"\
      hibernate.search.default.directory_provider\", \"filesystem\");\n        cfg.setProperty(\"\
      hibernate.search.default.indexBase\", \"/var/lucene/indexes\");\n        cfg.setProperty(\"\
      hibernate.search.backend.analysis.configurer\", MyAnalysisConfigurer.class.getName());\n\
      \    }\n\n    public static class MyAnalysisConfigurer implements AnalysisConfigurer\
      \ {\n        @Override\n        public void configure(AnalysisConfigurationContext\
      \ context) {\n            context.analyzer(AnalyzerNames.DEFAULT).custom()\n\
      \                .tokenizer(\"standard\")\n                .tokenFilter(\"lowercase\"\
      );\n        }\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.analysis.configurer`.
      A different interface should be implemented: see links for more information.'
    test_code: "// Stub for AnalysisConfigurationContext\npublic class AnalysisConfigurationContext\
      \ {\n    private Long id;\n    private String name;\n\n    public AnalysisConfigurationContext()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00560
  description: Property hibernate.search.lucene_version not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.lucene_version not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport java.util.Properties;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\n@Stateless\npublic class LegacySearchConfig\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void configureSearch() {\n        Properties properties = new Properties();\n\
      \        properties.put(\"hibernate.search.lucene_version\", \"LUCENE_CURRENT\"\
      );\n        \n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.ejb.Stateless;\nimport java.util.Properties;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\n@Stateless\npublic class LegacySearchConfig\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void configureSearch() {\n        Properties properties = new Properties();\n\
      \        properties.put(\"hibernate.search.backend.lucene_version\", \"LUCENE_CURRENT\"\
      );\n        \n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.backend.lucene_version`.'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00570
  description: Property hibernate.search.model_mapping not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.model_mapping not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ SearchConfiguration {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\
      \n    public void initializeSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.getSearchFactory()\n\
      \            .unwrap(org.hibernate.search.engine.spi.SearchFactoryImplementor.class)\n\
      \            .addProperty(\"hibernate.search.model_mapping\", \"com.example.MyCustomModelMapping\"\
      );\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.enterprise.context.ApplicationScoped;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\nimport org.hibernate.search.mapper.orm.cfg.HibernateOrmMapperSettings;\n\
      import org.hibernate.search.mapper.orm.mapping.HibernateOrmMappingConfigurer;\n\
      \n@ApplicationScoped\npublic class SearchConfiguration {\n\n    @PersistenceContext\n\
      \    EntityManager entityManager;\n\n    public void initializeSearch() {\n\
      \        SearchSession searchSession = Search.session(entityManager);\n    \
      \    searchSession.mapping().configure((mapper, context) -> {\n            if\
      \ (mapper instanceof HibernateOrmMappingConfigurer) {\n                ((HibernateOrmMappingConfigurer)\
      \ mapper).configure(context);\n                context.configurationProperty(HibernateOrmMapperSettings.MAPPING_CONFIGURER,\
      \ \"com.example.MyCustomModelMapping\");\n            }\n        });\n    }\n\
      }"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.mapping.configurer`. A
      different interface should be implemented: see links for more information.'
  migration_complexity: low
- rule_id: hibernate-search-00580
  description: Property hibernate.search.query.database_retrieval_method not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.query.database_retrieval_method not available
      anymore
    code_snippet: "import org.hibernate.search.jpa.FullTextEntityManager;\nimport\
      \ org.hibernate.search.jpa.Search;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.Persistence;\n\npublic class SearchConfiguration {\n\
      \n    public void configureSearch() {\n        EntityManager em = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\").createEntityManager();\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(em);\n\n        fullTextEntityManager.getSearchFactory()\n\
      \            .getConfiguration()\n            .setProperty(\"hibernate.search.query.database_retrieval_method\"\
      , \"find_by_id\");\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.Persistence;\n\
      \npublic class SearchConfiguration {\n\n    public void configureSearch() {\n\
      \        EntityManager em = Persistence.createEntityManagerFactory(\"myPersistenceUnit\"\
      ).createEntityManager();\n        SearchSession searchSession = Search.session(em);\n\
      \n        // The property setting for database retrieval method is removed as\
      \ per migration guidance\n        // Entities are always loaded with a query\
      \ in Hibernate Search 6\n    }\n}"
    '# konveyor_guidance': 'This property is no available anymore. No equivalent in
      Hibernate Search 6: entities are always loaded with a query.'
  migration_complexity: trivial
- rule_id: hibernate-search-00590
  description: Property hibernate.search.query.object_lookup_method not available
    anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.query.object_lookup_method not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        Properties properties = new Properties();\n        properties.put(\"\
      hibernate.search.query.object_lookup_method\", \"skip\");\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        EntityManager em = emf.createEntityManager();\n        \n        //\
      \ Example usage of EntityManager\n        em.getTransaction().begin();\n   \
      \     // Perform some operations\n        em.getTransaction().commit();\n  \
      \      em.close();\n        emf.close();\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        Properties properties = new Properties();\n        properties.put(\"\
      hibernate.search.query.loading.cache_lookup.strategy\", \"skip\");\n\n     \
      \   EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\"\
      , properties);\n        EntityManager em = emf.createEntityManager();\n    \
      \    \n        // Example usage of EntityManager\n        em.getTransaction().begin();\n\
      \        // Perform some operations\n        em.getTransaction().commit();\n\
      \        em.close();\n        emf.close();\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. Substitute with
      the Hibernate Search 6 equivalent: `hibernate.search.query.loading.cache_lookup.strategy`.'
  migration_complexity: trivial
- rule_id: hibernate-search-00600
  description: Property hibernate.search.similarity not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.similarity not available anymore
    code_snippet: "import org.hibernate.search.jpa.FullTextEntityManager;\nimport\
      \ org.hibernate.search.jpa.Search;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.Persistence;\n\npublic class SearchConfiguration {\n\
      \n    public void configureSearch() {\n        EntityManager em = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\").createEntityManager();\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(em);\n        \n        fullTextEntityManager.getSearchFactory()\n\
      \                             .getStatistics()\n                           \
      \  .getSearchFactory()\n                             .setProperty(\"hibernate.search.similarity\"\
      , \"org.apache.lucene.search.similarities.ClassicSimilarity\");\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      \nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.Persistence;\n\
      \npublic class SearchConfiguration {\n\n    public void configureSearch() {\n\
      \        EntityManager em = Persistence.createEntityManagerFactory(\"myPersistenceUnit\"\
      ).createEntityManager();\n        SearchSession searchSession = Search.session(em);\n\
      \n        // The following configuration setup is a placeholder as the original\
      \ approach to set properties is not directly supported.\n        // Adjust according\
      \ to the actual requirements and capabilities of Hibernate Search 6.\n     \
      \   // This example does not directly correspond to setting a similarity as\
      \ in the original code since that concept has changed in newer versions of Hibernate\
      \ Search.\n    }\n}"
    '# konveyor_guidance': 'This property is not available anymore. There is no direct
      equivalent in Hibernate Search 6: the similarity is configured through the analysis
      configurer. The default similarity changed when this property is not configured:
      see links for more information.'
  migration_complexity: trivial
- rule_id: hibernate-search-00610
  description: Property hibernate.search.worker.* not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.search.worker.* not available anymore
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        EntityManagerFactory emf = configureHibernateSearch();\n\
      \        EntityManager em = emf.createEntityManager();\n        // Additional\
      \ code to use EntityManager\n    }\n\n    private static EntityManagerFactory\
      \ configureHibernateSearch() {\n        Properties properties = new Properties();\n\
      \        properties.put(\"hibernate.search.worker.execution\", \"async\");\n\
      \        properties.put(\"hibernate.search.worker.thread_pool.size\", \"5\"\
      );\n        properties.put(\"hibernate.search.worker.buffer_queue.max\", \"\
      1000\");\n\n        return Persistence.createEntityManagerFactory(\"myPersistenceUnit\"\
      , properties);\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateSearchConfiguration {\n\n    public static void main(String[]\
      \ args) {\n        EntityManagerFactory emf = configureHibernateSearch();\n\
      \        EntityManager em = emf.createEntityManager();\n        // Additional\
      \ code to use EntityManager\n    }\n\n    private static EntityManagerFactory\
      \ configureHibernateSearch() {\n        Properties properties = new Properties();\n\
      \        // Removed deprecated properties related to \"worker\" as per migration\
      \ guidance\n        return Persistence.createEntityManagerFactory(\"myPersistenceUnit\"\
      , properties);\n    }\n}"
    '# konveyor_guidance': "This property is not available anymore. No equivalent\
      \ to the concept of \"worker\" in Hibernate Search 6:\n automatic indexing is\
      \ always performed on transaction commit or, when there is no transaction, on\
      \ session flush.\n Also, transactional backends, for example the JMS backend,\
      \ are no longer supported. See links for more information."
  migration_complexity: trivial
- rule_id: hibernate-search-00620
  description: Annotation @Analyzer not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @Analyzer not available anymore
    code_snippet: "import org.hibernate.search.annotations.Analyzer;\nimport org.hibernate.search.annotations.Field;\n\
      import org.hibernate.search.annotations.Indexed;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\n@Analyzer(impl = StandardAnalyzer.class)\npublic class Book {\n\n\
      \    @Id\n    private Long id;\n\n    @Field\n    @Analyzer(impl = StandardAnalyzer.class)\n\
      \    private String title;\n\n    @Field\n    private String author;\n\n   \
      \ // Getters and setters\n    public Long getId() {\n        return id;\n  \
      \  }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n \
      \   public String getTitle() {\n        return title;\n    }\n\n    public void\
      \ setTitle(String title) {\n        this.title = title;\n    }\n\n    public\
      \ String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String\
      \ author) {\n        this.author = author;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Book {\n\n    @Id\n    private Long id;\n\n    @FullTextField(analyzer\
      \ = \"standard-analyzer\")\n    private String title;\n\n    @FullTextField\n\
      \    private String author;\n\n    // Getters and setters\n    public Long getId()\
      \ {\n        return id;\n    }\n\n    public void setId(Long id) {\n       \
      \ this.id = id;\n    }\n\n    public String getTitle() {\n        return title;\n\
      \    }\n\n    public void setTitle(String title) {\n        this.title = title;\n\
      \    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n\
      \    public void setAuthor(String author) {\n        this.author = author;\n\
      \    }\n}"
    '# konveyor_guidance': "In Hibernate Search 5, it was possible to apply an @Analyzer\
      \ annotation to a class or property, so that the corresponding analyzer would\
      \ be used by default for any index field declared in this scope.\n There is\
      \ no equivalent to that feature in Hibernate Search 6: all fields must specify\
      \ their analyzer explicitly using @FullTextField(analyzer = \"myAnalyzer\"),\
      \ or rely on the (global) default analyzer.\n Also, still in Hibernate Search\
      \ 5, @Analyzer could point directly to a class extending org.apache.lucene.analysis.Analyzer,\
      \ for example with @Analyzer(impl = StandardAnalyzer.class).\n This is no longer\
      \ possible: analyzers are now always referenced by their name. However, you\
      \ can assign a name to a given analyzer instance using the Lucene analysis configurer."
  migration_complexity: low
- rule_id: hibernate-search-00630
  description: Annotation @AnalyzerDef(s) not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @AnalyzerDef(s) not available anymore
    code_snippet: "import org.hibernate.search.annotations.AnalyzerDef;\nimport org.hibernate.search.annotations.TokenizerDef;\n\
      import org.hibernate.search.annotations.TokenFilterDef;\nimport org.hibernate.search.annotations.Parameter;\n\
      \nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\n@Entity\n\
      @AnalyzerDef(name = \"customAnalyzer\",\n    tokenizer = @TokenizerDef(factory\
      \ = org.apache.lucene.analysis.standard.StandardTokenizerFactory.class),\n \
      \   filters = {\n        @TokenFilterDef(factory = org.apache.lucene.analysis.lowercase.LowerCaseFilterFactory.class),\n\
      \        @TokenFilterDef(factory = org.apache.lucene.analysis.en.EnglishPossessiveFilterFactory.class),\n\
      \        @TokenFilterDef(factory = org.apache.lucene.analysis.standard.StandardFilterFactory.class,\n\
      \                        params = {\n                            @Parameter(name\
      \ = \"maxTokenLength\", value = \"10\")\n                        })\n    }\n\
      )\npublic class Book {\n    @Id\n    private Long id;\n    private String title;\n\
      \    private String author;\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.search.engine.backend.analysis.AnalyzerNames;\nimport org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.programmatic.TypeMappingStep;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinderRef;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.programmatic.TypeBinder;\n\
      import org.hibernate.search.engine.backend.analysis.AnalyzerConfigurer;\nimport\
      \ org.hibernate.search.engine.backend.analysis.AnalyzerConfigurationContext;\n\
      \n@Entity\n@Indexed\npublic class Book {\n    @Id\n    private Long id;\n\n\
      \    @FullTextField(analyzer = \"customAnalyzer\")\n    private String title;\n\
      \n    private String author;\n\n    public static class CustomAnalyzerConfigurer\
      \ implements AnalyzerConfigurer {\n        @Override\n        public void configure(AnalyzerConfigurationContext\
      \ context) {\n            context.analyzer(\"customAnalyzer\").custom()\n  \
      \              .tokenizer(org.apache.lucene.analysis.standard.StandardTokenizerFactory.class)\n\
      \                .tokenFilter(org.apache.lucene.analysis.lowercase.LowerCaseFilterFactory.class)\n\
      \                .tokenFilter(org.apache.lucene.analysis.en.EnglishPossessiveFilterFactory.class)\n\
      \                .tokenFilter(org.apache.lucene.analysis.standard.StandardFilterFactory.class)\n\
      \                .param(\"maxTokenLength\", \"10\");\n        }\n    }\n}"
    '# konveyor_guidance': "Annotation-based analyzer definitions are no longer supported.\n\
      \ Instead, implement an analysis configurer: see links for Lucene and Elasticsearch\
      \ replacements."
    test_code: "import jakarta.persistence.*;\n\n// Stub for AnalyzerConfigurationContext\n\
      public class AnalyzerConfigurationContext {\n    private Long id;\n    private\
      \ String name;\n\n    public AnalyzerConfigurationContext() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00640
  description: Annotation @AnalyzerDiscriminator not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @AnalyzerDiscriminator not available anymore
    code_snippet: "import org.hibernate.search.annotations.AnalyzerDiscriminator;\n\
      import org.hibernate.search.annotations.DocumentId;\nimport org.hibernate.search.annotations.Field;\n\
      import org.hibernate.search.annotations.Indexed;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\npublic class Book {\n\n \
      \   @Id\n    @DocumentId\n    private Integer id;\n\n    @Field\n    @AnalyzerDiscriminator(impl\
      \ = LanguageDiscriminator.class)\n    private String title;\n\n    public Integer\
      \ getId() {\n        return id;\n    }\n\n    public void setId(Integer id)\
      \ {\n        this.id = id;\n    }\n\n    public String getTitle() {\n      \
      \  return title;\n    }\n\n    public void setTitle(String title) {\n      \
      \  this.title = title;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.DocumentId;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Book {\n\n    @Id\n    @DocumentId\n    private Integer\
      \ id;\n\n    @IndexedEmbedded\n    private BookContent content;\n\n    public\
      \ Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer\
      \ id) {\n        this.id = id;\n    }\n\n    public BookContent getContent()\
      \ {\n        return content;\n    }\n\n    public void setContent(BookContent\
      \ content) {\n        this.content = content;\n    }\n\n    @Entity\n    public\
      \ static class BookContent {\n\n        @GenericField\n        private String\
      \ titleEnglish;\n\n        @GenericField\n        private String titleSpanish;\n\
      \n        public String getTitleEnglish() {\n            return titleEnglish;\n\
      \        }\n\n        public void setTitleEnglish(String titleEnglish) {\n \
      \           this.titleEnglish = titleEnglish;\n        }\n\n        public String\
      \ getTitleSpanish() {\n            return titleSpanish;\n        }\n\n     \
      \   public void setTitleSpanish(String titleSpanish) {\n            this.titleSpanish\
      \ = titleSpanish;\n        }\n    }\n}"
    '# konveyor_guidance': "`@AnalyzerDiscriminator` has no direct equivalent in Hibernate\
      \ Search 6: the analyzer assigned to each field is static and cannot change\
      \ at runtime, because that results in unreliable matches and in scoring issues.\n\
      \ Instead, Hibernate Search 6 allows declaring multiple index fields for a single\
      \ property, and putting the content of that property in a different field depending\
      \ on a discriminator. Then, when searching, you can target all fields at once.\n\
      \ See link for more information."
    test_code: "import jakarta.persistence.*;\n\n// Stub for BookContent\npublic class\
      \ BookContent {\n    private Long id;\n    private String name;\n\n    public\
      \ BookContent() {}\n\n    public Long getId() { return id; }\n    public void\
      \ setId(Long id) { this.id = id; }\n    public String getName() { return name;\
      \ }\n    public void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00650
  description: Annotation @Boost not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @Boost not available anymore
    code_snippet: "import org.hibernate.search.annotations.Boost;\nimport org.hibernate.search.annotations.Field;\n\
      import org.hibernate.search.annotations.Indexed;\n\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\npublic class Book {\n\n \
      \   @Id\n    private Long id;\n\n    @Field\n    @Boost(2.0f) // This annotation\
      \ is no longer available in Hibernate Search 6\n    private String title;\n\n\
      \    @Field\n    private String author;\n\n    // Getters and setters\n    public\
      \ Long getId() {\n        return id;\n    }\n\n    public void setId(Long id)\
      \ {\n        this.id = id;\n    }\n\n    public String getTitle() {\n      \
      \  return title;\n    }\n\n    public void setTitle(String title) {\n      \
      \  this.title = title;\n    }\n\n    public String getAuthor() {\n        return\
      \ author;\n    }\n\n    public void setAuthor(String author) {\n        this.author\
      \ = author;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      \nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Book {\n\n    @Id\n    private Long id;\n\n    @FullTextField\n\
      \    private String title;\n\n    @KeywordField\n    private String author;\n\
      \n    // Getters and setters\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n\n    public\
      \ String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String\
      \ author) {\n        this.author = author;\n    }\n}"
    '# konveyor_guidance': "Index-time boosting was deprecated in Hibernate Search\
      \ 5. It is no longer available in Hibernate Search 6.\n Instead, rely on query-time\
      \ boosting. See link for more information."
  migration_complexity: low
- rule_id: hibernate-search-00660
  description: Annotation @CacheFromIndex not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @CacheFromIndex not available anymore
    code_snippet: "import org.hibernate.search.annotations.CacheFromIndex;\nimport\
      \ org.hibernate.search.annotations.Indexed;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\n@CacheFromIndex\npublic class\
      \ Book {\n    @Id\n    private Long id;\n    private String title;\n    private\
      \ String author;\n\n    public Book() {\n    }\n\n    public Long getId() {\n\
      \        return id;\n    }\n\n    public void setId(Long id) {\n        this.id\
      \ = id;\n    }\n\n    public String getTitle() {\n        return title;\n  \
      \  }\n\n    public void setTitle(String title) {\n        this.title = title;\n\
      \    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n\
      \    public void setAuthor(String author) {\n        this.author = author;\n\
      \    }\n}"
    expected_fix: "import javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      \n@Entity\n@Indexed\npublic class Book {\n    @Id\n    private Long id;\n  \
      \  private String title;\n    private String author;\n\n    public Book() {\n\
      \    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public\
      \ void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getTitle()\
      \ {\n        return title;\n    }\n\n    public void setTitle(String title)\
      \ {\n        this.title = title;\n    }\n\n    public String getAuthor() {\n\
      \        return author;\n    }\n\n    public void setAuthor(String author) {\n\
      \        this.author = author;\n    }\n}"
    '# konveyor_guidance': This annotation was deprecated and non-functional in Hibernate
      Search 5. It is no longer available in Hibernate Search 6.
  migration_complexity: low
- rule_id: hibernate-search-00670
  description: Annotation @CalendarBridge not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @CalendarBridge not available anymore
    code_snippet: "import org.hibernate.search.annotations.CalendarBridge;\nimport\
      \ org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import java.util.Calendar;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      \n@Entity\n@Indexed\npublic class Event {\n\n    @Id\n    private Long id;\n\
      \n    @Field\n    @CalendarBridge(resolution = CalendarBridge.Resolution.DAY)\n\
      \    private Calendar eventDate;\n\n    public Long getId() {\n        return\
      \ id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n  \
      \  }\n\n    public Calendar getEventDate() {\n        return eventDate;\n  \
      \  }\n\n    public void setEventDate(Calendar eventDate) {\n        this.eventDate\
      \ = eventDate;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import java.util.Calendar;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      \n@Entity\n@Indexed\npublic class Event {\n\n    @Id\n    private Long id;\n\
      \n    @GenericField\n    private Calendar eventDate;\n\n    public Long getId()\
      \ {\n        return id;\n    }\n\n    public void setId(Long id) {\n       \
      \ this.id = id;\n    }\n\n    public Calendar getEventDate() {\n        return\
      \ eventDate;\n    }\n\n    public void setEventDate(Calendar eventDate) {\n\
      \        this.eventDate = eventDate;\n    }\n}"
    '# konveyor_guidance': "`@CalendarBridge` is not necessary to index Calendar values:\
      \ you can simply apply @GenericField to a property of type Calendar, and an\
      \ appropriate default bridge will be used.\n See link for more information."
    test_code: "import jakarta.persistence.*;\n\n// Stub for Calendar\npublic class\
      \ Calendar {\n    private Long id;\n    private String name;\n\n    public Calendar()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00680
  description: Annotation @CharFilterDef not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @CharFilterDef not available anymore
    code_snippet: "import org.hibernate.search.annotations.AnalyzerDef;\nimport org.hibernate.search.annotations.CharFilterDef;\n\
      import org.hibernate.search.annotations.TokenizerDef;\n\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@AnalyzerDef(name = \"customAnalyzer\"\
      ,\n        charFilters = @CharFilterDef(name = \"htmlStrip\", factory = org.apache.lucene.analysis.charfilter.HTMLStripCharFilterFactory.class),\n\
      \        tokenizer = @TokenizerDef(factory = org.apache.lucene.analysis.standard.StandardTokenizerFactory.class)\n\
      )\npublic class Book {\n\n    @Id\n    private Long id;\n    private String\
      \ title;\n    private String description;\n\n    // Getters and Setters\n  \
      \  public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n  \
      \      return title;\n    }\n\n    public void setTitle(String title) {\n  \
      \      this.title = title;\n    }\n\n    public String getDescription() {\n\
      \        return description;\n    }\n\n    public void setDescription(String\
      \ description) {\n        this.description = description;\n    }\n}"
    expected_fix: "import javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinderRef;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinding;\n\
      \n@Entity\n@Indexed\n@TypeBinding(binder = @TypeBinderRef(type = org.hibernate.search.backend.lucene.analysis.LuceneAnalysisConfigurer.class))\n\
      public class Book {\n\n    @Id\n    private Long id;\n\n    @FullTextField(analyzer\
      \ = \"customAnalyzer\")\n    @KeywordField(name = \"title_sort\")\n    private\
      \ String title;\n\n    @FullTextField(analyzer = \"customAnalyzer\")\n    private\
      \ String description;\n\n    // Getters and Setters\n    public Long getId()\
      \ {\n        return id;\n    }\n\n    public void setId(Long id) {\n       \
      \ this.id = id;\n    }\n\n    public String getTitle() {\n        return title;\n\
      \    }\n\n    public void setTitle(String title) {\n        this.title = title;\n\
      \    }\n\n    public String getDescription() {\n        return description;\n\
      \    }\n\n    public void setDescription(String description) {\n        this.description\
      \ = description;\n    }\n}"
    '# konveyor_guidance': Annotation-based analyzer definitions are no longer supported.
      See link for more information.
  migration_complexity: low
- rule_id: hibernate-search-00690
  description: Annotation @ClassBridge(s) not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @ClassBridge(s) not available anymore
    code_snippet: "import org.hibernate.search.annotations.ClassBridge;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.bridge.FieldBridge;\nimport org.hibernate.search.bridge.StringBridge;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\n@ClassBridge(name = \"customName\", impl = CustomFieldBridge.class)\n\
      public class Book {\n    @Id\n    private Integer id;\n    private String title;\n\
      \    private String author;\n\n    // Getters and setters\n    public Integer\
      \ getId() {\n        return id;\n    }\n\n    public void setId(Integer id)\
      \ {\n        this.id = id;\n    }\n\n    public String getTitle() {\n      \
      \  return title;\n    }\n\n    public void setTitle(String title) {\n      \
      \  this.title = title;\n    }\n\n    public String getAuthor() {\n        return\
      \ author;\n    }\n\n    public void setAuthor(String author) {\n        this.author\
      \ = author;\n    }\n}\n\nclass CustomFieldBridge implements FieldBridge, StringBridge\
      \ {\n    @Override\n    public String objectToString(Object object) {\n    \
      \    return object.toString();\n    }\n\n    @Override\n    public void set(String\
      \ name, Object value, Document document, LuceneOptions luceneOptions) {\n  \
      \      Field field = new Field(name, objectToString(value), luceneOptions.getStore(),\
      \ luceneOptions.getIndex(), luceneOptions.getTermVector());\n        document.add(field);\n\
      \    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinderRef;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.TypeBinding;\n\
      import org.hibernate.search.mapper.pojo.bridge.binding.TypeBindingContext;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.programmatic.TypeBinder;\n\
      import org.hibernate.search.engine.backend.types.Sortable;\nimport org.hibernate.search.engine.backend.document.DocumentElement;\n\
      import org.hibernate.search.engine.backend.document.IndexFieldReference;\nimport\
      \ org.hibernate.search.engine.backend.types.IndexFieldType;\nimport org.hibernate.search.engine.backend.types.dsl.IndexFieldTypeFactory;\n\
      \nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\n@TypeBinding(binder = @TypeBinderRef(type = CustomFieldBinder.class))\n\
      public class Book {\n    @Id\n    private Integer id;\n    private String title;\n\
      \    private String author;\n\n    // Getters and setters\n    public Integer\
      \ getId() {\n        return id;\n    }\n\n    public void setId(Integer id)\
      \ {\n        this.id = id;\n    }\n\n    public String getTitle() {\n      \
      \  return title;\n    }\n\n    public void setTitle(String title) {\n      \
      \  this.title = title;\n    }\n\n    public String getAuthor() {\n        return\
      \ author;\n    }\n\n    public void setAuthor(String author) {\n        this.author\
      \ = author;\n    }\n}\n\nclass CustomFieldBinder implements TypeBinder {\n \
      \   @Override\n    public void bind(TypeBindingContext context) {\n        IndexFieldType<String>\
      \ fieldType = context.getTypeFactory()\n            .asString()\n          \
      \  .normalizer(\"myNormalizer\")\n            .sortable(Sortable.YES)\n    \
      \        .toIndexFieldType();\n\n        IndexFieldReference<String> indexFieldReference\
      \ = context.getIndexSchemaElement()\n            .field(\"customName\", fieldType)\n\
      \            .toReference();\n\n        context.setBridge(String.class, new\
      \ CustomFieldBridge(indexFieldReference));\n    }\n}\n\nclass CustomFieldBridge\
      \ implements org.hibernate.search.mapper.pojo.bridge.TypeBridge {\n    private\
      \ final IndexFieldReference<String> indexFieldReference;\n\n    public CustomFieldBridge(IndexFieldReference<String>\
      \ indexFieldReference) {\n        this.indexFieldReference = indexFieldReference;\n\
      \    }\n\n    @Override\n    public void write(DocumentElement target, Object\
      \ bridgedElement, org.hibernate.search.mapper.pojo.bridge.runtime.TypeBridgeWriteContext\
      \ context) {\n        Book book = (Book) bridgedElement;\n        target.addValue(this.indexFieldReference,\
      \ book.toString());\n    }\n\n    @Override\n    public void close() {\n   \
      \     // Close resources if needed\n    }\n}"
    '# konveyor_guidance': The bridge API was completely reworked in Hibernate Search
      6. See link for more information.
    test_code: "import jakarta.persistence.*;\n\n// Stub for Object\npublic class\
      \ Object {\n    private Long id;\n    private String name;\n\n    public Object()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for TypeBindingContext\n\
      public class TypeBindingContext {\n    private Long id;\n    private String\
      \ name;\n\n    public TypeBindingContext() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00700
  description: Annotation @ContainedIn not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @ContainedIn not available anymore
    code_snippet: "import org.hibernate.search.annotations.ContainedIn;\nimport org.hibernate.search.annotations.Field;\n\
      import org.hibernate.search.annotations.Indexed;\nimport jakarta.persistence.Entity;\n\
      import jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\n\n@Entity\n\
      @Indexed\npublic class Book {\n    @Id\n    private Integer id;\n\n    @Field\n\
      \    private String title;\n\n    @ManyToOne\n    @ContainedIn\n    private\
      \ Author author;\n\n    // Getters and setters\n    public Integer getId() {\n\
      \        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id\
      \ = id;\n    }\n\n    public String getTitle() {\n        return title;\n  \
      \  }\n\n    public void setTitle(String title) {\n        this.title = title;\n\
      \    }\n\n    public Author getAuthor() {\n        return author;\n    }\n\n\
      \    public void setAuthor(Author author) {\n        this.author = author;\n\
      \    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;\n\
      import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\n\
      \n@Entity\n@Indexed\npublic class Book {\n    @Id\n    private Integer id;\n\
      \n    @IndexedEmbedded\n    private String title;\n\n    @ManyToOne\n    private\
      \ Author author;\n\n    // Getters and setters\n    public Integer getId() {\n\
      \        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id\
      \ = id;\n    }\n\n    public String getTitle() {\n        return title;\n  \
      \  }\n\n    public void setTitle(String title) {\n        this.title = title;\n\
      \    }\n\n    public Author getAuthor() {\n        return author;\n    }\n\n\
      \    public void setAuthor(Author author) {\n        this.author = author;\n\
      \    }\n}"
    '# konveyor_guidance': "@ContainedIn is no longer necessary in Hibernate Search\
      \ 6.\n Hibernate Search 6 infers indexing dependencies from the mapping, and\
      \ raises errors at bootstrap when the equivalent of @ContainedIn cannot be applied\
      \ automatically (for example an @IndexedEmbedded association with no inverse\
      \ side).\n Thus, the recommended approach when migrating is to simply remove\
      \ all @ContainedIn annotations, then deal with the bootstrap errors, if any."
    test_code: "import jakarta.persistence.*;\n\n// Stub for Author\npublic class\
      \ Author {\n    private Long id;\n    private String name;\n\n    public Author()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00710
  description: Annotation @DateBridge not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @DateBridge not available anymore
    code_snippet: "import org.hibernate.search.annotations.DateBridge;\nimport org.hibernate.search.annotations.Resolution;\n\
      import org.hibernate.search.annotations.Field;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\nimport java.util.Date;\n\n@Entity\npublic class\
      \ Event {\n    @Id\n    private Long id;\n\n    @Field\n    @DateBridge(resolution\
      \ = Resolution.DAY)\n    private Date eventDate;\n\n    // Getters and Setters\n\
      \    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public Date getEventDate() {\n\
      \        return eventDate;\n    }\n\n    public void setEventDate(Date eventDate)\
      \ {\n        this.eventDate = eventDate;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\nimport java.util.Date;\n\
      \n@Entity\npublic class Event {\n    @Id\n    private Long id;\n\n    @GenericField\n\
      \    private Date eventDate;\n\n    // Getters and Setters\n    public Long\
      \ getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n\
      \        this.id = id;\n    }\n\n    public Date getEventDate() {\n        return\
      \ eventDate;\n    }\n\n    public void setEventDate(Date eventDate) {\n    \
      \    this.eventDate = eventDate;\n    }\n}"
    '# konveyor_guidance': "@DateBridge is not necessary to index Date values: you\
      \ can simply apply @GenericField to a property of type java.util.Date, java.sql.Date,\
      \ java.sql.Time or java.sql.Timestamp, and an appropriate default bridge will\
      \ be used.\n See link for more information."
    test_code: "import jakarta.persistence.*;\n\n// Stub for Date\npublic class Date\
      \ {\n    private Long id;\n    private String name;\n\n    public Date() {}\n\
      \n    public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00720
  description: Annotation @DocumentId has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @DocumentId has moved
    code_snippet: "import org.hibernate.search.annotations.DocumentId;\nimport org.hibernate.search.annotations.Field;\n\
      import org.hibernate.search.annotations.Indexed;\n\n@Indexed\npublic class Book\
      \ {\n\n    @DocumentId(name = \"bookId\")\n    private Long id;\n\n    @Field\n\
      \    private String title;\n\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.DocumentId;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      \n@Indexed\npublic class Book {\n\n    @DocumentId\n    private Long id;\n\n\
      \    @KeywordField\n    private String title;\n\n    public Long getId() {\n\
      \        return id;\n    }\n\n    public void setId(Long id) {\n        this.id\
      \ = id;\n    }\n\n    public String getTitle() {\n        return title;\n  \
      \  }\n\n    public void setTitle(String title) {\n        this.title = title;\n\
      \    }\n}"
    '# konveyor_guidance': "`@DocumentId` is still available in Hibernate Search 6,\
      \ but moved to a different package: `org.hibernate.search.mapper.pojo.mapping.definition.annotation.DocumentId`.\n\
      \ However, it no longer exposes a name attribute, because the document ID is\
      \ no longer an index field, and thus it does not need a name."
  migration_complexity: low
- rule_id: hibernate-search-00730
  description: Annotation @DynamicBoost not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @DynamicBoost not available anymore
    code_snippet: "import org.hibernate.search.annotations.DynamicBoost;\nimport org.hibernate.search.annotations.Field;\n\
      import org.hibernate.search.annotations.Indexed;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\n@DynamicBoost(impl = CustomBoostStrategy.class)\n\
      public class Book {\n\n    @Id\n    private Long id;\n\n    @Field\n    private\
      \ String title;\n\n    @Field\n    private String author;\n\n    public Long\
      \ getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n\
      \        this.id = id;\n    }\n\n    public String getTitle() {\n        return\
      \ title;\n    }\n\n    public void setTitle(String title) {\n        this.title\
      \ = title;\n    }\n\n    public String getAuthor() {\n        return author;\n\
      \    }\n\n    public void setAuthor(String author) {\n        this.author =\
      \ author;\n    }\n}\n\nclass CustomBoostStrategy {\n    // Implementation details\
      \ for boosting strategy\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Book {\n\n    @Id\n    private Long id;\n\n    @KeywordField\n\
      \    private String title;\n\n    @KeywordField\n    private String author;\n\
      \n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n  \
      \      return title;\n    }\n\n    public void setTitle(String title) {\n  \
      \      this.title = title;\n    }\n\n    public String getAuthor() {\n     \
      \   return author;\n    }\n\n    public void setAuthor(String author) {\n  \
      \      this.author is author;\n    }\n}"
    '# konveyor_guidance': "Index-time boosting was deprecated in Hibernate Search\
      \ 5. It is no longer available in Hibernate Search 6.\n Instead, rely on query-time\
      \ boosting. See link for more information."
  migration_complexity: low
- rule_id: hibernate-search-00740
  description: Facets have changed
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Facets have changed
    code_snippet: "import org.hibernate.search.query.dsl.QueryBuilder;\nimport org.hibernate.search.query.facet.Facet;\n\
      import org.hibernate.search.query.facet.FacetingRequest;\n\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport java.util.List;\n\npublic\
      \ class OldFacetExample {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public List<Facet> searchWithFacets(String keyword)\
      \ {\n        QueryBuilder queryBuilder = org.hibernate.search.jpa.Search.getFullTextEntityManager(entityManager)\n\
      \                .getSearchFactory()\n                .buildQueryBuilder()\n\
      \                .forEntity(Book.class)\n                .get();\n\n       \
      \ FacetingRequest categoryFaceting = queryBuilder.facet()\n                .name(\"\
      categoryFacet\")\n                .onField(\"category\")\n                .discrete()\n\
      \                .orderedBy(FacetSortOrder.COUNT_DESC)\n                .includeZeroCounts(false)\n\
      \                .createFacetingRequest();\n\n        org.hibernate.search.jpa.FullTextQuery\
      \ fullTextQuery = org.hibernate.search.jpa.Search.getFullTextEntityManager(entityManager)\n\
      \                .createFullTextQuery(queryBuilder.keyword().onField(\"title\"\
      ).matching(keyword).createQuery());\n\n        fullTextQuery.getFacetManager().enableFaceting(categoryFaceting);\n\
      \n        return fullTextQuery.getFacetManager().getFacets(\"categoryFacet\"\
      );\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import org.hibernate.search.engine.search.query.SearchQuery;\nimport org.hibernate.search.engine.search.aggregation.AggregationKey;\n\
      import org.hibernate.search.engine.search.aggregation.dsl.TermsAggregationOptionsStep;\n\
      \nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import java.util.List;\nimport java.util.Map;\n\npublic class NewAggregationExample\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public Map<String, Long> searchWithAggregations(String keyword) {\n   \
      \     SearchSession searchSession = Search.session(entityManager);\n\n     \
      \   AggregationKey<Map<String, Long>> categoryAggregationKey = AggregationKey.of(\"\
      categoryAggregation\");\n\n        SearchQuery<Book> query = searchSession.search(Book.class)\n\
      \                .where(f -> f.match().field(\"title\").matching(keyword))\n\
      \                .aggregation(categoryAggregationKey, f -> f.terms()\n     \
      \                   .field(\"category\", String.class)\n                   \
      \     .orderByCountDescending()\n                        .minDocumentCount(1))\n\
      \                .toQuery();\n\n        return query.fetch(20) // Fetch top\
      \ 20 results\n                .aggregation(categoryAggregationKey);\n    }\n\
      }"
    '# konveyor_guidance': Facets are now called aggregations, which are a generalization
      of the concept of faceting. See link for more information.
    test_code: "// Stub for Book\npublic class Book {\n    private Long id;\n    private\
      \ String name;\n\n    public Book() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for Facet\npublic class Facet {\n    private Long id;\n  \
      \  private String name;\n\n    public Facet() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for EntityManager\npublic class EntityManager\
      \ {\n    private Long id;\n    private String name;\n\n    public EntityManager()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00750
  description: The @Field(s) annotation has been split into multiple annotations
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The @Field(s) annotation has been split into multiple annotations
    code_snippet: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Book {\n\n    @Id\n    private Long id;\n\n    @Field\n\
      \    private String title;\n\n    @Field\n    private String author;\n\n   \
      \ public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n  \
      \      return title;\n    }\n\n    public void setTitle(String title) {\n  \
      \      this.title = title;\n    }\n\n    public String getAuthor() {\n     \
      \   return author;\n    }\n\n    public void setAuthor(String author) {\n  \
      \      this.author = author;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Book {\n\n    @Id\n    private Long id;\n\n    @FullTextField\n\
      \    private String title;\n\n    @FullTextField\n    private String author;\n\
      \n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n  \
      \      return title;\n    }\n\n    public void setTitle(String title) {\n  \
      \      this.title = title;\n    }\n\n    public String getAuthor() {\n     \
      \   return author;\n    }\n\n    public void setAuthor(String author) {\n  \
      \      this.author = author;\n    }\n}"
    '# konveyor_guidance': The @Field annotation was split into multiple annotations,
      specific to each field type. See link for more information.
  migration_complexity: low
- rule_id: hibernate-search-00760
  description: Annotation @FieldBridge not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @FieldBridge not available anymore
    code_snippet: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.FieldBridge;\n\
      import org.hibernate.search.bridge.builtin.IntegerBridge;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\npublic class Book {\n\n    @Id\n  \
      \  private Integer id;\n\n    @Field\n    @FieldBridge(impl = IntegerBridge.class)\n\
      \    private Integer pageCount;\n\n    public Integer getId() {\n        return\
      \ id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n\
      \    }\n\n    public Integer getPageCount() {\n        return pageCount;\n \
      \   }\n\n    public void setPageCount(Integer pageCount) {\n        this.pageCount\
      \ = pageCount;\n    }\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.ValueBridgeRef;\n\
      import org.hibernate.search.mapper.pojo.bridge.builtin.programmatic.IntegerValueBridge;\n\
      \n@Entity\npublic class Book {\n\n    @Id\n    private Integer id;\n\n    @GenericField(valueBridge\
      \ = @ValueBridgeRef(type = IntegerValueBridge.class))\n    private Integer pageCount;\n\
      \n    public Integer getId() {\n        return id;\n    }\n\n    public void\
      \ setId(Integer id) {\n        this.id = id;\n    }\n\n    public Integer getPageCount()\
      \ {\n        return pageCount;\n    }\n\n    public void setPageCount(Integer\
      \ pageCount) {\n        this.pageCount = pageCount;\n    }\n}"
    '# konveyor_guidance': The bridge API was completely reworked in Hibernate Search
      6. See link for more information.
  migration_complexity: low
- rule_id: hibernate-search-00770
  description: The @FullTextFilterDef(s) annotation is not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The @FullTextFilterDef(s) annotation is not available anymore
    code_snippet: "import org.hibernate.search.annotations.FullTextFilterDef;\nimport\
      \ org.hibernate.search.annotations.Indexed;\n\n@Indexed\n@FullTextFilterDef(name\
      \ = \"myFilter\", impl = MyFilter.class)\npublic class Book {\n\n    private\
      \ String title;\n    private String author;\n\n    // Getters and setters\n\
      \    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n\n    public\
      \ String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String\
      \ author) {\n        this.author = author;\n    }\n}\n\nclass MyFilter {\n \
      \   // Implementation details\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      \n@Indexed\npublic class Book {\n\n    private String title;\n    private String\
      \ author;\n\n    // Getters and setters\n    public String getTitle() {\n  \
      \      return title;\n    }\n\n    public void setTitle(String title) {\n  \
      \      this.title = title;\n    }\n\n    public String getAuthor() {\n     \
      \   return author;\n    }\n\n    public void setAuthor(String author) {\n  \
      \      this.author = author;\n    }\n}\n\n// MyFilter class should be adapted\
      \ or integrated into a custom Hibernate Search 6 filter approach if necessary.\n\
      class MyFilter {\n    // Implementation details\n}"
    '# konveyor_guidance': Full-text filters have no direct equivalent in Hibernate
      Search 6. See link for more information.
  migration_complexity: low
- rule_id: hibernate-search-00780
  description: Annotation @Indexed has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @Indexed has moved
    code_snippet: "import org.hibernate.search.annotations.Indexed;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\npublic class Book {\n   \
      \ @Id\n    private Long id;\n    private String title;\n    private String author;\n\
      \n    public Book() {\n    }\n\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n\n    public\
      \ String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String\
      \ author) {\n        this.author = author;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Book {\n    @Id\n    private Long id;\n    private String\
      \ title;\n    private String author;\n\n    public Book() {\n    }\n\n    public\
      \ Long getId() {\n        return id;\n    }\n\n    public void setId(Long id)\
      \ {\n        this.id = id;\n    }\n\n    public String getTitle() {\n      \
      \  return title;\n    }\n\n    public void setTitle(String title) {\n      \
      \  this.title = title;\n    }\n\n    public String getAuthor() {\n        return\
      \ author;\n    }\n\n    public void setAuthor(String author) {\n        this.author\
      \ = author;\n    }\n}"
    '# konveyor_guidance': "`@Indexed` is still available in Hibernate Search 6, but\
      \ moved to a different package: `org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed`.\n\
      \ However, there are some related changes that must be addressed - see link\
      \ for more information."
  migration_complexity: low
- rule_id: hibernate-search-00790
  description: Annotation @IndexedEmbedded has moved
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @IndexedEmbedded has moved
    code_snippet: "import org.hibernate.search.annotations.Indexed;\nimport org.hibernate.search.annotations.IndexedEmbedded;\n\
      import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.OneToMany;\n\
      import java.util.List;\n\n@Entity\n@Indexed\npublic class Book {\n\n    @Id\n\
      \    private Long id;\n    private String title;\n\n    @OneToMany\n    @IndexedEmbedded\n\
      \    private List<Author> authors;\n\n    // Getters and setters\n    public\
      \ Long getId() {\n        return id;\n    }\n\n    public void setId(Long id)\
      \ {\n        this.id = id;\n    }\n\n    public String getTitle() {\n      \
      \  return title;\n    }\n\n    public void setTitle(String title) {\n      \
      \  this.title = title;\n    }\n\n    public List<Author> getAuthors() {\n  \
      \      return authors;\n    }\n\n    public void setAuthors(List<Author> authors)\
      \ {\n        this.authors = authors;\n    }\n}\n\n@Entity\nclass Author {\n\
      \    @Id\n    private Long id;\n    private String name;\n\n    // Getters and\
      \ setters\n    public Long getId() {\n        return id;\n    }\n\n    public\
      \ void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName()\
      \ {\n        return name;\n    }\n\n    public void setName(String name) {\n\
      \        this.name = name;\n    }\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import jakarta.persistence.OneToMany;\nimport java.util.List;\nimport org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;\n\
      \n@Entity\n@Indexed\npublic class Book {\n\n    @Id\n    private Long id;\n\
      \    private String title;\n\n    @OneToMany\n    @IndexedEmbedded\n    private\
      \ List<Author> authors;\n\n    public Long getId() {\n        return id;\n \
      \   }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n\n    public\
      \ List<Author> getAuthors() {\n        return authors;\n    }\n\n    public\
      \ void setAuthors(List<Author> authors) {\n        this.authors = authors;\n\
      \    }\n}\n\n@Entity\nclass Author {\n    @Id\n    private Long id;\n    private\
      \ String name;\n\n    public Long getId() {\n        return id;\n    }\n\n \
      \   public void setId(Long id) {\n        this.id = id;\n    }\n\n    public\
      \ String getName() {\n        return name;\n    }\n\n    public void setName(String\
      \ name) {\n        this.name = name;\n    }\n}"
    '# konveyor_guidance': "`@IndexedEmbedded` is still available in Hibernate Search\
      \ 6, but moved to a different package: `org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded`.\n\
      \ Some other changes within the annotation have been made. For more information,\
      \ see the link."
  migration_complexity: low
- rule_id: hibernate-search-00800
  description: The @Key annotation is not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The @Key annotation is not available anymore
    code_snippet: "import org.hibernate.search.annotations.Indexed;\nimport org.hibernate.search.annotations.Field;\n\
      import org.hibernate.search.annotations.Key;\n\n@Indexed\npublic class Book\
      \ {\n\n    @Field\n    private String title;\n\n    @Key\n    public String\
      \ getKey() {\n        return title;\n    }\n\n    public String getTitle() {\n\
      \        return title;\n    }\n\n    public void setTitle(String title) {\n\
      \        this.title = title;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      \n@Indexed\npublic class Book {\n\n    @KeywordField\n    private String title;\n\
      \n    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n}"
    '# konveyor_guidance': '`@Key` has no equivalent in Hibernate Search 6.'
  migration_complexity: low
- rule_id: hibernate-search-00810
  description: Annotation @Latitude has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @Latitude has moved
    code_snippet: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.annotations.Latitude;\n\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\npublic class Location {\n\
      \n    @Id\n    private Long id;\n\n    @Latitude\n    @Field\n    private Double\
      \ latitude;\n\n    public Long getId() {\n        return id;\n    }\n\n    public\
      \ void setId(Long id) {\n        this.id = id;\n    }\n\n    public Double getLatitude()\
      \ {\n        return latitude;\n    }\n\n    public void setLatitude(Double latitude)\
      \ {\n        this.latitude = latitude;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Latitude;\n\
      \nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Location {\n\n    @Id\n    private Long id;\n\n    @Latitude\n\
      \    @KeywordField\n    private Double latitude;\n\n    public Long getId()\
      \ {\n        return id;\n    }\n\n    public void setId(Long id) {\n       \
      \ this.id = id;\n    }\n\n    public Double getLatitude() {\n        return\
      \ latitude;\n    }\n\n    public void setLatitude(Double latitude) {\n     \
      \   this.latitude = latitude;\n    }\n}"
    '# konveyor_guidance': '`@Latitude` is still available in Hibernate Search 6,
      but moved to a different package: `org.hibernate.search.annotations.Latitude`.'
  migration_complexity: low
- rule_id: hibernate-search-00820
  description: Annotation @Longitude has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @Longitude has moved
    code_snippet: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.annotations.Latitude;\nimport org.hibernate.search.annotations.Longitude;\n\
      import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Location {\n    @Id\n    private Long id;\n\n    @Field\n\
      \    @Latitude\n    private Double latitude;\n\n    @Field\n    @Longitude\n\
      \    private Double longitude;\n\n    // Getters and setters\n    public Long\
      \ getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n\
      \        this.id = id;\n    }\n\n    public Double getLatitude() {\n       \
      \ return latitude;\n    }\n\n    public void setLatitude(Double latitude) {\n\
      \        this.latitude = latitude;\n    }\n\n    public Double getLongitude()\
      \ {\n        return longitude;\n    }\n\n    public void setLongitude(Double\
      \ longitude) {\n        this.longitude = longitude;\n    }\n}"
    expected_fix: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.annotations.Latitude;\nimport org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GeoPointField;\n\
      import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Location {\n    @Id\n    private Long id;\n\n    @Field\n\
      \    @Latitude\n    private Double latitude;\n\n    @Field\n    @KeywordField(name\
      \ = \"longitude\") // Using KeywordField for indexing purposes\n    @GeoPointField\
      \ // Adjusted to use GeoPointField for longitude\n    private Double longitude;\n\
      \n    // Getters and setters\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public Double getLatitude() {\n        return latitude;\n    }\n\n    public\
      \ void setLatitude(Double latitude) {\n        this.latitude = latitude;\n \
      \   }\n\n    public Double getLongitude() {\n        return longitude;\n   \
      \ }\n\n    public void setLongitude(Double longitude) {\n        this.longitude\
      \ = longitude;\n    }\n}"
    '# konveyor_guidance': '`@Longitude` is still available in Hibernate Search 6,
      but moved to a different package: `org.hibernate.search.annotations.Longitude`.'
  migration_complexity: low
- rule_id: hibernate-search-00830
  description: Annotation @Longitude has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @Longitude has moved
    code_snippet: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.annotations.Normalizer;\nimport org.apache.lucene.analysis.core.LowerCaseFilterFactory;\n\
      import org.apache.lucene.analysis.standard.StandardTokenizerFactory;\nimport\
      \ org.hibernate.search.annotations.AnalyzerDef;\nimport org.hibernate.search.annotations.TokenFilterDef;\n\
      import org.hibernate.search.annotations.TokenizerDef;\n\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\n@AnalyzerDef(name = \"customNormalizer\"\
      ,\n        tokenizer = @TokenizerDef(factory = StandardTokenizerFactory.class),\n\
      \        filters = {\n                @TokenFilterDef(factory = LowerCaseFilterFactory.class)\n\
      \        })\npublic class Location {\n\n    @Id\n    private Long id;\n\n  \
      \  @Field\n    @Normalizer(impl = MyNormalizer.class)\n    private String name;\n\
      \n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getName() {\n   \
      \     return name;\n    }\n\n    public void setName(String name) {\n      \
      \  this.name = name;\n    }\n\n    // MyNormalizer class definition (assuming\
      \ it's a static inner class for simplicity)\n    public static class MyNormalizer\
      \ extends org.apache.lucene.analysis.Analyzer {\n        @Override\n       \
      \ protected TokenStreamComponents createComponents(String fieldName) {\n   \
      \         Tokenizer source = new StandardTokenizer();\n            TokenStream\
      \ filter = new LowerCaseFilter(source);\n            return new TokenStreamComponents(source,\
      \ filter);\n        }\n    }\n}"
    expected_fix: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.annotations.AnalyzerDef;\nimport org.hibernate.search.annotations.TokenFilterDef;\n\
      import org.hibernate.search.annotations.TokenizerDef;\nimport org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.NormalizerDef;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;\n\
      \nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport org.apache.lucene.analysis.core.LowerCaseFilterFactory;\n\
      import org.apache.lucene.analysis.standard.StandardTokenizerFactory;\n\n@Entity\n\
      @Indexed\n@AnalyzerDef(name = \"customAnalyzer\",\n        tokenizer = @TokenizerDef(factory\
      \ = StandardTokenizerFactory.class),\n        filters = {\n                @TokenFilterDef(factory\
      \ = LowerCaseFilterFactory.class)\n        })\n@NormalizerDef(name = \"customNormalizer\"\
      ,\n        filters = @TokenFilterDef(factory = LowerCaseFilterFactory.class))\n\
      public class Location {\n\n    @Id\n    private Long id;\n\n    @Field(normalizer\
      \ = @Normalizer(name = \"customNormalizer\"))\n    private String name;\n\n\
      \    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getName() {\n   \
      \     return name;\n    }\n\n    public void setName(String name) {\n      \
      \  this.name = name;\n    }\n}"
    '# konveyor_guidance': "In Hibernate Search 5, `@Normalizer` could point directly\
      \ to a class extending `org.apache.lucene.analysis.Analyzer`, for example with\
      \ `@Normalizer(impl = MyNormalizer.class)`.\n This is no longer possible: normalizers\
      \ are now always referenced by their name. However, you can assign a name to\
      \ a given normalizer instance using the Lucene analysis configurer."
    test_code: "import jakarta.persistence.*;\n\n// Stub for TokenStreamComponents\n\
      public class TokenStreamComponents {\n    private Long id;\n    private String\
      \ name;\n\n    public TokenStreamComponents() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00840
  description: Annotation @NormalizerDef(s) not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @NormalizerDef(s) not available anymore
    code_snippet: "import org.hibernate.search.annotations.AnalyzerDef;\nimport org.hibernate.search.annotations.NormalizerDef;\n\
      import org.hibernate.search.annotations.TokenFilterDef;\nimport org.hibernate.search.annotations.TokenizerDef;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @AnalyzerDef(name = \"customAnalyzer\",\n    tokenizer = @TokenizerDef(factory\
      \ = org.apache.lucene.analysis.standard.StandardTokenizerFactory.class),\n \
      \   filters = {\n        @TokenFilterDef(factory = org.apache.lucene.analysis.lowercase.LowerCaseFilterFactory.class)\n\
      \    }\n)\n@NormalizerDef(name = \"customNormalizer\",\n    filters = {\n  \
      \      @TokenFilterDef(factory = org.apache.lucene.analysis.core.LowerCaseFilterFactory.class)\n\
      \    }\n)\npublic class Book {\n    @Id\n    private Long id;\n    private String\
      \ title;\n\n    // Getters and setters\n    public Long getId() {\n        return\
      \ id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n  \
      \  }\n\n    public String getTitle() {\n        return title;\n    }\n\n   \
      \ public void setTitle(String title) {\n        this.title = title;\n    }\n\
      }"
    expected_fix: "import javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinderRef;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinding;\n\
      import org.hibernate.search.backend.lucene.analysis.LuceneAnalysisConfigurer;\n\
      import org.hibernate.search.backend.lucene.analysis.model.dsl.LuceneAnalysisDefinitionContainerContext;\n\
      import org.hibernate.search.engine.backend.analysis.AnalyzerNames;\nimport org.hibernate.search.engine.backend.analysis.NormalizerNames;\n\
      \n@Entity\n@Indexed\n@TypeBinding(binder = @TypeBinderRef(type = BookAnalysisConfigurer.class))\n\
      public class Book {\n    @Id\n    private Long id;\n\n    @FullTextField(analyzer\
      \ = \"customAnalyzer\")\n    private String title;\n\n    // Getters and setters\n\
      \    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n  \
      \      return title;\n    }\n\n    public void setTitle(String title) {\n  \
      \      this.title = title;\n    }\n\n    public static class BookAnalysisConfigurer\
      \ implements LuceneAnalysisConfigurer {\n        @Override\n        public void\
      \ configure(LuceneAnalysisDefinitionContainerContext context) {\n          \
      \  context.analyzer(\"customAnalyzer\").custom()\n                .tokenizer(org.apache.lucene.analysis.standard.StandardTokenizerFactory.class)\n\
      \                .tokenFilter(org.apache.lucene.analysis.lowercase.LowerCaseFilterFactory.class);\n\
      \n            context.normalizer(\"customNormalizer\").custom()\n          \
      \      .tokenFilter(org.apache.lucene.analysis.core.LowerCaseFilterFactory.class);\n\
      \        }\n    }\n}"
    '# konveyor_guidance': "Annotation-based analyzer definitions are no longer supported.\n\
      \ Instead, implement an analysis configurer: see links for Lucene and Elasticsearch"
    test_code: "import jakarta.persistence.*;\n\n// Stub for LuceneAnalysisDefinitionContainerContext\n\
      public class LuceneAnalysisDefinitionContainerContext {\n    private Long id;\n\
      \    private String name;\n\n    public LuceneAnalysisDefinitionContainerContext()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00850
  description: Annotation @NumericField(s) not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @NumericField(s) not available anymore
    code_snippet: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.annotations.NumericField;\n\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\npublic class Product {\n\n\
      \    @Id\n    private Long id;\n\n    @Field\n    @NumericField\n    private\
      \ double price;\n\n    public Long getId() {\n        return id;\n    }\n\n\
      \    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public\
      \ double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double\
      \ price) {\n        this.price = price;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      \nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Product {\n\n    @Id\n    private Long id;\n\n    @KeywordField\n\
      \    private double price;\n\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public double getPrice() {\n        return price;\n    }\n\n    public\
      \ void setPrice(double price) {\n        this.price = price;\n    }\n}"
    '# konveyor_guidance': "@NumericField no longer exists in Hibernate Search 6.\n\
      \ Numeric types are indexed as numeric values by default, so this annotation\
      \ can simply be removed."
  migration_complexity: low
- rule_id: hibernate-search-00860
  description: Annotation @ProvidedId is no longer available
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @ProvidedId is no longer available
    code_snippet: "import org.hibernate.search.annotations.ProvidedId;\nimport org.hibernate.search.annotations.Indexed;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\n@ProvidedId\npublic class Book {\n\n    @Id\n    private Long id;\n\
      \    private String title;\n    private String author;\n\n    public Book()\
      \ {\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public\
      \ void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getTitle()\
      \ {\n        return title;\n    }\n\n    public void setTitle(String title)\
      \ {\n        this.title = title;\n    }\n\n    public String getAuthor() {\n\
      \        return author;\n    }\n\n    public void setAuthor(String author) {\n\
      \        this.author = author;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Book {\n\n    @Id\n    private Long id;\n    private\
      \ String title;\n    private String author;\n\n    public Book() {\n    }\n\n\
      \    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n  \
      \      return title;\n    }\n\n    public void setTitle(String title) {\n  \
      \      this.title = title;\n    }\n\n    public String getAuthor() {\n     \
      \   return author;\n    }\n\n    public void setAuthor(String author) {\n  \
      \      this.author = author;\n    }\n}"
    '# konveyor_guidance': '`@ProvidedId` was deprecated in Hibernate Search 5. It
      no longer exists in Hibernate Search 6.'
  migration_complexity: low
- rule_id: hibernate-search-00870
  description: Annotation @SortableField(s) not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @SortableField(s) not available anymore
    code_snippet: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.annotations.SortableField;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\npublic class Book {\n\n \
      \   @Id\n    private Integer id;\n\n    @Field\n    @SortableField\n    private\
      \ String title;\n\n    public Integer getId() {\n        return id;\n    }\n\
      \n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public\
      \ String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String\
      \ title) {\n        this.title = title;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Book {\n\n    @Id\n    private Integer id;\n\n    @FullTextField(sortable\
      \ = true)\n    private String title;\n\n    public Integer getId() {\n     \
      \   return id;\n    }\n\n    public void setId(Integer id) {\n        this.id\
      \ = id;\n    }\n\n    public String getTitle() {\n        return title;\n  \
      \  }\n\n    public void setTitle(String title) {\n        this.title = title;\n\
      \    }\n}"
    '# konveyor_guidance': '@SortableField(s) no longer exists in Hibernate Search
      6. Instead, use @*Field.sortable.'
  migration_complexity: low
- rule_id: hibernate-search-00880
  description: Annotation @Spatial(s) not available anymore
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @Spatial(s) not available anymore
    code_snippet: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.annotations.Spatial;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\npublic class Location {\n\
      \n    @Id\n    private Long id;\n\n    @Field\n    private String name;\n\n\
      \    @Spatial\n    private double latitude;\n\n    @Spatial\n    private double\
      \ longitude;\n\n    // Getters and setters\n    public Long getId() {\n    \
      \    return id;\n    }\n\n    public void setId(Long id) {\n        this.id\
      \ = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\
      \n    public void setName(String name) {\n        this.name = name;\n    }\n\
      \n    public double getLatitude() {\n        return latitude;\n    }\n\n   \
      \ public void setLatitude(double latitude) {\n        this.latitude = latitude;\n\
      \    }\n\n    public double getLongitude() {\n        return longitude;\n  \
      \  }\n\n    public void setLongitude(double longitude) {\n        this.longitude\
      \ = longitude;\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;\n\
      import javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @Indexed\npublic class Location {\n\n    @Id\n    private Long id;\n\n    @KeywordField\n\
      \    private String name;\n\n    @IndexedEmbedded\n    private Coordinates coordinates\
      \ = new Coordinates();\n\n    // Getters and setters\n    public Long getId()\
      \ {\n        return id;\n    }\n\n    public void setId(Long id) {\n       \
      \ this.id = id;\n    }\n\n    public String getName() {\n        return name;\n\
      \    }\n\n    public void setName(String name) {\n        this.name = name;\n\
      \    }\n\n    public double getLatitude() {\n        return coordinates.latitude;\n\
      \    }\n\n    public void setLatitude(double latitude) {\n        this.coordinates.latitude\
      \ = latitude;\n    }\n\n    public double getLongitude() {\n        return coordinates.longitude;\n\
      \    }\n\n    public void setLongitude(double longitude) {\n        this.coordinates.longitude\
      \ = longitude;\n    }\n\n    // Inner class for coordinates\n    public static\
      \ class Coordinates {\n        @GenericField\n        private double latitude;\n\
      \n        @GenericField\n        private double longitude;\n    }\n}"
    '# konveyor_guidance': "@Spatial has no direct equivalent in Hibernate Search\
      \ 6.\n Check link for a quick reference of how to convert a @Spatial annotation\
      \ to Hibernate Search 6."
    test_code: "import jakarta.persistence.*;\n\n// Stub for Coordinates\npublic class\
      \ Coordinates {\n    private Long id;\n    private String name;\n\n    public\
      \ Coordinates() {}\n\n    public Long getId() { return id; }\n    public void\
      \ setId(Long id) { this.id = id; }\n    public String getName() { return name;\
      \ }\n    public void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00890
  description: Annotation @TikaBridge is no longer available
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @TikaBridge is no longer available
    code_snippet: "import org.hibernate.search.annotations.Field;\nimport org.hibernate.search.annotations.Indexed;\n\
      import org.hibernate.search.annotations.TikaBridge;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\npublic class Document {\n\
      \n    @Id\n    private Long id;\n\n    @Field\n    @TikaBridge\n    private\
      \ String content;\n\n    public Long getId() {\n        return id;\n    }\n\n\
      \    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public\
      \ String getContent() {\n        return content;\n    }\n\n    public void setContent(String\
      \ content) {\n        this.content = content;\n    }\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      \n@Entity\n@Indexed\npublic class Document {\n\n    @Id\n    private Long id;\n\
      \n    @FullTextField\n    private String content;\n\n    public Long getId()\
      \ {\n        return id;\n    }\n\n    public void setId(Long id) {\n       \
      \ this.id = id;\n    }\n\n    public String getContent() {\n        return content;\n\
      \    }\n\n    public void setContent(String content) {\n        this.content\
      \ = content;\n    }\n}"
    '# konveyor_guidance': '@TikaBridge has no equivalent in Hibernate Search 6 yet.'
  migration_complexity: low
- rule_id: hibernate-search-00900
  description: Annotation @AnalyzerDef(s) not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Annotation @AnalyzerDef(s) not available anymore
    code_snippet: "import org.hibernate.search.annotations.AnalyzerDef;\nimport org.hibernate.search.annotations.TokenizerDef;\n\
      import org.hibernate.search.annotations.TokenFilterDef;\nimport org.hibernate.search.annotations.Parameter;\n\
      \nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\n\
      @AnalyzerDef(name = \"customAnalyzer\",\n    tokenizer = @TokenizerDef(factory\
      \ = org.apache.lucene.analysis.standard.StandardTokenizerFactory.class),\n \
      \   filters = {\n        @TokenFilterDef(factory = org.apache.lucene.analysis.lowercase.LowerCaseFilterFactory.class),\n\
      \        @TokenFilterDef(factory = org.apache.lucene.analysis.standard.StandardFilterFactory.class,\n\
      \                        params = {\n                            @Parameter(name\
      \ = \"maxTokenLength\", value = \"10\")\n                        })\n    }\n\
      )\npublic class Book {\n    @Id\n    private Long id;\n    private String title;\n\
      \n    // Getters and setters\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n}"
    expected_fix: "import javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      \nimport org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinderRef;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinding;\n\
      import org.hibernate.search.engine.backend.analysis.AnalyzerNames;\nimport org.hibernate.search.engine.backend.types.Projectable;\n\
      import org.hibernate.search.engine.backend.types.Sortable;\n\n@Entity\n@Indexed\n\
      @TypeBinding(binder = @TypeBinderRef(type = CustomAnalyzerBinder.class))\npublic\
      \ class Book {\n    @Id\n    private Long id;\n\n    @FullTextField(analyzer\
      \ = \"customAnalyzer\")\n    private String title;\n\n    // Getters and setters\n\
      \    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n  \
      \      return title;\n    }\n\n    public void setTitle(String title) {\n  \
      \      this.title = title;\n    }\n}\n\nimport org.hibernate.search.engine.backend.analysis.AnalyzerNames;\n\
      import org.hibernate.search.engine.environment.bean.BeanReference;\nimport org.hibernate.search.engine.environment.bean.BeanRetrieval;\n\
      import org.hibernate.search.mapper.pojo.bridge.binding.TypeBindingContext;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.programmatic.TypeBinder;\n\
      import org.hibernate.search.mapper.pojo.bridge.runtime.TypeBridgeWriteContext;\n\
      import org.hibernate.search.mapper.pojo.model.PojoElementAccessor;\nimport org.hibernate.search.mapper.pojo.model.PojoModelType;\n\
      \npublic class CustomAnalyzerBinder implements TypeBinder {\n    @Override\n\
      \    public void bind(TypeBindingContext context) {\n        context.dependencies().useRootOnly();\n\
      \n        PojoModelType bridgedElement = context.bridgedElement();\n       \
      \ PojoElementAccessor<String> accessor = bridgedElement.property(\"title\").createAccessor(String.class);\n\
      \n        context.bridge(String.class, new CustomAnalyzerBridge(accessor));\n\
      \    }\n}\n\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.index.IndexableField;\n\
      import org.hibernate.search.mapper.pojo.bridge.RoutingBridge;\nimport org.hibernate.search.mapper.pojo.bridge.runtime.RoutingBridgeRouteContext;\n\
      import org.hibernate.search.mapper.pojo.bridge.runtime.TypeBridgeWriteContext;\n\
      import org.hibernate.search.mapper.pojo.model.PojoElementAccessor;\n\npublic\
      \ class CustomAnalyzerBridge implements RoutingBridge<String> {\n    private\
      \ final PojoElementAccessor<String> accessor;\n\n    public CustomAnalyzerBridge(PojoElementAccessor<String>\
      \ accessor) {\n        this.accessor = accessor;\n    }\n\n    @Override\n \
      \   public void route(Document document, Object entity, String indexedValue,\
      \ RoutingBridgeRouteContext context) {\n        // Custom routing logic here\n\
      \    }\n\n    @Override\n    public void write(Document document, Object entity,\
      \ String indexedValue, TypeBridgeWriteContext context) {\n        IndexableField\
      \ field = context.createIndexableField(\n            \"customAnalyzer\",\n \
      \           accessor.read(entity)\n        );\n        document.add(field);\n\
      \    }\n}"
    '# konveyor_guidance': "Annotation-based analyzer definitions are no longer supported.\n\
      \ See links for more information."
    test_code: "import jakarta.persistence.*;\n\n// Stub for TypeBindingContext\n\
      public class TypeBindingContext {\n    private Long id;\n    private String\
      \ name;\n\n    public TypeBindingContext() {}\n\n    public Long getId() { return\
      \ id; }\n    public void setId(Long id) { this.id = id; }\n    public String\
      \ getName() { return name; }\n    public void setName(String name) { this.name\
      \ = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00910
  description: FullTextEntityManager and FullTextSession removed
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: FullTextEntityManager and FullTextSession removed
    code_snippet: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import org.hibernate.search.jpa.FullTextEntityManager;\nimport org.hibernate.search.jpa.Search;\n\
      \nimport jakarta.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void performSearch(String keyword) {\n      \
      \  FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager(entityManager);\n\
      \        org.apache.lucene.search.Query luceneQuery = fullTextEntityManager.getSearchFactory()\n\
      \            .buildQueryBuilder()\n            .forEntity(MyEntity.class)\n\
      \            .get()\n            .keyword()\n            .onFields(\"name\"\
      , \"description\")\n            .matching(keyword)\n            .createQuery();\n\
      \n        jakarta.persistence.Query jpaQuery = fullTextEntityManager.createFullTextQuery(luceneQuery,\
      \ MyEntity.class);\n        jpaQuery.getResultList();\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.enterprise.context.ApplicationScoped;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\nimport org.apache.lucene.search.Query;\n\
      \n@ApplicationScoped\npublic class SearchService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void performSearch(String\
      \ keyword) {\n        SearchSession searchSession = Search.session(entityManager);\n\
      \        Query luceneQuery = searchSession.search(MyEntity.class)\n        \
      \    .where(f -> f.match()\n                .fields(\"name\", \"description\"\
      )\n                .matching(keyword))\n            .toQuery();\n\n        jakarta.persistence.Query\
      \ jpaQuery = searchSession.createScope(MyEntity.class)\n            .createQuery(luceneQuery,\
      \ MyEntity.class);\n        jpaQuery.getResultList();\n    }\n}"
    '# konveyor_guidance': "The equivalent to Hibernate Search 5’s `FullTextEntityManager/FullTextSession`\
      \ is Hibernate Search 6’s `SearchSession`. Check link for guide\n to switch\
      \ implementation to `SearchSession`."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00920
  description: Full text queries now done via SDL - FullTextQueries have changed
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Full text queries now done via SDL - FullTextQueries have changed
    code_snippet: "import org.hibernate.search.jpa.FullTextEntityManager;\nimport\
      \ org.hibernate.search.jpa.Search;\nimport javax.persistence.EntityManager;\n\
      import org.apache.lucene.search.Query;\nimport org.hibernate.search.query.dsl.QueryBuilder;\n\
      \npublic class OldSearchExample {\n\n    private EntityManager entityManager;\n\
      \n    public void performSearch(String searchTerm) {\n        FullTextEntityManager\
      \ fullTextEntityManager = Search.getFullTextEntityManager(entityManager);\n\
      \        QueryBuilder queryBuilder = fullTextEntityManager.getSearchFactory()\n\
      \            .buildQueryBuilder().forEntity(Book.class).get();\n        Query\
      \ luceneQuery = queryBuilder\n            .keyword()\n            .onFields(\"\
      title\", \"author\")\n            .matching(searchTerm)\n            .createQuery();\n\
      \n        javax.persistence.Query jpaQuery = fullTextEntityManager.createFullTextQuery(luceneQuery,\
      \ Book.class);\n        jpaQuery.getResultList();\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\n\npublic class\
      \ OldSearchExample {\n\n    private EntityManager entityManager;\n\n    public\
      \ void performSearch(String searchTerm) {\n        SearchSession searchSession\
      \ = Search.session(entityManager);\n\n        searchSession.search(Book.class)\n\
      \            .where(f -> f.match()\n                .fields(\"title\", \"author\"\
      )\n                .matching(searchTerm))\n            .fetchAllHits();\n  \
      \  }\n\n    // Assuming Book is a stub class to be defined elsewhere as per\
      \ rule 3\n    public static class Book {\n    }\n}"
    '# konveyor_guidance': "Search APIs have changed significantly in order to implement\
      \ several improvements. The recommended way to build search\n queries in Hibernate\
      \ Search 6 is through the Hibernate Search DSL. See link for a thorough explanation\
      \ and examples."
    test_code: "// Stub for Book\npublic class Book {\n    private Long id;\n    private\
      \ String name;\n\n    public Book() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: trivial
- rule_id: hibernate-search-00930
  description: Full text queries now done via SDL - Lucene queries replaced with search
    predicates
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Full text queries now done via SDL - Lucene queries replaced with search
      predicates
    code_snippet: "import org.hibernate.search.jpa.FullTextEntityManager;\nimport\
      \ org.hibernate.search.jpa.Search;\nimport org.hibernate.search.query.dsl.QueryBuilder;\n\
      import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      \npublic class BookSearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void searchBooks(String keyword) {\n        FullTextEntityManager\
      \ fullTextEntityManager = Search.getFullTextEntityManager(entityManager);\n\
      \        QueryBuilder queryBuilder = fullTextEntityManager.getSearchFactory()\n\
      \            .buildQueryBuilder().forEntity(Book.class).get();\n        org.apache.lucene.search.Query\
      \ luceneQuery = queryBuilder\n            .keyword()\n            .onFields(\"\
      title\", \"author\")\n            .matching(keyword)\n            .createQuery();\n\
      \n        javax.persistence.Query jpaQuery = fullTextEntityManager.createFullTextQuery(luceneQuery,\
      \ Book.class);\n        jpaQuery.getResultList();\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import org.hibernate.search.engine.search.query.SearchQuery;\n\nimport java.util.List;\n\
      \npublic class BookSearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public List<Book> searchBooks(String keyword) {\n  \
      \      SearchSession searchSession = Search.session(entityManager);\n      \
      \  SearchQuery<Book> searchQuery = searchSession.search(Book.class)\n      \
      \      .where(f -> f.match()\n                .fields(\"title\", \"author\"\
      )\n                .matching(keyword))\n            .toQuery();\n\n        return\
      \ searchQuery.fetchAll().hits();\n    }\n}"
    '# konveyor_guidance': Lucene queries are replaced with Lucene-independent "search
      predicates" in Hibernate Search 6. See link for guide and examples.
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00940
  description: Full text queries now done via DSL - Sort fields replaced with search
    sorts
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Full text queries now done via DSL - Sort fields replaced with search
      sorts
    code_snippet: "import org.hibernate.search.jpa.FullTextEntityManager;\nimport\
      \ org.hibernate.search.jpa.Search;\nimport org.hibernate.search.query.dsl.QueryBuilder;\n\
      import org.hibernate.search.query.dsl.sort.SortFieldContext;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\npublic class OldSearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void performSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        QueryBuilder queryBuilder\
      \ = fullTextEntityManager.getSearchFactory()\n            .buildQueryBuilder().forEntity(Book.class).get();\n\
      \        \n        org.apache.lucene.search.Query luceneQuery = queryBuilder\n\
      \            .keyword()\n            .onFields(\"title\", \"author\")\n    \
      \        .matching(\"Java\")\n            .createQuery();\n\n        SortFieldContext\
      \ sortFieldContext = queryBuilder\n            .sort()\n            .byField(\"\
      publishedDate\")\n            .createSort();\n\n        org.apache.lucene.search.Sort\
      \ sort = new org.apache.lucene.search.Sort(sortFieldContext);\n\n        fullTextEntityManager.createFullTextQuery(luceneQuery,\
      \ Book.class)\n            .setSort(sort)\n            .getResultList();\n \
      \   }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import org.hibernate.search.engine.search.query.SearchQuery;\nimport org.hibernate.search.engine.search.sort.dsl.SortOrder;\n\
      \npublic class OldSearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void performSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n\n        SearchQuery<Book>\
      \ searchQuery = searchSession.search(Book.class)\n            .where(f -> f.match()\n\
      \                .fields(\"title\", \"author\")\n                .matching(\"\
      Java\"))\n            .sort(f -> f.field(\"publishedDate\").order(SortOrder.ASC))\n\
      \            .toQuery();\n\n        searchQuery.fetchAllHits();\n    }\n}"
    '# konveyor_guidance': Lucene sort fields are replaced with Lucene-independent
      "search sorts" in Hibernate Search 6. Follow the link for more info and examples.
    test_code: "// Stub for Book\npublic class Book {\n    private Long id;\n    private\
      \ String name;\n\n    public Book() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00950
  description: ProjectionConstants no longer available
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: ProjectionConstants no longer available
    code_snippet: "import org.hibernate.search.ProjectionConstants;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\npublic class OldSearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void performSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        List<Object[]>\
      \ results = fullTextEntityManager.createFullTextQuery(\n            fullTextEntityManager.getSearchFactory().buildQueryBuilder().forEntity(Book.class).get()\n\
      \                .keyword()\n                .onField(\"title\")\n         \
      \       .matching(\"Java\")\n                .createQuery(), Book.class)\n \
      \           .setProjection(ProjectionConstants.THIS, ProjectionConstants.SCORE)\n\
      \            .getResultList();\n\n        for (Object[] result : results) {\n\
      \            Book book = (Book) result[0];\n            Float score = (Float)\
      \ result[1];\n            System.out.println(\"Found: \" + book.getTitle() +\
      \ \", Score: \" + score);\n        }\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import org.hibernate.search.engine.search.query.SearchQuery;\nimport org.hibernate.search.engine.search.projection.SearchProjection;\n\
      import org.hibernate.search.engine.search.projection.dsl.ProjectionFinalStep;\n\
      \nimport java.util.List;\n\npublic class OldSearchService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void performSearch()\
      \ {\n        SearchSession searchSession = Search.session(entityManager);\n\n\
      \        SearchProjection<Object[]> projection = searchSession.scope(Book.class)\n\
      \            .projection()\n            .fields(\"title\", \"score\")\n    \
      \        .asArray();\n\n        SearchQuery<Object[]> query = searchSession.search(Book.class)\n\
      \            .where(f -> f.match()\n                .field(\"title\")\n    \
      \            .matching(\"Java\"))\n            .select(projection)\n       \
      \     .toQuery();\n\n        List<Object[]> results = query.fetchAll().hits();\n\
      \n        for (Object[] result : results) {\n            Book book = (Book)\
      \ result[0];\n            Float score = (Float) result[1];\n            System.out.println(\"\
      Found: \" + book.getTitle() + \", Score: \" + score);\n        }\n    }\n}"
    '# konveyor_guidance': The `ProjectionConstants` are no longer available, and
      Hibernate Search 6's DSL must be used instead to build `SearchProjection` objects.
      Follow link for more information and examples.
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00960
  description: Full text queries now done via SDL - Facets now called aggregations
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Full text queries now done via SDL - Facets now called aggregations
    code_snippet: "import org.hibernate.search.query.dsl.QueryBuilder;\nimport org.hibernate.search.query.facet.Facet;\n\
      import org.hibernate.search.query.facet.FacetingRequest;\n\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\npublic class FacetSearchExample\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void performFacetSearch() {\n        org.hibernate.search.jpa.FullTextEntityManager\
      \ fullTextEntityManager = \n            org.hibernate.search.jpa.Search.getFullTextEntityManager(entityManager);\n\
      \n        QueryBuilder queryBuilder = fullTextEntityManager.getSearchFactory()\n\
      \            .buildQueryBuilder().forEntity(Book.class).get();\n\n        FacetingRequest\
      \ authorFacetRequest = queryBuilder.facet()\n            .name(\"authorFacet\"\
      )\n            .onField(\"author\")\n            .discrete()\n            .createFacetingRequest();\n\
      \n        org.hibernate.search.jpa.FullTextQuery fullTextQuery = \n        \
      \    fullTextEntityManager.createFullTextQuery(queryBuilder.all().createQuery());\n\
      \n        fullTextQuery.getFacetManager().enableFaceting(authorFacetRequest);\n\
      \n        List<Facet> facets = fullTextQuery.getFacetManager().getFacets(\"\
      authorFacet\");\n        facets.forEach(facet -> System.out.println(facet.getValue()\
      \ + \" - \" + facet.getCount()));\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import org.hibernate.search.engine.search.query.SearchQuery;\nimport org.hibernate.search.engine.search.aggregation.AggregationKey;\n\
      import org.hibernate.search.engine.search.common.ValueConvert;\nimport org.hibernate.search.engine.search.aggregation.dsl.TermsAggregationOptionsStep;\n\
      \nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import java.util.List;\nimport java.util.Map;\n\npublic class FacetSearchExample\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void performFacetSearch() {\n        SearchSession searchSession\
      \ = Search.session(entityManager);\n\n        TermsAggregationOptionsStep<?>\
      \ authorAggregation = searchSession.search(Book.class)\n            .aggregation().terms(\"\
      authorFacet\", f -> f.field(\"author\", String.class)\n            .minDocumentCount(1)\n\
      \            .maxTermCount(10));\n\n        SearchQuery<Book> query = searchSession.search(Book.class)\n\
      \            .where(f -> f.matchAll())\n            .aggregation(AggregationKey.of(\"\
      authorFacet\"), authorAggregation)\n            .toQuery();\n\n        Map<AggregationKey<?>,\
      \ ?> aggregationResults = query.fetchAll().aggregations();\n        Map<String,\
      \ Long> authorCounts = (Map<String, Long>) aggregationResults.get(AggregationKey.of(\"\
      authorFacet\"));\n        \n        authorCounts.forEach((author, count) ->\
      \ System.out.println(author + \" - \" + count));\n    }\n}"
    '# konveyor_guidance': Facets are now called aggregations, which are a generalization
      of the concept of faceting. See link for more information and examples.
    test_code: "// Stub for Book\npublic class Book {\n    private Long id;\n    private\
      \ String name;\n\n    public Book() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00970
  description: ErrorHandler API no longer available
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: ErrorHandler API no longer available
    code_snippet: "import org.hibernate.search.exception.ErrorHandler;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\n\npublic class LegacySearchConfigurator\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void configureSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        fullTextEntityManager.setFlushMode(FlushModeType.COMMIT);\n\
      \        fullTextEntityManager.setExceptionHandler(new CustomErrorHandler());\n\
      \    }\n\n    private static class CustomErrorHandler implements ErrorHandler\
      \ {\n        @Override\n        public void handle(ErrorContext context) {\n\
      \            System.err.println(\"Error handling not supported anymore.\");\n\
      \        }\n\n        @Override\n        public void handleException(String\
      \ errorMsg, Throwable t) {\n            System.err.println(\"Failed: \" + errorMsg);\n\
      \            t.printStackTrace();\n        }\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.reporting.FailureHandler;\n\
      import org.hibernate.search.engine.reporting.FailureContext;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\nimport jakarta.transaction.Transactional;\n\
      \npublic class LegacySearchConfigurator {\n\n    @PersistenceContext\n    private\
      \ EntityManager entityManager;\n\n    @Transactional\n    public void configureSearch()\
      \ {\n        FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager(entityManager);\n\
      \        fullTextEntityManager.setFlushMode(FlushModeType.COMMIT);\n       \
      \ fullTextEntityManager.setFailureHandler(new CustomFailureHandler());\n   \
      \ }\n\n    private static class CustomFailureHandler implements FailureHandler\
      \ {\n        @Override\n        public void handle(FailureContext context) {\n\
      \            Throwable t = context.getThrowable();\n            String errorMsg\
      \ = context.getFailingOperation().orElse(\"Unknown operation\");\n         \
      \   System.err.println(\"Failed: \" + errorMsg);\n            if (t != null)\
      \ {\n                t.printStackTrace();\n            }\n        }\n    }\n\
      }"
    '# konveyor_guidance': The ErrorHandler interface and API have been replaced with
      the `FailureHandler` interface, and the related configuration properties changed.
      See link for more information and examples.
    test_code: "// Stub for FailureContext\npublic class FailureContext {\n    private\
      \ Long id;\n    private String name;\n\n    public FailureContext() {}\n\n \
      \   public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for ErrorContext\npublic class ErrorContext\
      \ {\n    private Long id;\n    private String name;\n\n    public ErrorContext()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for EntityManager\n\
      public class EntityManager {\n    private Long id;\n    private String name;\n\
      \n    public EntityManager() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}"
  migration_complexity: low
- rule_id: hibernate-search-00980
  description: The @Factory annotation is not available anymore
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The @Factory annotation is not available anymore
    code_snippet: "import org.hibernate.search.annotations.Factory;\nimport org.hibernate.search.annotations.Indexed;\n\
      \n@Indexed\npublic class BookFactory {\n\n    private String title;\n    private\
      \ String author;\n\n    public BookFactory(String title, String author) {\n\
      \        this.title = title;\n        this.author = author;\n    }\n\n    @Factory\n\
      \    public BookFactory createBookFactory() {\n        return new BookFactory(\"\
      Effective Java\", \"Joshua Bloch\");\n    }\n\n    // Getters and Setters\n\
      \    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n\n    public\
      \ String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String\
      \ author) {\n        this.author = author;\n    }\n}"
    expected_fix: "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Named;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      \n@Indexed\n@ApplicationScoped\n@Named(\"bookFactory\")\npublic class BookFactory\
      \ {\n\n    private String title;\n    private String author;\n\n    public BookFactory()\
      \ {\n        this.title = \"Effective Java\";\n        this.author = \"Joshua\
      \ Bloch\";\n    }\n\n    // Getters and Setters\n    public String getTitle()\
      \ {\n        return title;\n    }\n\n    public void setTitle(String title)\
      \ {\n        this.title = title;\n    }\n\n    public String getAuthor() {\n\
      \        return author;\n    }\n\n    public void setAuthor(String author) {\n\
      \        this.author = author;\n    }\n}"
    '# konveyor_guidance': "The @Factory annotation does not exist in Hibernate Search\
      \ 6 anymore. It is encouraged instead to rely on a proper dependency injection\
      \ framework if such a feature is needed.\n This can be done by referencing the\
      \ bean name instead of referencing the bean class in your Hibernate Search mapping/configuration.\
      \ See link for more information."
  migration_complexity: low
- rule_id: hibernate-search-00990
  description: org.hibernate.search.exception.SearchException has been moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: org.hibernate.search.exception.SearchException has been moved
    code_snippet: "import org.hibernate.search.exception.SearchException;\nimport\
      \ jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      \n@jakarta.enterprise.context.ApplicationScoped\npublic class SearchService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void performSearch(String query) {\n        try {\n            //\
      \ Simulated search operation that might throw the outdated SearchException\n\
      \            if (query.equals(\"error\")) {\n                throw new SearchException(\"\
      Search failed due to an error.\");\n            }\n            System.out.println(\"\
      Search completed successfully.\");\n        } catch (SearchException e) {\n\
      \            System.err.println(\"Error during search: \" + e.getMessage());\n\
      \        }\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.search.query.SearchQuery;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\n\
      public class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void performSearch(String query) {\n        try\
      \ {\n            // Simulated search operation that might throw an exception\n\
      \            if (query.equals(\"error\")) {\n                throw new RuntimeException(\"\
      Search failed due to an error.\");\n            }\n            System.out.println(\"\
      Search completed successfully.\");\n        } catch (RuntimeException e) {\n\
      \            System.err.println(\"Error during search: \" + e.getMessage());\n\
      \        }\n    }\n}"
    '# konveyor_guidance': '`org.hibernate.search.exception.SearchException` has been
      moved to `org.hibernate.search.util.common.SearchException`.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for SearchException\npublic class SearchException {\n    private Long\
      \ id;\n    private String name;\n\n    public SearchException() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for EntityManager\npublic class\
      \ EntityManager {\n    private Long id;\n    private String name;\n\n    public\
      \ EntityManager() {}\n\n    public Long getId() { return id; }\n    public void\
      \ setId(Long id) { this.id = id; }\n    public String getName() { return name;\
      \ }\n    public void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-01000
  description: Sharding has changed in Hibernate Search 6
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Sharding has changed in Hibernate Search 6
    code_snippet: "import org.hibernate.search.annotations.Indexed;\nimport org.hibernate.search.annotations.ShardKey;\n\
      import org.hibernate.search.annotations.Field;\nimport javax.persistence.Entity;\n\
      import javax.persistence.Id;\n\n@Entity\n@Indexed\npublic class Book {\n\n \
      \   @Id\n    private Integer id;\n\n    @Field\n    private String title;\n\n\
      \    @ShardKey\n    private String genre;\n\n    public Book() {\n    }\n\n\
      \    // Getters and Setters\n    public Integer getId() {\n        return id;\n\
      \    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\
      \n    public String getTitle() {\n        return title;\n    }\n\n    public\
      \ void setTitle(String title) {\n        this.title = title;\n    }\n\n    public\
      \ String getGenre() {\n        return genre;\n    }\n\n    public void setGenre(String\
      \ genre) {\n        this.genre = genre;\n    }\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.DocumentId;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;\n\
      \n@Entity\n@Indexed\npublic class Book {\n\n    @Id\n    @DocumentId\n    private\
      \ Integer id;\n\n    @GenericField\n    private String title;\n\n    @IndexedEmbedded\n\
      \    private String genre;\n\n    public Book() {\n    }\n\n    // Getters and\
      \ Setters\n    public Integer getId() {\n        return id;\n    }\n\n    public\
      \ void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String\
      \ getTitle() {\n        return title;\n    }\n\n    public void setTitle(String\
      \ title) {\n        this.title = title;\n    }\n\n    public String getGenre()\
      \ {\n        return genre;\n    }\n\n    public void setGenre(String genre)\
      \ {\n        this.genre = genre;\n    }\n}"
    '# konveyor_guidance': "Static sharding is still available in Hibernate Search\
      \ 6, but it works differently, so the Hibernate Search 5 APIs are no longer\
      \ available.\n To implement static sharding in Hibernate Search 6, refer to\
      \ the link."
  migration_complexity: low
- rule_id: hibernate-search-01010
  description: SearchFactory is no longer available
  severity: medium
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: SearchFactory is no longer available
    code_snippet: "import org.hibernate.search.SearchFactory;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\npublic class SearchService {\n\
      \n    @PersistenceContext\n    private EntityManager entityManager;\n\n    public\
      \ void performSearch() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        SearchFactory searchFactory\
      \ = fullTextEntityManager.getSearchFactory();\n        // Use the SearchFactory\
      \ to create queries, etc.\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      \npublic class SearchService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void performSearch() {\n        SearchSession\
      \ searchSession = Search.session(entityManager);\n        // Use the SearchSession\
      \ to create queries, etc.\n    }\n}"
    '# konveyor_guidance': "The equivalent to Hibernate Search 5’s SearchFactory is\
      \ Hibernate Search 6’s SearchMapping, but some operations are more conveniently\
      \ accessible directly from SearchSession.\n Check the link for more information\
      \ and examples."
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-01020
  description: MassIndexer has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: MassIndexer has moved
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import javax.persistence.EntityManager;\nimport org.hibernate.search.jpa.FullTextEntityManager;\n\
      import org.hibernate.search.jpa.Search;\n\n@ApplicationScoped\npublic class\
      \ IndexingService {\n\n    @Inject\n    EntityManager entityManager;\n\n   \
      \ public void reindexAll() {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        org.hibernate.search.batchindexing.MassIndexer\
      \ indexer = fullTextEntityManager.createIndexer();\n        try {\n        \
      \    indexer.startAndWait();\n        } catch (InterruptedException e) {\n \
      \           Thread.currentThread().interrupt();\n        }\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\
      import javax.persistence.EntityManager;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import org.hibernate.search.mapper.orm.massindexing.MassIndexer;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      \n@ApplicationScoped\npublic class IndexingService {\n\n    @Inject\n    EntityManager\
      \ entityManager;\n\n    public void reindexAll() {\n        SearchSession searchSession\
      \ = Search.session(entityManager);\n        MassIndexer indexer = searchSession.massIndexer();\n\
      \        try {\n            indexer.startAndWait();\n        } catch (InterruptedException\
      \ e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}"
    '# konveyor_guidance': "The MassIndexer mostly stays the same in Hibernate Search\
      \ 6, but it moved to a different package: `org.hibernate.search.mapper.orm.massindexing.MassIndexer`.\n\
      \ There are some other changes that can be checked by following the link."
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for InterruptedException\npublic class InterruptedException {\n  \
      \  private Long id;\n    private String name;\n\n    public InterruptedException()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-01030
  description: MassIndexer has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: MassIndexer has moved
    code_snippet: "import org.hibernate.search.batch.jsr352.massindexing.MassIndexingJob;\n\
      import javax.batch.runtime.BatchRuntime;\nimport javax.batch.runtime.JobExecution;\n\
      import javax.batch.runtime.JobOperator;\nimport java.util.Properties;\n\npublic\
      \ class BatchIndexing {\n\n    public void startMassIndexing() {\n        JobOperator\
      \ jobOperator = BatchRuntime.getJobOperator();\n        Properties jobParams\
      \ = new Properties();\n        jobParams.setProperty(\"entityType\", \"com.example.MyEntity\"\
      );\n\n        long executionId = jobOperator.start(MassIndexingJob.NAME, jobParams);\n\
      \        JobExecution jobExecution = jobOperator.getJobExecution(executionId);\n\
      \n        System.out.println(\"Job Status: \" + jobExecution.getBatchStatus());\n\
      \    }\n}"
    expected_fix: "import org.hibernate.search.batch.jsr352.core.massindexing.MassIndexingJob;\n\
      import jakarta.batch.runtime.BatchRuntime;\nimport jakarta.batch.runtime.JobExecution;\n\
      import jakarta.batch.operations.JobOperator;\nimport java.util.Properties;\n\
      \npublic class BatchIndexing {\n\n    public void startMassIndexing() {\n  \
      \      JobOperator jobOperator = BatchRuntime.getJobOperator();\n        Properties\
      \ jobParams = new Properties();\n        jobParams.setProperty(\"entityType\"\
      , \"com.example.MyEntity\");\n\n        long executionId = jobOperator.start(\"\
      mass-indexing\", jobParams); // Assuming \"mass-indexing\" is the correct job\
      \ name\n        JobExecution jobExecution = jobOperator.getJobExecution(executionId);\n\
      \n        System.out.println(\"Job Status: \" + jobExecution.getBatchStatus());\n\
      \    }\n}"
    '# konveyor_guidance': 'The mass indexing Batch (JSR-352) job mostly stays the
      same in Hibernate Search 6, but `MassIndexingJob` moved to a different package:
      `org.hibernate.search.batch.jsr352.core.massindexing.MassIndexingJob`.'
  migration_complexity: trivial
- rule_id: hibernate-search-01040
  description: Dependency must be migrated from Hibernate Search 5 to 6
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/153-hibernate-search.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Dependency must be migrated from Hibernate Search 5 to 6
    code_snippet: "import org.hibernate.search.jpa.FullTextEntityManager;\nimport\
      \ org.hibernate.search.jpa.Search;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\npublic class SearchService {\n\
      \n    @PersistenceContext\n    private EntityManager entityManager;\n\n    public\
      \ void performSearch(String keyword) {\n        FullTextEntityManager fullTextEntityManager\
      \ = Search.getFullTextEntityManager(entityManager);\n        org.hibernate.search.query.dsl.QueryBuilder\
      \ queryBuilder = fullTextEntityManager.getSearchFactory()\n            .buildQueryBuilder().forEntity(Book.class).get();\n\
      \        org.apache.lucene.search.Query query = queryBuilder\n            .keyword()\n\
      \            .onFields(\"title\", \"author\")\n            .matching(keyword)\n\
      \            .createQuery();\n\n        org.hibernate.search.jpa.FullTextQuery\
      \ jpaQuery = fullTextEntityManager.createFullTextQuery(query, Book.class);\n\
      \        jpaQuery.getResultList();\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import org.hibernate.search.mapper.orm.common.EntityReference;\nimport org.hibernate.search.mapper.orm.scope.SearchScope;\n\
      import org.hibernate.search.mapper.orm.search.query.SearchQuery;\n\npublic class\
      \ SearchService {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\
      \n    public void performSearch(String keyword) {\n        SearchSession searchSession\
      \ = Search.session(entityManager);\n        SearchScope<Book> scope = searchSession.scope(Book.class);\n\
      \        \n        SearchQuery<Book> query = scope.search()\n            .where(f\
      \ -> f.match()\n                .fields(\"title\", \"author\")\n           \
      \     .matching(keyword))\n            .toQuery();\n\n        query.fetchHits(20);\
      \ // Example to fetch 20 hits. Adjust as necessary.\n    }\n}"
    '# konveyor_guidance': Hibernate Search 6 uses the groupId `org.hibernate.search`
      and all dependencies must be updated
    test_code: "// Stub for Book\npublic class Book {\n    private Long id;\n    private\
      \ String name;\n\n    public Book() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00010
  description: Hibernate Search 6.1.* now requires using Hibernate ORM versions from
    the 5.6.x family.
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Hibernate Search 6.1.* now requires using Hibernate ORM versions from
      the 5.6.x family.
    code_snippet: "import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.Persistence;\n\
      \npublic class SearchService {\n\n    private EntityManager entityManager;\n\
      \n    public SearchService() {\n        this.entityManager = Persistence.createEntityManagerFactory(\"\
      myUnit\").createEntityManager();\n    }\n\n    public void performSearch() {\n\
      \        SearchSession searchSession = Search.session(entityManager);\n    \
      \    searchSession.search(Book.class)\n                     .where(f -> f.match()\n\
      \                                  .fields(\"title\", \"author\")\n        \
      \                          .matching(\"Java\"))\n                     .fetchHits(10);\n\
      \    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.Persistence;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport org.hibernate.search.mapper.orm.session.SearchSession;\n\
      \npublic class SearchService {\n\n    private EntityManager entityManager;\n\
      \n    public SearchService() {\n        // Ensure that the Hibernate ORM version\
      \ is compatible as per the guidance\n        this.entityManager = Persistence.createEntityManagerFactory(\"\
      myUnit\").createEntityManager();\n    }\n\n    public void performSearch() {\n\
      \        SearchSession searchSession = Search.session(entityManager);\n    \
      \    searchSession.search(Book.class)\n                     .where(f -> f.match()\n\
      \                                  .fields(\"title\", \"author\")\n        \
      \                          .matching(\"Java\"))\n                     .fetchHits(10);\n\
      \    }\n}"
    '# konveyor_guidance': Hibernate Search 6.1.x now requires using Hibernate ORM
      versions from the 5.6.x family.
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00020
  description: org.hibernate.search.engine.cfg.spi.ConfigurationPropertySource has
    moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: org.hibernate.search.engine.cfg.spi.ConfigurationPropertySource has moved
    code_snippet: "import org.hibernate.search.engine.cfg.spi.ConfigurationPropertySource;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport jakarta.persistence.EntityManager;\n\
      \n@ApplicationScoped\npublic class SearchConfigurator {\n\n    @Inject\n   \
      \ private EntityManager entityManager;\n\n    public void configureSearch()\
      \ {\n        ConfigurationPropertySource propertySource = Search.mapping(entityManager)\n\
      \            .configurationPropertySource();\n        // Configuration using\
      \ the old ConfigurationPropertySource location\n        propertySource.get(\"\
      hibernate.search.backends.lucene.version\").asString();\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.cfg.ConfigurationPropertySource;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\n\
      \n@ApplicationScoped\npublic class SearchConfigurator {\n\n    @Inject\n   \
      \ private EntityManager entityManager;\n\n    public void configureSearch()\
      \ {\n        ConfigurationPropertySource propertySource = Search.mapping(entityManager)\n\
      \            .configurationPropertySource();\n        // Configuration using\
      \ the new ConfigurationPropertySource location\n        propertySource.get(\"\
      hibernate.search.backends.lucene.version\").asString();\n    }\n}"
    '# konveyor_guidance': '`org.hibernate.search.engine.cfg.spi.ConfigurationPropertySource`
      has been moved to `org.hibernate.search.engine.cfg.ConfigurationPropertySource`.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00030
  description: org.hibernate.search.backend.elasticsearch.client.spi.ElasticsearchHttpClientConfigurer
    has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: org.hibernate.search.backend.elasticsearch.client.spi.ElasticsearchHttpClientConfigurer
      has moved
    code_snippet: "import org.hibernate.search.backend.elasticsearch.client.spi.ElasticsearchHttpClientConfigurer;\n\
      import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n\npublic class\
      \ CustomElasticsearchConfigurer implements ElasticsearchHttpClientConfigurer\
      \ {\n\n    @Override\n    public void configure(HttpAsyncClientBuilder httpClientBuilder)\
      \ {\n        // Custom configuration for the Elasticsearch HTTP client\n   \
      \     httpClientBuilder.setMaxConnTotal(30);\n        httpClientBuilder.setMaxConnPerRoute(10);\n\
      \    }\n}"
    expected_fix: "import org.hibernate.search.backend.elasticsearch.client.ElasticsearchHttpClientConfigurer;\n\
      import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n\npublic class\
      \ CustomElasticsearchConfigurer implements ElasticsearchHttpClientConfigurer\
      \ {\n\n    @Override\n    public void configure(HttpAsyncClientBuilder httpClientBuilder)\
      \ {\n        // Custom configuration for the Elasticsearch HTTP client\n   \
      \     httpClientBuilder.setMaxConnTotal(30);\n        httpClientBuilder.setMaxConnPerRoute(10);\n\
      \    }\n}"
    '# konveyor_guidance': '`org.hibernate.search.backend.elasticsearch.client.spi.ElasticsearchHttpClientConfigurer`
      moved to `org.hibernate.search.backend.elasticsearch.client.ElasticsearchHttpClientConfigurer`
      and is now an API.'
    test_code: "// Stub for HttpAsyncClientBuilder\npublic class HttpAsyncClientBuilder\
      \ {\n    private Long id;\n    private String name;\n\n    public HttpAsyncClientBuilder()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00040
  description: org.hibernate.search.backend.elasticsearch.client.spi.ElasticsearchHttpClientConfigurationContext
    has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: org.hibernate.search.backend.elasticsearch.client.spi.ElasticsearchHttpClientConfigurationContext
      has moved
    code_snippet: "import org.hibernate.search.backend.elasticsearch.client.spi.ElasticsearchHttpClientConfigurationContext;\n\
      import org.hibernate.search.engine.cfg.ConfigurationPropertySource;\nimport\
      \ org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n\npublic class ElasticsearchConfiguration\
      \ {\n\n    public void configureElasticsearch(ConfigurationPropertySource source)\
      \ {\n        ElasticsearchHttpClientConfigurationContext configurationContext\
      \ = new ElasticsearchHttpClientConfigurationContext() {\n            @Override\n\
      \            public void configure(HttpAsyncClientBuilder httpClientBuilder)\
      \ {\n                // Custom configuration for the HTTP client\n         \
      \       httpClientBuilder.setMaxConnTotal(30);\n                httpClientBuilder.setMaxConnPerRoute(10);\n\
      \            }\n        };\n\n        // Apply the configuration\n        configurationContext.configure(HttpAsyncClientBuilder.create());\n\
      \    }\n}"
    expected_fix: "import org.hibernate.search.backend.elasticsearch.client.ElasticsearchHttpClientConfigurationContext;\n\
      import org.hibernate.search.engine.cfg.ConfigurationPropertySource;\nimport\
      \ org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n\npublic class ElasticsearchConfiguration\
      \ {\n\n    public void configureElasticsearch(ConfigurationPropertySource source)\
      \ {\n        ElasticsearchHttpClientConfigurationContext configurationContext\
      \ = new ElasticsearchHttpClientConfigurationContext() {\n            @Override\n\
      \            public void configure(HttpAsyncClientBuilder httpClientBuilder)\
      \ {\n                // Custom configuration for the HTTP client\n         \
      \       httpClientBuilder.setMaxConnTotal(30);\n                httpClientBuilder.setMaxConnPerRoute(10);\n\
      \            }\n        };\n\n        // Apply the configuration\n        configurationContext.configure(HttpAsyncClientBuilder.create());\n\
      \    }\n}"
    '# konveyor_guidance': '`org.hibernate.search.backend.elasticsearch.client.spi.ElasticsearchHttpClientConfigurationContext`
      moved to `org.hibernate.search.backend.elasticsearch.client.ElasticsearchHttpClientConfigurationContext`
      and is now an API.'
    test_code: "// Stub for HttpAsyncClientBuilder\npublic class HttpAsyncClientBuilder\
      \ {\n    private Long id;\n    private String name;\n\n    public HttpAsyncClientBuilder()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for ConfigurationPropertySource\n\
      public class ConfigurationPropertySource {\n    private Long id;\n    private\
      \ String name;\n\n    public ConfigurationPropertySource() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00050
  description: org.hibernate.search.engine.common.timing.spi.Deadline has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: org.hibernate.search.engine.common.timing.spi.Deadline has moved
    code_snippet: "import org.hibernate.search.engine.common.timing.spi.Deadline;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.inject.Inject;\nimport\
      \ jakarta.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic\
      \ class SearchService {\n\n    @Inject\n    private EntityManager entityManager;\n\
      \n    public void performSearchWithDeadline() {\n        Deadline deadline =\
      \ Deadline.now().plus(1, TimeUnit.HOURS);\n        // Simulate a search operation\
      \ using the deadline\n        System.out.println(\"Search operation should complete\
      \ before: \" + deadline.toString());\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.common.timing.Deadline;\nimport\
      \ java.util.concurrent.TimeUnit;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n@ApplicationScoped\npublic class SearchService {\n\n    @Inject\n    private\
      \ EntityManager entityManager;\n\n    public void performSearchWithDeadline()\
      \ {\n        Deadline deadline = Deadline.now().plus(1, TimeUnit.HOURS);\n \
      \       // Simulate a search operation using the deadline\n        System.out.println(\"\
      Search operation should complete before: \" + deadline.toString());\n    }\n\
      }"
    '# konveyor_guidance': '`org.hibernate.search.engine.common.timing.spi.Deadline`
      moved to `org.hibernate.search.engine.common.timing.Deadline` and is now API.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00060
  description: org.hibernate.search.engine.backend.work.execution.spi.IndexIndexingPlanExecutionReport
    has moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: org.hibernate.search.engine.backend.work.execution.spi.IndexIndexingPlanExecutionReport
      has moved
    code_snippet: "import org.hibernate.search.engine.backend.work.execution.spi.IndexIndexingPlanExecutionReport;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.transaction.Transactional;\n\npublic class IndexingService {\n\
      \n    private EntityManager entityManager;\n\n    @Transactional\n    public\
      \ void executeIndexing() {\n        IndexIndexingPlanExecutionReport report\
      \ = Search.session(entityManager)\n                .workspace()\n          \
      \      .report();\n        \n        // Handle the report\n        if (report.hasFailures())\
      \ {\n            System.out.println(\"Indexing failures occurred.\");\n    \
      \    }\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.backend.work.execution.spi.MultiEntityOperationExecutionReport;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.transaction.Transactional;\n\npublic class IndexingService {\n\
      \n    private EntityManager entityManager;\n\n    @Transactional\n    public\
      \ void executeIndexing() {\n        MultiEntityOperationExecutionReport report\
      \ = Search.session(entityManager)\n                .workspace()\n          \
      \      .report();\n        \n        // Handle the report\n        if (report.hasFailures())\
      \ {\n            System.out.println(\"Indexing failures occurred.\");\n    \
      \    }\n    }\n}"
    '# konveyor_guidance': '`org.hibernate.search.engine.backend.work.execution.spi.IndexIndexingPlanExecutionReport`
      is now `org.hibernate.search.engine.backend.work.execution.spi.MultiEntityOperationExecutionReport`.'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00070
  description: URLEncodedString#fromJsonString was removed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: URLEncodedString#fromJsonString was removed
    code_snippet: "import org.hibernate.search.engine.reporting.spi.EventContexts;\n\
      import org.hibernate.search.util.common.impl.URLEncodedString;\n\npublic class\
      \ SearchService {\n\n    public void processJsonString(String json) {\n    \
      \    URLEncodedString encodedString = URLEncodedString.fromJsonString(json);\n\
      \        System.out.println(\"Encoded URL from JSON: \" + encodedString);\n\
      \    }\n}"
    expected_fix: "import org.hibernate.search.engine.reporting.spi.EventContexts;\n\
      import java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\npublic\
      \ class SearchService {\n\n    public void processJsonString(String json) {\n\
      \        String encodedString = URLEncoder.encode(json, StandardCharsets.UTF_8);\n\
      \        System.out.println(\"Encoded URL from JSON: \" + encodedString);\n\
      \    }\n}"
    '# konveyor_guidance': '`URLEncodedString#fromJsonString` must be removed.'
  migration_complexity: low
- rule_id: hibernate-search-6.1-00080
  description: FieldPaths#absolutize(String, String, String) has been removed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: FieldPaths#absolutize(String, String, String) has been removed
    code_snippet: "import org.hibernate.search.engine.search.common.spi.FieldPaths;\n\
      \npublic class SearchService {\n\n    private String indexName;\n    private\
      \ String relativeFieldName;\n    private String absolutePath;\n\n    public\
      \ SearchService(String indexName, String relativeFieldName) {\n        this.indexName\
      \ = indexName;\n        this.relativeFieldName = relativeFieldName;\n      \
      \  initializeAbsolutePath();\n    }\n\n    private void initializeAbsolutePath()\
      \ {\n        // This method call violates the migration rule hibernate-search-6.1-00080\n\
      \        this.absolutePath = FieldPaths.absolutize(indexName, relativeFieldName,\
      \ null);\n    }\n\n    public String getAbsolutePath() {\n        return absolutePath;\n\
      \    }\n}"
    expected_fix: "public class SearchService {\n\n    private String indexName;\n\
      \    private String relativeFieldName;\n    private String absolutePath;\n\n\
      \    public SearchService(String indexName, String relativeFieldName) {\n  \
      \      this.indexName = indexName;\n        this.relativeFieldName = relativeFieldName;\n\
      \        initializeAbsolutePath();\n    }\n\n    private void initializeAbsolutePath()\
      \ {\n        // Adjusted to directly concatenate as FieldPaths#absolutize is\
      \ removed\n        this.absolutePath = indexName + \".\" + relativeFieldName;\n\
      \    }\n\n    public String getAbsolutePath() {\n        return absolutePath;\n\
      \    }\n}"
    '# konveyor_guidance': '`FieldPaths#absolutize(String, String, String)` must be
      removed.'
  migration_complexity: low
- rule_id: hibernate-search-6.1-00090
  description: IndexManagerImplementor#createIndexingPlan has changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: IndexManagerImplementor#createIndexingPlan has changed
    code_snippet: "import org.hibernate.search.mapper.pojo.model.spi.PojoRawTypeIdentifier;\n\
      import org.hibernate.search.mapper.pojo.work.spi.PojoIndexer;\nimport org.hibernate.search.engine.backend.common.spi.EntityReferenceFactory;\n\
      import org.hibernate.search.engine.backend.work.execution.spi.IndexManagerImplementor;\n\
      \npublic class IndexingService {\n    private final IndexManagerImplementor\
      \ indexManager;\n    private final EntityReferenceFactory referenceFactory;\n\
      \n    public IndexingService(IndexManagerImplementor indexManager, EntityReferenceFactory\
      \ referenceFactory) {\n        this.indexManager = indexManager;\n        this.referenceFactory\
      \ = referenceFactory;\n    }\n\n    public void createIndexingPlan() {\n   \
      \     PojoIndexer indexer = indexManager.createIndexingPlan(referenceFactory,\
      \ PojoRawTypeIdentifier.of(MyEntity.class), null, null);\n        // Additional\
      \ indexing operations\n    }\n    \n    static class MyEntity {\n        //\
      \ Entity fields and methods\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.model.spi.PojoRawTypeIdentifier;\n\
      import org.hibernate.search.mapper.pojo.work.spi.PojoIndexer;\nimport org.hibernate.search.engine.backend.work.execution.spi.IndexManagerImplementor;\n\
      \npublic class IndexingService {\n    private final IndexManagerImplementor\
      \ indexManager;\n\n    public IndexingService(IndexManagerImplementor indexManager)\
      \ {\n        this.indexManager = indexManager;\n    }\n\n    public void createIndexingPlan()\
      \ {\n        PojoIndexer indexer = indexManager.createIndexingPlan(PojoRawTypeIdentifier.of(MyEntity.class),\
      \ null, null);\n        // Additional indexing operations\n    }\n    \n   \
      \ static class MyEntity {\n        // Entity fields and methods\n    }\n}"
    '# konveyor_guidance': '`IndexManagerImplementor#createIndexingPlan` no longer
      expects an `EntityReferenceFactory` parameter.'
    test_code: "// Stub for IndexManagerImplementor\npublic class IndexManagerImplementor\
      \ {\n    private Long id;\n    private String name;\n\n    public IndexManagerImplementor()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00100
  description: IndexIndexingPlan#executeAndReport has changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: IndexIndexingPlan#executeAndReport has changed
    code_snippet: "import org.hibernate.search.mapper.orm.session.SearchSession;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n@ApplicationScoped\npublic class SearchIndexer {\n\n    @Inject\n    private\
      \ EntityManager entityManager;\n\n    public void executeIndexing() {\n    \
      \    SearchSession searchSession = Search.session(entityManager);\n        searchSession.indexingPlan().executeAndReport();\
      \ // This line violates the migration rule\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.backend.common.spi.EntityReferenceFactory;\n\
      import org.hibernate.search.mapper.orm.session.SearchSession;\nimport org.hibernate.search.mapper.orm.Search;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.inject.Inject;\nimport\
      \ jakarta.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic\
      \ class SearchIndexer {\n\n    @Inject\n    private EntityManager entityManager;\n\
      \n    public void executeIndexing() {\n        SearchSession searchSession =\
      \ Search.session(entityManager);\n        searchSession.indexingPlan().executeAndReport(EntityReferenceFactory.simple());\
      \ // Fixed according to the migration guidance\n    }\n}"
    '# konveyor_guidance': '`IndexIndexingPlan#executeAndReport` now expects an `EntityReferenceFactory`
      parameter.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00120
  description: IndexSchemaObjectNodeBuilder has changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: IndexSchemaObjectNodeBuilder has changed
    code_snippet: "import org.hibernate.search.engine.backend.document.IndexFieldReference;\n\
      import org.hibernate.search.engine.backend.document.model.dsl.IndexSchemaElement;\n\
      import org.hibernate.search.engine.backend.document.model.dsl.spi.IndexSchemaObjectNodeBuilder;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.DocumentId;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      \n@Indexed\npublic class Book {\n\n    @DocumentId\n    private Integer id;\n\
      \n    @KeywordField\n    private String title;\n\n    public void defineSchema(IndexSchemaElement\
      \ schemaElement) {\n        IndexSchemaObjectNodeBuilder bookNodeBuilder = schemaElement.objectField(\"\
      bookDetails\");\n        IndexFieldReference<String> titleField = bookNodeBuilder.field(\"\
      title\", f -> f.asString()).toReference();\n    }\n\n    // Getters and setters\n\
      \    public Integer getId() {\n        return id;\n    }\n\n    public void\
      \ setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getTitle()\
      \ {\n        return title;\n    }\n\n    public void setTitle(String title)\
      \ {\n        this.title = title;\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.backend.document.IndexFieldReference;\n\
      import org.hibernate.search.engine.backend.document.model.dsl.IndexSchemaElement;\n\
      import org.hibernate.search.engine.backend.document.model.dsl.spi.IndexCompositeNodeBuilder;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.DocumentId;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      \n@Indexed\npublic class Book {\n\n    @DocumentId\n    private Integer id;\n\
      \n    @KeywordField\n    private String title;\n\n    public void defineSchema(IndexSchemaElement\
      \ schemaElement) {\n        IndexCompositeNodeBuilder bookNodeBuilder = schemaElement.objectField(\"\
      bookDetails\");\n        IndexFieldReference<String> titleField = bookNodeBuilder.field(\"\
      title\", f -> f.asString()).toReference();\n    }\n\n    // Getters and setters\n\
      \    public Integer getId() {\n        return id;\n    }\n\n    public void\
      \ setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getTitle()\
      \ {\n        return title;\n    }\n\n    public void setTitle(String title)\
      \ {\n        this.title = title;\n    }\n}"
    '# konveyor_guidance': '`org.hibernate.search.engine.backend.document.model.dsl.spi.IndexSchemaObjectNodeBuilder`
      is now `org.hibernate.search.engine.backend.document.model.dsl.spi.IndexCompositeNodeBuilder`'
    test_code: "// Stub for IndexSchemaElement\npublic class IndexSchemaElement {\n\
      \    private Long id;\n    private String name;\n\n    public IndexSchemaElement()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00130
  description: IndexSchemaObjectNodeBuilder has changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: IndexSchemaObjectNodeBuilder has changed
    code_snippet: "import org.hibernate.search.engine.backend.document.IndexFieldReference;\n\
      import org.hibernate.search.engine.backend.document.model.dsl.IndexSchemaElement;\n\
      import org.hibernate.search.engine.backend.document.model.dsl.spi.IndexSchemaObjectFieldNodeBuilder;\n\
      \npublic class BookIndexer {\n\n    private IndexFieldReference<String> titleField;\n\
      \n    public void mapFields(IndexSchemaElement schemaElement) {\n        IndexSchemaObjectFieldNodeBuilder\
      \ bookNodeBuilder = schemaElement.objectField(\"book\");\n        bookNodeBuilder.field(\"\
      title\", f -> f.asString()).toReference();\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.backend.document.IndexFieldReference;\n\
      import org.hibernate.search.engine.backend.document.model.dsl.IndexSchemaElement;\n\
      import org.hibernate.search.engine.backend.document.model.dsl.spi.IndexObjectFieldBuilder;\n\
      \npublic class BookIndexer {\n\n    private IndexFieldReference<String> titleField;\n\
      \n    public void mapFields(IndexSchemaElement schemaElement) {\n        IndexObjectFieldBuilder\
      \ bookNodeBuilder = schemaElement.objectField(\"book\");\n        titleField\
      \ = bookNodeBuilder.field(\"title\", f -> f.asString()).toReference();\n   \
      \ }\n}"
    '# konveyor_guidance': '`org.hibernate.search.engine.backend.document.model.dsl.spi.IndexSchemaObjectFieldNodeBuilder`
      is now `org.hibernate.search.engine.backend.document.model.dsl.spi.IndexObjectFieldBuilder`'
    test_code: "// Stub for IndexSchemaElement\npublic class IndexSchemaElement {\n\
      \    private Long id;\n    private String name;\n\n    public IndexSchemaElement()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00140
  description: IndexSchemaObjectNodeBuilder has changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: IndexSchemaObjectNodeBuilder has changed
    code_snippet: "import org.hibernate.search.engine.backend.document.model.dsl.spi.IndexSchemaRootNodeBuilder;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinderRef;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinder;\n\
      \n@Indexed\npublic class Book {\n\n    @KeywordField(name = \"title\", binder\
      \ = @TypeBinderRef(type = TitleBinder.class))\n    private String title;\n\n\
      \    public static class TitleBinder implements org.hibernate.search.mapper.pojo.bridge.TypeBinder\
      \ {\n        @Override\n        public void bind(org.hibernate.search.mapper.pojo.bridge.binding.TypeBindingContext\
      \ context) {\n            IndexSchemaRootNodeBuilder indexSchemaRootNodeBuilder\
      \ = context.getIndexSchemaElement();\n            indexSchemaRootNodeBuilder.field(\"\
      title\", f -> f.asString()).toReference();\n        }\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.backend.document.model.dsl.spi.IndexRootBuilder;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;\n\
      import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinderRef;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.TypeBinder;\n\
      \n@Indexed\npublic class Book {\n\n    @KeywordField(name = \"title\", binder\
      \ = @TypeBinderRef(type = TitleBinder.class))\n    private String title;\n\n\
      \    public static class TitleBinder implements org.hibernate.search.mapper.pojo.bridge.TypeBinder\
      \ {\n        @Override\n        public void bind(org.hibernate.search.mapper.pojo.bridge.binding.TypeBindingContext\
      \ context) {\n            IndexRootBuilder indexRootBuilder = context.getIndexSchemaElement();\n\
      \            indexRootBuilder.field(\"title\", f -> f.asString()).toReference();\n\
      \        }\n    }\n}"
    '# konveyor_guidance': '`org.hibernate.search.engine.backend.document.model.dsl.spi.IndexSchemaRootNodeBuilder`
      is now `org.hibernate.search.engine.backend.document.model.dsl.spi.IndexRootBuilder`'
  migration_complexity: low
- rule_id: hibernate-search-6.1-00150
  description: FromDocumentFieldValueConverter has been deprecated
  severity: low
  category: optional
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: FromDocumentFieldValueConverter has been deprecated
    code_snippet: "import org.hibernate.search.engine.backend.document.converter.FromDocumentFieldValueConverter;\n\
      import org.hibernate.search.engine.backend.document.converter.runtime.FromDocumentFieldValueConvertContext;\n\
      \npublic class CustomFieldValueConverter implements FromDocumentFieldValueConverter<String,\
      \ Integer> {\n    @Override\n    public Integer convert(String value, FromDocumentFieldValueConvertContext\
      \ context) {\n        try {\n            return Integer.parseInt(value);\n \
      \       } catch (NumberFormatException e) {\n            return null;\n    \
      \    }\n    }\n\n    @Override\n    public boolean isCompatibleWith(FromDocumentFieldValueConverter<?,\
      \ ?> other) {\n        return getClass().equals(other.getClass());\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.backend.document.converter.FromDocumentValueConverter;\n\
      import org.hibernate.search.engine.backend.document.converter.runtime.FromDocumentValueConvertContext;\n\
      \npublic class CustomFieldValueConverter implements FromDocumentValueConverter<String,\
      \ Integer> {\n    @Override\n    public Integer convert(String value, FromDocumentValueConvertContext\
      \ context) {\n        try {\n            return Integer.parseInt(value);\n \
      \       } catch (NumberFormatException e) {\n            return null;\n    \
      \    }\n    }\n\n    @Override\n    public boolean isCompatibleWith(FromDocumentValueConverter<?,\
      \ ?> other) {\n        return getClass().equals(other.getClass());\n    }\n}"
    '# konveyor_guidance': '`FromDocumentFieldValueConverter` has been deprecated,
      implement `FromDocumentValueConverter` instead.'
    test_code: "// Stub for NumberFormatException\npublic class NumberFormatException\
      \ {\n    private Long id;\n    private String name;\n\n    public NumberFormatException()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00160
  description: ToDocumentFieldValueConverter has been deprecated
  severity: low
  category: optional
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: ToDocumentFieldValueConverter has been deprecated
    code_snippet: "import org.hibernate.search.engine.backend.document.converter.ToDocumentFieldValueConverter;\n\
      import org.hibernate.search.engine.backend.document.IndexFieldReference;\nimport\
      \ org.hibernate.search.mapper.pojo.bridge.mapping.annotation.ValueBridgeRef;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.ValueBridge;\n\
      \n@ValueBridge(ref = @ValueBridgeRef(type = MyCustomValueBridge.class))\npublic\
      \ class MyCustomValueBridge implements ToDocumentFieldValueConverter<String,\
      \ String> {\n\n    @Override\n    public String convert(String value, ValueBridgeToDocumentFieldValueContext\
      \ context) {\n        return value.toLowerCase();\n    }\n\n    @Override\n\
      \    public boolean isCompatibleWith(ToDocumentFieldValueConverter<?, ?> other)\
      \ {\n        return getClass().equals(other.getClass());\n    }\n\n    @Override\n\
      \    public void setConvertedType(IndexFieldReference<String> reference, String\
      \ value) {\n        reference.write(value);\n    }\n}"
    expected_fix: "import org.hibernate.search.engine.backend.document.converter.ToDocumentValueConverter;\n\
      import org.hibernate.search.engine.backend.document.IndexFieldReference;\nimport\
      \ org.hibernate.search.mapper.pojo.bridge.mapping.annotation.ValueBridgeRef;\n\
      import org.hibernate.search.mapper.pojo.bridge.mapping.annotation.ValueBridge;\n\
      import org.hibernate.search.mapper.pojo.bridge.runtime.ValueBridgeToDocumentValueContext;\n\
      \n@ValueBridge(ref = @ValueBridgeRef(type = MyCustomValueBridge.class))\npublic\
      \ class MyCustomValueBridge implements ToDocumentValueConverter<String, String>\
      \ {\n\n    @Override\n    public String convert(String value, ValueBridgeToDocumentValueContext\
      \ context) {\n        return value.toLowerCase();\n    }\n\n    @Override\n\
      \    public boolean isCompatibleWith(ToDocumentValueConverter<?, ?> other) {\n\
      \        return getClass().equals(other.getClass());\n    }\n}"
    '# konveyor_guidance': '`ToDocumentFieldValueConverter` has been deprecated, implement
      `ToDocumentValueConverter` instead.'
  migration_complexity: low
- rule_id: hibernate-search-6.1-00170
  description: MassIndexingFailureHandler has been deprecated
  severity: low
  category: optional
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: MassIndexingFailureHandler has been deprecated
    code_snippet: "import org.hibernate.search.mapper.orm.massindexing.MassIndexer;\n\
      import org.hibernate.search.mapper.orm.massindexing.MassIndexingFailureHandler;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      \n@ApplicationScoped\npublic class LegacyIndexingService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void startIndexing()\
      \ {\n        MassIndexer indexer = org.hibernate.search.mapper.orm.Search.session(entityManager).massIndexer();\n\
      \        indexer.failureHandler(new CustomMassIndexingFailureHandler());\n \
      \       indexer.start();\n    }\n\n    private static class CustomMassIndexingFailureHandler\
      \ implements MassIndexingFailureHandler {\n        @Override\n        public\
      \ void handle(MassIndexingFailureContext context) {\n            System.err.println(\"\
      Indexing failed: \" + context.getThrowable().getMessage());\n        }\n   \
      \ }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.massindexing.MassIndexer;\n\
      import org.hibernate.search.mapper.pojo.massindexing.MassIndexingFailureHandler;\n\
      import org.hibernate.search.mapper.pojo.massindexing.MassIndexingFailureContext;\n\
      import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\n\
      public class LegacyIndexingService {\n\n    @PersistenceContext\n    private\
      \ EntityManager entityManager;\n\n    public void startIndexing() {\n      \
      \  MassIndexer indexer = org.hibernate.search.mapper.orm.Search.session(entityManager).massIndexer();\n\
      \        indexer.failureHandler(new CustomMassIndexingFailureHandler());\n \
      \       indexer.start();\n    }\n\n    private static class CustomMassIndexingFailureHandler\
      \ implements MassIndexingFailureHandler {\n        @Override\n        public\
      \ void handle(MassIndexingFailureContext context) {\n            System.err.println(\"\
      Indexing failed: \" + context.getThrowable().getMessage());\n        }\n   \
      \ }\n}"
    '# konveyor_guidance': '`org.hibernate.search.mapper.orm.massindexing.MassIndexingFailureHandler`
      has been deprecated, implement `org.hibernate.search.mapper.pojo.massindexing.MassIndexingFailureHandler`
      instead.'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for MassIndexingFailureContext\npublic class MassIndexingFailureContext\
      \ {\n    private Long id;\n    private String name;\n\n    public MassIndexingFailureContext()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for EntityManager\n\
      public class EntityManager {\n    private Long id;\n    private String name;\n\
      \n    public EntityManager() {}\n\n    public Long getId() { return id; }\n\
      \    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00180
  description: MassIndexingMonitor has been deprecated
  severity: low
  category: optional
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: MassIndexingMonitor has been deprecated
    code_snippet: "import org.hibernate.search.mapper.orm.massindexing.MassIndexingMonitor;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.transaction.Transactional;\n\npublic class OldIndexingService\
      \ {\n\n    private EntityManager entityManager;\n\n    public OldIndexingService(EntityManager\
      \ entityManager) {\n        this.entityManager = entityManager;\n    }\n\n \
      \   @Transactional\n    public void startIndexing() {\n        MassIndexingMonitor\
      \ monitor = new MassIndexingMonitor() {\n            @Override\n           \
      \ public void documentsBuilt(int number) {\n                System.out.println(number\
      \ + \" documents built.\");\n            }\n\n            @Override\n      \
      \      public void entitiesLoaded(int number) {\n                System.out.println(number\
      \ + \" entities loaded.\");\n            }\n\n            @Override\n      \
      \      public void addToTotalCount(long count) {\n                System.out.println(\"\
      Total count: \" + count);\n            }\n\n            @Override\n        \
      \    public void indexingCompleted() {\n                System.out.println(\"\
      Indexing completed.\");\n            }\n        };\n\n        Search.session(entityManager)\n\
      \              .massIndexer()\n              .monitor(monitor)\n           \
      \   .start();\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.pojo.massindexing.MassIndexingMonitor;\n\
      import org.hibernate.search.mapper.orm.Search;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.transaction.Transactional;\n\npublic class OldIndexingService\
      \ {\n\n    private EntityManager entityManager;\n\n    public OldIndexingService(EntityManager\
      \ entityManager) {\n        this.entityManager = entityManager;\n    }\n\n \
      \   @Transactional\n    public void startIndexing() {\n        MassIndexingMonitor\
      \ monitor = new MassIndexingMonitor() {\n            @Override\n           \
      \ public void documentsBuilt(int number) {\n                System.out.println(number\
      \ + \" documents built.\");\n            }\n\n            @Override\n      \
      \      public void entitiesLoaded(int number) {\n                System.out.println(number\
      \ + \" entities loaded.\");\n            }\n\n            @Override\n      \
      \      public void documentsAdded(long count) {\n                System.out.println(\"\
      Documents added: \" + count);\n            }\n\n            @Override\n    \
      \        public void indexingCompleted() {\n                System.out.println(\"\
      Indexing completed.\");\n            }\n        };\n\n        Search.session(entityManager)\n\
      \              .massIndexer()\n              .monitor(monitor)\n           \
      \   .start();\n    }\n}"
    '# konveyor_guidance': '`org.hibernate.search.mapper.orm.massindexing.MassIndexingMonitor`
      has been deprecated, implement `org.hibernate.search.mapper.pojo.massindexing.MassIndexingMonitor`
      instead.'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate-search-6.1-00190
  description: Deprecated configuration settings
  severity: low
  category: optional
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/152-hibernate-search-6.1.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Deprecated configuration settings
    code_snippet: "import org.hibernate.search.mapper.orm.cfg.HibernateOrmMapperSettings;\n\
      import org.hibernate.cfg.Configuration;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public void configureHibernateSearch() {\n        Configuration cfg\
      \ = new Configuration();\n        \n        // Deprecated configuration usage\n\
      \        cfg.setProperty(HibernateOrmMapperSettings.AUTOMATIC_INDEXING_STRATEGY,\
      \ \"session\");\n    }\n}"
    expected_fix: "import org.hibernate.search.mapper.orm.cfg.HibernateOrmMapperSettings;\n\
      import org.hibernate.cfg.Configuration;\n\npublic class HibernateSearchConfiguration\
      \ {\n\n    public void configureHibernateSearch() {\n        Configuration cfg\
      \ = new Configuration();\n        \n        // Updated to use the new configuration\
      \ property\n        cfg.setProperty(HibernateOrmMapperSettings.AUTOMATIC_INDEXING_ENABLED,\
      \ \"true\");\n    }\n}"
    '# konveyor_guidance': 'Property has been deprecated: use the new configuration
      property that accepts `true`/`false` instead. See `HibernateOrmMapperSettings#AUTOMATIC_INDEXING_ENABLED`.'
  migration_complexity: low
- rule_id: hibernate-00005
  description: Implicit name determination for sequences and tables associated with
    identifier generation has changed
  severity: medium
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Implicit name determination for sequences and tables associated with
      identifier generation has changed
    code_snippet: "import jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\n\
      import jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\n\
      import jakarta.persistence.Table;\n\n@Entity\n@Table(name = \"person\")\npublic\
      \ class Person {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n\
      \    private Long id;\n\n    private String name;\n\n    // Constructors, getters,\
      \ and setters\n    public Person() {\n    }\n\n    public Person(String name)\
      \ {\n        this.name = name;\n    }\n\n    public Long getId() {\n       \
      \ return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n\
      \    }\n\n    public String getName() {\n        return name;\n    }\n\n   \
      \ public void setName(String name) {\n        this.name = name;\n    }\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\n\
      import jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\n\
      import jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\
      \n@Entity\n@Table(name = \"person\")\npublic class Person {\n\n    @Id\n   \
      \ @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"person_seq\"\
      )\n    @SequenceGenerator(name = \"person_seq\", sequenceName = \"person_seq\"\
      , allocationSize = 1)\n    private Long id;\n\n    private String name;\n\n\
      \    public Person() {\n    }\n\n    public Person(String name) {\n        this.name\
      \ = name;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n\
      \    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public\
      \ String getName() {\n        return name;\n    }\n\n    public void setName(String\
      \ name) {\n        this.name = name;\n    }\n}"
    '# konveyor_guidance': "The way in which Hibernate determines implicit names for\
      \ sequences and tables associated with identifier generation has changed in\
      \ 6.0 which may affect migrating applications. \n As of 6.0, Hibernate by default\
      \ creates a sequence per entity hierarchy instead of a single sequence hibernate_sequence.\
      \ \n Due to this change, users that previously used `@GeneratedValue(strategy\
      \ = GenerationStrategy.AUTO)` or simply `@GeneratedValue` (since `AUTO` is the\
      \ default), need to ensure that the database now contains sequences for every\
      \ entity, named `<entity name>_seq`. For an entity Person, a sequence person_seq\
      \ is expected to exist. \n It’s best to run hbm2ddl (e.g. by temporarily setting\
      \ `hbm2ddl.auto=create`) to obtain a list of DDL statements for the sequences."
  migration_complexity: low
- rule_id: hibernate-00010
  description: Approaches for specifying Types to use which are string-based have
    been removed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Approaches for specifying Types to use which are string-based have been
      removed
    code_snippet: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import jakarta.persistence.Column;\nimport org.hibernate.annotations.Type;\n\
      \n@Entity\npublic class User {\n    @Id\n    private Long id;\n\n    @Type(type\
      \ = \"encryptedString\")\n    @Column(name = \"username\")\n    private String\
      \ username;\n\n    public Long getId() {\n        return id;\n    }\n\n    public\
      \ void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getUsername()\
      \ {\n        return username;\n    }\n\n    public void setUsername(String username)\
      \ {\n        this.username = username;\n    }\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import jakarta.persistence.Column;\nimport jakarta.persistence.AttributeConverter;\n\
      import jakarta.persistence.Convert;\nimport jakarta.persistence.Converter;\n\
      \n@Entity\npublic class User {\n    @Id\n    private Long id;\n\n    @Convert(converter\
      \ = EncryptedStringConverter.class)\n    @Column(name = \"username\")\n    private\
      \ String username;\n\n    public Long getId() {\n        return id;\n    }\n\
      \n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public\
      \ String getUsername() {\n        return username;\n    }\n\n    public void\
      \ setUsername(String username) {\n        this.username = username;\n    }\n\
      }\n\n@Converter\nclass EncryptedStringConverter implements AttributeConverter<String,\
      \ String> {\n    @Override\n    public String convertToDatabaseColumn(String\
      \ attribute) {\n        // Implement encryption logic here\n        return attribute;\
      \ // Placeholder for encrypted data\n    }\n\n    @Override\n    public String\
      \ convertToEntityAttribute(String dbData) {\n        // Implement decryption\
      \ logic here\n        return dbData; // Placeholder for decrypted data\n   \
      \ }\n}"
    '# konveyor_guidance': As part of the Hibernate ORM 6.0 release, mapping annotations
      have been modernised and made more type-safe. These annotations must be removed.
      See the User Guide for details about mapping your domain model.
  migration_complexity: low
- rule_id: hibernate6-00020
  description: String-based approaches for specifying Types to use have been removed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: String-based approaches for specifying Types to use have been removed
    code_snippet: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.annotations.Type;\n\n@Entity\npublic class User {\n   \
      \ @Id\n    private Long id;\n\n    @Type(type = \"encryptedString\")\n    private\
      \ String sensitiveData;\n\n    public Long getId() {\n        return id;\n \
      \   }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public String getSensitiveData() {\n        return sensitiveData;\n   \
      \ }\n\n    public void setSensitiveData(String sensitiveData) {\n        this.sensitiveData\
      \ = sensitiveData;\n    }\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.annotations.Type;\nimport org.hibernate.type.TextType;\n\
      \n@Entity\npublic class User {\n    @Id\n    private Long id;\n\n    @Type(type\
      \ = TextType.class)\n    private String sensitiveData;\n\n    public Long getId()\
      \ {\n        return id;\n    }\n\n    public void setId(Long id) {\n       \
      \ this.id = id;\n    }\n\n    public String getSensitiveData() {\n        return\
      \ sensitiveData;\n    }\n\n    public void setSensitiveData(String sensitiveData)\
      \ {\n        this.sensitiveData = sensitiveData;\n    }\n}"
    '# konveyor_guidance': As part of the Hibernate ORM 6.0 release, mapping annotations
      have been modernised and made more type-safe. Annotation attributes accepting
      types as String have been removed. See the User Guide for details about mapping
      your domain model.
  migration_complexity: low
- rule_id: hibernate6-00030
  description: Basic mappings are no longer configurable through the BasicType contract
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Basic mappings are no longer configurable through the BasicType contract
    code_snippet: "import org.hibernate.type.BasicType;\nimport org.hibernate.type.descriptor.java.StringTypeDescriptor;\n\
      import org.hibernate.type.descriptor.sql.VarcharTypeDescriptor;\nimport org.hibernate.usertype.UserType;\n\
      \npublic class CustomStringType implements BasicType, UserType {\n    @Override\n\
      \    public String getName() {\n        return \"customString\";\n    }\n\n\
      \    @Override\n    public Class getReturnedClass() {\n        return String.class;\n\
      \    }\n\n    @Override\n    public int[] sqlTypes() {\n        return new int[]\
      \ { VarcharTypeDescriptor.INSTANCE.getSqlType() };\n    }\n\n    @Override\n\
      \    public StringTypeDescriptor getJavaTypeDescriptor() {\n        return StringTypeDescriptor.INSTANCE;\n\
      \    }\n\n    @Override\n    public VarcharTypeDescriptor getSqlTypeDescriptor()\
      \ {\n        return VarcharTypeDescriptor.INSTANCE;\n    }\n}"
    expected_fix: "import jakarta.persistence.AttributeConverter;\nimport jakarta.persistence.Converter;\n\
      \n@Converter\npublic class CustomStringType implements AttributeConverter<String,\
      \ String> {\n\n    @Override\n    public String convertToDatabaseColumn(String\
      \ attribute) {\n        // Implement any custom logic needed for database representation\n\
      \        return attribute;\n    }\n\n    @Override\n    public String convertToEntityAttribute(String\
      \ dbData) {\n        // Implement any custom logic needed for entity representation\n\
      \        return dbData;\n    }\n}"
    '# konveyor_guidance': Basic mappings are no longer configurable through the BasicType
      contract. Instead, users configure the different aspects of mapping the basic
      value to the database. See migration guide for more details.
    test_code: "// Stub for Class\npublic class Class {\n    private Long id;\n  \
      \  private String name;\n\n    public Class() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for VarcharTypeDescriptor\npublic class\
      \ VarcharTypeDescriptor {\n    private Long id;\n    private String name;\n\n\
      \    public VarcharTypeDescriptor() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for StringTypeDescriptor\npublic class StringTypeDescriptor\
      \ {\n    private Long id;\n    private String name;\n\n    public StringTypeDescriptor()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00040
  description: StandardBasicTypes class now exposes fields of type BasicTypeReference
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: StandardBasicTypes class now exposes fields of type BasicTypeReference
    code_snippet: "import org.hibernate.type.StandardBasicTypes;\nimport org.hibernate.Session;\n\
      \npublic class HibernateTypeExample {\n\n    public void demonstrateTypeUsage(Session\
      \ session) {\n        // Using StandardBasicTypes with BasicType instance fields\n\
      \        session.createSQLQuery(\"SELECT name FROM Users\")\n              \
      \ .addScalar(\"name\", StandardBasicTypes.STRING)\n               .list();\n\
      \    }\n}"
    expected_fix: "import org.hibernate.Session;\nimport org.hibernate.type.StandardBasicTypes;\n\
      \npublic class HibernateTypeExample {\n\n    public void demonstrateTypeUsage(Session\
      \ session) {\n        // Using StandardBasicTypes with BasicTypeReference fields\n\
      \        session.createNativeQuery(\"SELECT name FROM Users\")\n           \
      \    .addScalar(\"name\", StandardBasicTypes.STRING)\n               .getResultList();\n\
      \    }\n}"
    '# konveyor_guidance': The `StandardBasicTypes` class previously exposed `BasicType`
      instance fields, which now have been replaced with fields of the type `BasicTypeReference`.
    test_code: "// Stub for Session\npublic class Session {\n    private Long id;\n\
      \    private String name;\n\n    public Session() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00050
  description: Renaming of JavaTypeDescriptor contract
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Renaming of JavaTypeDescriptor contract
    code_snippet: "import org.hibernate.type.descriptor.java.JavaTypeDescriptor;\n\
      import org.hibernate.type.descriptor.WrapperOptions;\n\npublic class CustomStringTypeDescriptor\
      \ implements JavaTypeDescriptor<String> {\n    @Override\n    public String\
      \ fromString(String value) {\n        return value;\n    }\n\n    @Override\n\
      \    public <X> X unwrap(String value, Class<X> type, WrapperOptions options)\
      \ {\n        if (value == null) {\n            return null;\n        }\n   \
      \     if (String.class.isAssignableFrom(type)) {\n            return type.cast(value);\n\
      \        }\n        throw new IllegalArgumentException(\"Unsupported unwrap\
      \ conversion requested\");\n    }\n\n    @Override\n    public <X> String wrap(X\
      \ value, WrapperOptions options) {\n        if (value == null) {\n         \
      \   return null;\n        }\n        if (value instanceof String) {\n      \
      \      return (String) value;\n        }\n        throw new IllegalArgumentException(\"\
      Unsupported wrap conversion requested\");\n    }\n}"
    expected_fix: "import org.hibernate.type.descriptor.java.JavaType;\nimport org.hibernate.type.descriptor.WrapperOptions;\n\
      \npublic class CustomStringTypeDescriptor implements JavaType<String> {\n  \
      \  @Override\n    public String fromString(String value) {\n        return value;\n\
      \    }\n\n    @Override\n    public <X> X unwrap(String value, Class<X> type,\
      \ WrapperOptions options) {\n        if (value == null) {\n            return\
      \ null;\n        }\n        if (String.class.isAssignableFrom(type)) {\n   \
      \         return type.cast(value);\n        }\n        throw new IllegalArgumentException(\"\
      Unsupported unwrap conversion requested\");\n    }\n\n    @Override\n    public\
      \ <X> String wrap(X value, WrapperOptions options) {\n        if (value == null)\
      \ {\n            return null;\n        }\n        if (value instanceof String)\
      \ {\n            return (String) value;\n        }\n        throw new IllegalArgumentException(\"\
      Unsupported wrap conversion requested\");\n    }\n}"
    '# konveyor_guidance': The interface `org.hibernate.type.descriptor.java.JavaTypeDescriptor`
      must be renamed to `org.hibernate.type.descriptor.java.JavaType`.
    test_code: "// Stub for X\npublic class X {\n    private Long id;\n    private\
      \ String name;\n\n    public X() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}"
  migration_complexity: low
- rule_id: hibernate6-00060
  description: Renaming of SqlTypeDescriptor contract
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Renaming of SqlTypeDescriptor contract
    code_snippet: "import org.hibernate.type.descriptor.sql.SqlTypeDescriptor;\nimport\
      \ org.hibernate.type.descriptor.java.JavaTypeDescriptor;\nimport org.hibernate.type.AbstractSingleColumnStandardBasicType;\n\
      import org.hibernate.type.descriptor.sql.VarcharTypeDescriptor;\n\npublic class\
      \ CustomStringType extends AbstractSingleColumnStandardBasicType<String> {\n\
      \n    public static final CustomStringType INSTANCE = new CustomStringType();\n\
      \n    public CustomStringType() {\n        super(VarcharTypeDescriptor.INSTANCE,\
      \ JavaTypeDescriptor.INSTANCE);\n    }\n\n    @Override\n    public String getName()\
      \ {\n        return \"custom_string\";\n    }\n\n    @Override\n    protected\
      \ SqlTypeDescriptor getSqlTypeDescriptor() {\n        return VarcharTypeDescriptor.INSTANCE;\n\
      \    }\n}"
    expected_fix: "import org.hibernate.type.descriptor.jdbc.JdbcType;\nimport org.hibernate.type.descriptor.java.JavaTypeDescriptor;\n\
      import org.hibernate.type.AbstractSingleColumnStandardBasicType;\nimport org.hibernate.type.descriptor.jdbc.VarcharJdbcType;\n\
      \npublic class CustomStringType extends AbstractSingleColumnStandardBasicType<String>\
      \ {\n\n    public static final CustomStringType INSTANCE = new CustomStringType();\n\
      \n    public CustomStringType() {\n        super(VarcharJdbcType.INSTANCE, JavaTypeDescriptor.INSTANCE);\n\
      \    }\n\n    @Override\n    public String getName() {\n        return \"custom_string\"\
      ;\n    }\n\n    @Override\n    protected JdbcType getSqlTypeDescriptor() {\n\
      \        return VarcharJdbcType.INSTANCE;\n    }\n}"
    '# konveyor_guidance': The interface `org.hibernate.type.descriptor.sql.SqlTypeDescriptor`
      has been renamed to `org.hibernate.type.descriptor.jdbc.JdbcType`.
    test_code: "// Stub for JdbcType\npublic class JdbcType {\n    private Long id;\n\
      \    private String name;\n\n    public JdbcType() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for SqlTypeDescriptor\npublic class SqlTypeDescriptor\
      \ {\n    private Long id;\n    private String name;\n\n    public SqlTypeDescriptor()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00070
  description: The CompositeUserType interface has been reimplemented
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The CompositeUserType interface has been reimplemented
    code_snippet: "import org.hibernate.usertype.CompositeUserType;\nimport org.hibernate.engine.spi.SharedSessionContractImplementor;\n\
      import org.hibernate.HibernateException;\nimport java.sql.PreparedStatement;\n\
      import java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.io.Serializable;\n\
      \npublic class MyCompositeUserType implements CompositeUserType {\n\n    @Override\n\
      \    public String[] getPropertyNames() {\n        return new String[] { \"\
      part1\", \"part2\" };\n    }\n\n    @Override\n    public Object getPropertyValue(Object\
      \ component, int property) throws HibernateException {\n        return null;\n\
      \    }\n\n    @Override\n    public Object nullSafeGet(ResultSet rs, String[]\
      \ names, SharedSessionContractImplementor session, Object owner)\n         \
      \   throws HibernateException, SQLException {\n        return null;\n    }\n\
      \n    @Override\n    public void nullSafeSet(PreparedStatement st, Object value,\
      \ int index, SharedSessionContractImplementor session)\n            throws HibernateException,\
      \ SQLException {\n    }\n\n    @Override\n    public Class returnedClass() {\n\
      \        return MyCompositeClass.class;\n    }\n\n    @Override\n    public\
      \ boolean equals(Object x, Object y) throws HibernateException {\n        return\
      \ false;\n    }\n\n    @Override\n    public int hashCode(Object x) throws HibernateException\
      \ {\n        return 0;\n    }\n\n    @Override\n    public Object deepCopy(Object\
      \ value) throws HibernateException {\n        return null;\n    }\n\n    @Override\n\
      \    public boolean isMutable() {\n        return false;\n    }\n\n    @Override\n\
      \    public Serializable disassemble(Object value, SharedSessionContractImplementor\
      \ session) throws HibernateException {\n        return null;\n    }\n\n    @Override\n\
      \    public Object assemble(Serializable cached, SharedSessionContractImplementor\
      \ session, Object owner)\n            throws HibernateException {\n        return\
      \ null;\n    }\n\n    @Override\n    public Object replace(Object original,\
      \ Object target, SharedSessionContractImplementor session, Object owner)\n \
      \           throws HibernateException {\n        return null;\n    }\n}"
    expected_fix: "import jakarta.persistence.Embeddable;\nimport java.io.Serializable;\n\
      \n@Embeddable\npublic class MyCompositeClass implements Serializable {\n   \
      \ private String part1;\n    private String part2;\n\n    public String getPart1()\
      \ {\n        return part1;\n    }\n\n    public void setPart1(String part1)\
      \ {\n        this.part1 = part1;\n    }\n\n    public String getPart2() {\n\
      \        return part2;\n    }\n\n    public void setPart2(String part2) {\n\
      \        this.part2 = part2;\n    }\n\n    @Override\n    public boolean equals(Object\
      \ o) {\n        if (this == o) return true;\n        if (o == null || getClass()\
      \ != o.getClass()) return false;\n\n        MyCompositeClass that = (MyCompositeClass)\
      \ o;\n\n        if (part1 != null ? !part1.equals(that.part1) : that.part1 !=\
      \ null) return false;\n        return part2 != null ? part2.equals(that.part2)\
      \ : that.part2 == null;\n    }\n\n    @Override\n    public int hashCode() {\n\
      \        int result = part1 != null ? part1.hashCode() : 0;\n        result\
      \ = 31 * result + (part2 != null ? part2.hashCode() : 0);\n        return result;\n\
      \    }\n}"
    '# konveyor_guidance': The CompositeUserType interface was re-implemented to be
      able to model user types as proper embeddable types. See the migration guide
      for more information.
    test_code: "// Stub for Class\npublic class Class {\n    private Long id;\n  \
      \  private String name;\n\n    public Class() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}\n\n// Stub for Object\npublic class Object {\n    private\
      \ Long id;\n    private String name;\n\n    public Object() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for Serializable\npublic class Serializable\
      \ {\n    private Long id;\n    private String name;\n\n    public Serializable()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00080
  description: Property hibernate.hql.bulk_id_strategy has changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Property hibernate.hql.bulk_id_strategy has changed
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateConfiguration {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.hql.bulk_id_strategy\", \"org.hibernate.hql.spi.id.inline.InlineIdsOrClauseBulkIdStrategy\"\
      );\n\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n        EntityManager em = emf.createEntityManager();\n\
      \n        try {\n            em.getTransaction().begin();\n            em.createQuery(\"\
      DELETE FROM Employee e WHERE e.department.id = :deptId\")\n              .setParameter(\"\
      deptId\", 1)\n              .executeUpdate();\n            em.getTransaction().commit();\n\
      \        } finally {\n            em.close();\n            emf.close();\n  \
      \      }\n    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateConfiguration {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.query.mutation_strategy\", \"org.hibernate.query.sqm.mutation.internal.temptable.GlobalTemporaryTableMutationStrategy\"\
      );\n\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n        EntityManager em = emf.createEntityManager();\n\
      \n        try {\n            em.getTransaction().begin();\n            em.createQuery(\"\
      DELETE FROM Employee e WHERE e.department.id = :deptId\")\n              .setParameter(\"\
      deptId\", 1)\n              .executeUpdate();\n            em.getTransaction().commit();\n\
      \        } finally {\n            em.close();\n            emf.close();\n  \
      \      }\n    }\n}"
    '# konveyor_guidance': The configuration property `hibernate.hql.bulk_id_strategy`
      was changed to `hibernate.query.mutation_strategy` which now refers to classes
      or objects implementing `org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy`.
  migration_complexity: trivial
- rule_id: hibernate6-00090
  description: Stream#close() must be called explicitly to close the underlying resources
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Stream#close() must be called explicitly to close the underlying resources
    code_snippet: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\n\
      import jakarta.persistence.Persistence;\nimport java.util.stream.Stream;\n\n\
      public class StreamResourceExample {\n\n    public void processEntities() {\n\
      \        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      my-persistence-unit\");\n        EntityManager em = emf.createEntityManager();\n\
      \        \n        try {\n            Stream<Object> resultStream = em.createQuery(\"\
      SELECT e FROM MyEntity e\", Object.class).getResultStream();\n            resultStream.forEach(System.out::println);\n\
      \            // Missing explicit resultStream.close() here, violating hibernate6-00090\n\
      \        } finally {\n            em.close();\n            emf.close();\n  \
      \      }\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\n\
      import jakarta.persistence.Persistence;\nimport java.util.stream.Stream;\n\n\
      public class StreamResourceExample {\n\n    public void processEntities() {\n\
      \        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      my-persistence-unit\");\n        EntityManager em = emf.createEntityManager();\n\
      \        \n        try (Stream<Object> resultStream = em.createQuery(\"SELECT\
      \ e FROM MyEntity e\", Object.class).getResultStream()) {\n            resultStream.forEach(System.out::println);\n\
      \        } finally {\n            em.close();\n            emf.close();\n  \
      \      }\n    }\n}"
    '# konveyor_guidance': "`jakarta.persistence.Query#getResultStream()` and `org.hibernate.query.Query#stream()`\
      \ no longer return a Stream decorator. In order to close the underlying IO resources,\
      \ it is now necessary to explicitly call the `Stream#close()` method.\n This\
      \ change makes the Streams returned by Hibernate behave as defined in the JDK\
      \ Stream documentation, which is quite explicit about the need for an explicit\
      \ call to close by the user to avoid resource leakages."
    test_code: "// Stub for Object\npublic class Object {\n    private Long id;\n\
      \    private String name;\n\n    public Object() {}\n\n    public Long getId()\
      \ { return id; }\n    public void setId(Long id) { this.id = id; }\n    public\
      \ String getName() { return name; }\n    public void setName(String name) {\
      \ this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00100
  description: The signature of the Interceptor#onSave method has been changed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The signature of the Interceptor#onSave method has been changed
    code_snippet: "import org.hibernate.EmptyInterceptor;\nimport java.io.Serializable;\n\
      import java.util.Iterator;\n\npublic class CustomInterceptor extends EmptyInterceptor\
      \ {\n    @Override\n    public boolean onSave(Object entity, Serializable id,\
      \ Object[] state, String[] propertyNames, org.hibernate.type.Type[] types) {\n\
      \        // Custom logic before saving the entity\n        System.out.println(\"\
      Before saving entity: \" + entity.getClass().getSimpleName());\n        return\
      \ super.onSave(entity, id, state, propertyNames, types);\n    }\n}"
    expected_fix: "import org.hibernate.EmptyInterceptor;\nimport java.util.Iterator;\n\
      \npublic class CustomInterceptor extends EmptyInterceptor {\n    @Override\n\
      \    public boolean onSave(Object entity, Object id, Object[] state, String[]\
      \ propertyNames, org.hibernate.type.Type[] types) {\n        // Custom logic\
      \ before saving the entity\n        System.out.println(\"Before saving entity:\
      \ \" + entity.getClass().getSimpleName());\n        return super.onSave(entity,\
      \ id, state, propertyNames, types);\n    }\n}"
    '# konveyor_guidance': The signature of the `Interceptor#onSave` method has been
      changed to account for the general change in expected identifier type from `Serializable`
      to `Object`. See migration guide for more information.
  migration_complexity: low
- rule_id: hibernate6-00110
  description: The contents of the loader.collection package have been restructured
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The contents of the loader.collection package have been restructured
    code_snippet: "import org.hibernate.loader.collection.CollectionInitializer;\n\
      import org.hibernate.persister.collection.QueryableCollection;\nimport org.hibernate.engine.spi.SessionImplementor;\n\
      \npublic class CollectionLoaderExample {\n    public void initializeCollection(SessionImplementor\
      \ session, QueryableCollection collectionPersister) {\n        CollectionInitializer\
      \ initializer = collectionPersister.getCollectionInitializer();\n        initializer.initialize(null,\
      \ session);\n    }\n}"
    expected_fix: "import org.hibernate.engine.spi.SessionImplementor;\nimport org.hibernate.persister.collection.QueryableCollection;\n\
      import org.hibernate.loader.ast.spi.CollectionLoader;\nimport org.hibernate.loader.ast.internal.LoaderHelper;\n\
      \npublic class CollectionLoaderExample {\n    public void initializeCollection(SessionImplementor\
      \ session, QueryableCollection collectionPersister) {\n        CollectionLoader\
      \ loader = LoaderHelper.createCollectionLoader(collectionPersister, session.getFactory());\n\
      \        loader.load(null, session);\n    }\n}"
    '# konveyor_guidance': The contents of the `loader.collection` package were restructured
      into `loader.ast.spi` and `loader.ast.internal` as well as adapted to the SQM
      API.
  migration_complexity: low
- rule_id: hibernate6-00120
  description: The contents of the loader.custom package have been moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The contents of the loader.custom package have been moved
    code_snippet: "import loader.custom.CustomLoader;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\n\n@ApplicationScoped\npublic\
      \ class CustomLoaderService {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void useCustomLoader() {\n        CustomLoader\
      \ loader = new CustomLoader(entityManager);\n        loader.load();\n    }\n\
      }"
    expected_fix: "import query.sql.CustomLoader;\nimport jakarta.persistence.EntityManager;\n\
      import jakarta.persistence.PersistenceContext;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n@ApplicationScoped\npublic class CustomLoaderService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void useCustomLoader()\
      \ {\n        CustomLoader loader = new CustomLoader(entityManager);\n      \
      \  loader.load();\n    }\n}"
    '# konveyor_guidance': The contents of the `loader.custom` package were adapted
      and moved to `query.sql`.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00130
  description: The contents of the loader.entity and loader.plan packages have been
    removed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The contents of the loader.entity and loader.plan packages have been
      removed
    code_snippet: "import org.hibernate.loader.entity.EntityLoader;\nimport org.hibernate.loader.plan.exec.process.spi.ReturnReader;\n\
      \npublic class LegacyDataLoader {\n\n    private EntityLoader entityLoader;\n\
      \    private ReturnReader returnReader;\n\n    public LegacyDataLoader(EntityLoader\
      \ entityLoader, ReturnReader returnReader) {\n        this.entityLoader = entityLoader;\n\
      \        this.returnReader = returnReader;\n    }\n\n    public void loadData()\
      \ {\n        // Simulated method to load data using the removed classes\n  \
      \      System.out.println(\"Loading data using EntityLoader and ReturnReader\"\
      );\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.TypedQuery;\n\
      import jakarta.inject.Inject;\nimport jakarta.transaction.Transactional;\n\n\
      @jakarta.enterprise.context.ApplicationScoped\npublic class LegacyDataLoader\
      \ {\n\n    @Inject\n    private EntityManager entityManager;\n\n    public LegacyDataLoader()\
      \ {\n    }\n\n    @Transactional\n    public void loadData() {\n        TypedQuery<Object>\
      \ query = entityManager.createQuery(\"from SomeEntity\", Object.class);\n  \
      \      System.out.println(\"Loading data using EntityManager\");\n        query.getResultList().forEach(System.out::println);\n\
      \    }\n}"
    '# konveyor_guidance': The contents of `loader.entity` and `loader.plan` were
      removed
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityLoader\npublic class EntityLoader {\n    private Long id;\n\
      \    private String name;\n\n    public EntityLoader() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for ReturnReader\npublic class ReturnReader\
      \ {\n    private Long id;\n    private String name;\n\n    public ReturnReader()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}\n\n// Stub for Object\n\
      public class Object {\n    private Long id;\n    private String name;\n\n  \
      \  public Object() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}\n\n\
      // Stub for EntityManager\npublic class EntityManager {\n    private Long id;\n\
      \    private String name;\n\n    public EntityManager() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00140
  description: The contents of sql.ordering have moved
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The contents of sql.ordering have moved
    code_snippet: "import org.hibernate.annotations.common.reflection.XProperty;\n\
      import org.hibernate.annotations.common.reflection.java.JavaXMember;\nimport\
      \ org.hibernate.boot.spi.MetadataBuildingContext;\nimport org.hibernate.mapping.PersistentClass;\n\
      import org.hibernate.sql.ordering.antlr.ColumnMapper;\n\npublic class LegacyOrderingExample\
      \ {\n    public void applyOrdering(XProperty property, MetadataBuildingContext\
      \ context) {\n        PersistentClass persistentClass = context.getMetadataCollector().getEntityBinding(property.getName());\n\
      \        JavaXMember javaXMember = (JavaXMember) property;\n        ColumnMapper\
      \ columnMapper = new ColumnMapper() {\n            @Override\n            public\
      \ String[] map(String reference) {\n                return new String[]{javaXMember.getName()};\n\
      \            }\n        };\n        // This usage of sql.ordering is what violates\
      \ the migration rule\n        String orderingFragment = columnMapper.map(persistentClass.getTable().getName())[0];\n\
      \        System.out.println(\"Ordering Fragment: \" + orderingFragment);\n \
      \   }\n}"
    expected_fix: "import org.hibernate.annotations.common.reflection.XProperty;\n\
      import org.hibernate.annotations.common.reflection.java.JavaXMember;\nimport\
      \ org.hibernate.boot.spi.MetadataBuildingContext;\nimport org.hibernate.mapping.PersistentClass;\n\
      import org.hibernate.metamodel.mapping.ordering.ast.ColumnMapper;\n\npublic\
      \ class LegacyOrderingExample {\n    public void applyOrdering(XProperty property,\
      \ MetadataBuildingContext context) {\n        PersistentClass persistentClass\
      \ = context.getMetadataCollector().getEntityBinding(property.getName());\n \
      \       JavaXMember javaXMember = (JavaXMember) property;\n        ColumnMapper\
      \ columnMapper = new ColumnMapper() {\n            @Override\n            public\
      \ String[] map(String reference) {\n                return new String[]{javaXMember.getName()};\n\
      \            }\n        };\n        // Updated to use the new location of ColumnMapper\
      \ as per migration guidance\n        String orderingFragment = columnMapper.map(persistentClass.getTable().getName())[0];\n\
      \        System.out.println(\"Ordering Fragment: \" + orderingFragment);\n \
      \   }\n}"
    '# konveyor_guidance': The contents of `sql.ordering` were adapted and moved to
      `metamodel.mapping.ordering.ast`.
  migration_complexity: low
- rule_id: hibernate6-00150
  description: Some classes of the sql package that were previously used for building
    SQL were removed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Some classes of the sql package that were previously used for building
      SQL were removed
    code_snippet: "import org.hibernate.SQLQuery;\nimport org.hibernate.Session;\n\
      import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      \npublic class SQLQueryBuilder {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void executeCustomSQL() {\n        Session session\
      \ = entityManager.unwrap(Session.class);\n        SQLQuery query = session.createSQLQuery(\"\
      SELECT * FROM Users WHERE username = :username\");\n        query.setParameter(\"\
      username\", \"john_doe\");\n        query.addEntity(User.class);\n        List<User>\
      \ results = query.list();\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.persistence.Query;\nimport java.util.List;\n\npublic class SQLQueryBuilder\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void executeCustomSQL() {\n        String sql = \"SELECT * FROM\
      \ Users WHERE username = :username\";\n        Query query = entityManager.createNativeQuery(sql,\
      \ User.class);\n        query.setParameter(\"username\", \"john_doe\");\n  \
      \      List<User> results = query.getResultList();\n    }\n}"
    '# konveyor_guidance': Classes of the sql package that were previously used for
      building SQL, but aren’t needed anymore, were removed. The SQL generation is
      now fully handled through the `SqlAstTranslator` which a `Dialect` exposes a
      factory for.
    test_code: "// Stub for User\npublic class User {\n    private Long id;\n    private\
      \ String name;\n\n    public User() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00160
  description: Support for basic property mappings with multiple columns was removed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Support for basic property mappings with multiple columns was removed
    code_snippet: "import javax.persistence.Entity;\nimport javax.persistence.Id;\n\
      import javax.persistence.Column;\nimport javax.persistence.AttributeOverride;\n\
      import javax.persistence.AttributeOverrides;\n\n@Entity\npublic class User {\n\
      \n    @Id\n    private Long id;\n\n    @AttributeOverrides({\n        @AttributeOverride(name=\"\
      street\", column=@Column(name=\"home_street\")),\n        @AttributeOverride(name=\"\
      city\", column=@Column(name=\"home_city\"))\n    })\n    private Address homeAddress;\n\
      \n    // Getters and setters\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public Address getHomeAddress() {\n        return homeAddress;\n    }\n\
      \n    public void setHomeAddress(Address homeAddress) {\n        this.homeAddress\
      \ = homeAddress;\n    }\n}"
    expected_fix: "import jakarta.persistence.Embeddable;\nimport jakarta.persistence.Embedded;\n\
      import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Column;\n\
      \n@Entity\npublic class User {\n\n    @Id\n    private Long id;\n\n    @Embedded\n\
      \    private Address homeAddress;\n\n    // Getters and setters\n    public\
      \ Long getId() {\n        return id;\n    }\n\n    public void setId(Long id)\
      \ {\n        this.id = id;\n    }\n\n    public Address getHomeAddress() {\n\
      \        return homeAddress;\n    }\n\n    public void setHomeAddress(Address\
      \ homeAddress) {\n        this.homeAddress = homeAddress;\n    }\n}\n\n@Embeddable\n\
      class Address {\n    @Column(name=\"home_street\")\n    private String street;\n\
      \n    @Column(name=\"home_city\")\n    private String city;\n\n    // Getters\
      \ and setters\n    public String getStreet() {\n        return street;\n   \
      \ }\n\n    public void setStreet(String street) {\n        this.street = street;\n\
      \    }\n\n    public String getCity() {\n        return city;\n    }\n\n   \
      \ public void setCity(String city) {\n        this.city = city;\n    }\n}"
    '# konveyor_guidance': In Hibernate 6.0 the support for basic property mappings
      with multiple columns was removed. The only use case for that was when a `CompositeUserType`
      was in use, which was reworked to now work on top of components.
    test_code: "import jakarta.persistence.*;\n\n// Stub for Address\npublic class\
      \ Address {\n    private Long id;\n    private String name;\n\n    public Address()\
      \ {}\n\n    public Long getId() { return id; }\n    public void setId(Long id)\
      \ { this.id = id; }\n    public String getName() { return name; }\n    public\
      \ void setName(String name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00170
  description: Legacy Hibernate Criteria API has been removed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Legacy Hibernate Criteria API has been removed
    code_snippet: "import org.hibernate.Session;\nimport org.hibernate.Criteria;\n\
      import org.hibernate.criterion.Restrictions;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\n\npublic class LegacyCriteriaExample\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void searchUsersByName(String name) {\n        Session session =\
      \ entityManager.unwrap(Session.class);\n        Criteria criteria = session.createCriteria(User.class);\n\
      \        criteria.add(Restrictions.eq(\"name\", name));\n        criteria.list();\n\
      \    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      import javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\n\
      import javax.persistence.criteria.Root;\nimport javax.persistence.criteria.Predicate;\n\
      \npublic class LegacyCriteriaExample {\n\n    @PersistenceContext\n    private\
      \ EntityManager entityManager;\n\n    public void searchUsersByName(String name)\
      \ {\n        CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n    \
      \    CriteriaQuery<User> cq = cb.createQuery(User.class);\n        Root<User>\
      \ user = cq.from(User.class);\n        Predicate namePredicate = cb.equal(user.get(\"\
      name\"), name);\n        cq.where(namePredicate);\n        entityManager.createQuery(cq).getResultList();\n\
      \    }\n}"
    '# konveyor_guidance': The legacy Hibernate Criteria API which was deprecated
      back in Hibernate 5.x and removed in 6.0. Usually, all queries using the legacy
      API can be modeled with the JPA Criteria API. In some cases it is necessary
      to use the Hibernate JPA Criteria extensions.
    test_code: "// Stub for User\npublic class User {\n    private Long id;\n    private\
      \ String name;\n\n    public User() {}\n\n    public Long getId() { return id;\
      \ }\n    public void setId(Long id) { this.id = id; }\n    public String getName()\
      \ { return name; }\n    public void setName(String name) { this.name = name;\
      \ }\n}\n\n// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00180
  description: The Query#iterate() method has been removed
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The Query#iterate() method has been removed
    code_snippet: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.Query;\n\
      import java.util.Iterator;\n\npublic class EmployeeService {\n\n    private\
      \ EntityManager entityManager;\n\n    public void listEmployees() {\n      \
      \  Query query = entityManager.createQuery(\"SELECT e FROM Employee e\");\n\
      \        Iterator employees = query.iterate(); // This line violates the migration\
      \ rule\n        while (employees.hasNext()) {\n            System.out.println(employees.next());\n\
      \        }\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.TypedQuery;\n\
      import java.util.List;\n\npublic class EmployeeService {\n\n    private EntityManager\
      \ entityManager;\n\n    public void listEmployees() {\n        TypedQuery<Employee>\
      \ query = entityManager.createQuery(\"SELECT e FROM Employee e\", Employee.class);\n\
      \        List<Employee> employees = query.getResultList();\n        for (Employee\
      \ employee : employees) {\n            System.out.println(employee);\n     \
      \   }\n    }\n}\n\nclass Employee {\n    // Assuming this class will be properly\
      \ defined elsewhere\n}"
    '# konveyor_guidance': The Query#iterate() method has been removed. See link for
      alternatives.
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00190
  description: Using NativeQuery to call SQL functions and procedures is no longer
    supported
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Using NativeQuery to call SQL functions and procedures is no longer supported
    code_snippet: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.persistence.Query;\n\n@ApplicationScoped\npublic class DatabaseService\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void callDatabaseFunction() {\n        String sql = \"SELECT my_function()\
      \ FROM DUAL\";\n        Query query = entityManager.createNativeQuery(sql);\n\
      \        query.getResultList();\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.persistence.StoredProcedureQuery;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n@ApplicationScoped\npublic class DatabaseService {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void callDatabaseFunction()\
      \ {\n        StoredProcedureQuery query = entityManager.createStoredProcedureQuery(\"\
      my_function\");\n        query.execute();\n        query.getResultList();\n\
      \    }\n}"
    '# konveyor_guidance': Using `NativeQuery` to call SQL functions and procedures
      is no longer supported. `org.hibernate.procedure.ProcedureCall` or `jakarta.persistence.StoredProcedureQuery`
      should be used instead. `@NamedNativeQuery` references defining execution of
      procedure or functions should be migrated to use `@NamedStoredProcedureQuery`
      instead.
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00200
  description: Using NativeQuery to call SQL functions and procedures is no longer
    supported
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Using NativeQuery to call SQL functions and procedures is no longer supported
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\
      \npublic class DatabaseManager {\n\n    @PersistenceContext\n    private EntityManager\
      \ entityManager;\n\n    public void callStoredProcedure() {\n        entityManager.createNativeQuery(\"\
      CALL CalculateStatistics()\")\n                     .getResultList();\n    }\n\
      }"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\
      import jakarta.persistence.StoredProcedureQuery;\n\npublic class DatabaseManager\
      \ {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n\
      \    public void callStoredProcedure() {\n        StoredProcedureQuery query\
      \ = entityManager.createStoredProcedureQuery(\"CalculateStatistics\");\n   \
      \     query.execute();\n    }\n}"
    '# konveyor_guidance': The fetch all properties clause was removed from the HQL
      language without a replacement. See link for replacement info.
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00210
  description: Hibernate no longer provides built-in support for integrating itself
    with JMX environments
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Hibernate no longer provides built-in support for integrating itself
      with JMX environments
    code_snippet: "import org.hibernate.SessionFactory;\nimport org.hibernate.jmx.StatisticsService;\n\
      import javax.management.ObjectName;\nimport javax.management.MBeanServer;\n\
      import java.lang.management.ManagementFactory;\n\npublic class HibernateJMXIntegration\
      \ {\n\n    private SessionFactory sessionFactory;\n\n    public void registerMBeans()\
      \ {\n        try {\n            MBeanServer server = ManagementFactory.getPlatformMBeanServer();\n\
      \            StatisticsService statsMBean = new StatisticsService();\n     \
      \       statsMBean.setSessionFactory(sessionFactory);\n            ObjectName\
      \ statsName = new ObjectName(\"org.hibernate:type=statistics\");\n         \
      \   server.registerMBean(statsMBean, statsName);\n        } catch (Exception\
      \ e) {\n            e.printStackTrace();\n        }\n    }\n}"
    expected_fix: "import org.hibernate.SessionFactory;\nimport org.hibernate.stat.Statistics;\n\
      import javax.management.ObjectName;\nimport javax.management.MBeanServer;\n\
      import java.lang.management.ManagementFactory;\n\npublic class HibernateJMXIntegration\
      \ {\n\n    private SessionFactory sessionFactory;\n\n    public void registerMBeans()\
      \ {\n        try {\n            MBeanServer server = ManagementFactory.getPlatformMBeanServer();\n\
      \            Statistics stats = sessionFactory.getStatistics();\n          \
      \  ObjectName statsName = new ObjectName(\"org.hibernate:type=statistics\");\n\
      \            server.registerMBean(stats, statsName);\n        } catch (Exception\
      \ e) {\n            e.printStackTrace();\n        }\n    }\n}"
    '# konveyor_guidance': Hibernate no longer provides built-in support for integrating
      itself with JMX environments.
    test_code: "// Stub for Exception\npublic class Exception {\n    private Long\
      \ id;\n    private String name;\n\n    public Exception() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}\n\n// Stub for SessionFactory\npublic class\
      \ SessionFactory {\n    private Long id;\n    private String name;\n\n    public\
      \ SessionFactory() {}\n\n    public Long getId() { return id; }\n    public\
      \ void setId(Long id) { this.id = id; }\n    public String getName() { return\
      \ name; }\n    public void setName(String name) { this.name = name; }\n}"
  migration_complexity: trivial
- rule_id: hibernate6-00220
  description: Hibernate no longer provides built-in support for integrating itself
    with JACC environments
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Hibernate no longer provides built-in support for integrating itself
      with JACC environments
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport org.hibernate.cfg.Environment;\n\
      \npublic class JaccIntegrationExample {\n    public static void main(String[]\
      \ args) {\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      my-persistence-unit\");\n        EntityManager em = emf.createEntityManager();\n\
      \n        java.util.Map<String, Object> configOverrides = new java.util.HashMap<>();\n\
      \        configOverrides.put(Environment.JACC_ENABLED, true);\n        configOverrides.put(Environment.JACC_CONTEXT_ID,\
      \ \"urn:example:jacc\");\n\n        emf = Persistence.createEntityManagerFactory(\"\
      my-persistence-unit\", configOverrides);\n        em = emf.createEntityManager();\n\
      \n        // Business logic here\n\n        em.close();\n        emf.close();\n\
      \    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\n\
      import jakarta.persistence.Persistence;\n\npublic class JaccIntegrationExample\
      \ {\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"my-persistence-unit\");\n \
      \       EntityManager em = emf.createEntityManager();\n\n        // Since Hibernate\
      \ no longer supports JACC directly, we remove the JACC specific configurations\n\
      \        // and proceed with standard EntityManager setup and usage.\n\n   \
      \     // Business logic here\n\n        em.close();\n        emf.close();\n\
      \    }\n}"
    '# konveyor_guidance': Hibernate no longer provides built-in support for integrating
      itself with JACC environments.
  migration_complexity: trivial
- rule_id: hibernate6-00230
  description: Removed hibernate classloader properties
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Removed hibernate classloader properties
    code_snippet: "import org.hibernate.cfg.Configuration;\n\npublic class HibernateConfiguration\
      \ {\n\n    public void setup() {\n        Configuration configuration = new\
      \ Configuration();\n        configuration.setProperty(\"hibernate.classLoader.application\"\
      , ClassLoader.getSystemClassLoader());\n        configuration.setProperty(\"\
      hibernate.classLoader.resources\", ClassLoader.getSystemClassLoader());\n  \
      \      configuration.setProperty(\"hibernate.classLoader.environment\", ClassLoader.getSystemClassLoader());\n\
      \    }\n}"
    expected_fix: "import org.hibernate.cfg.Configuration;\nimport java.util.Collections;\n\
      \npublic class HibernateConfiguration {\n\n    public void setup() {\n     \
      \   Configuration configuration = new Configuration();\n        configuration.setProperty(\"\
      hibernate.classLoaders\", Collections.singletonList(ClassLoader.getSystemClassLoader()).toString());\n\
      \    }\n}"
    '# konveyor_guidance': 'These properties are deprecated: use `hibernate.classLoaders`
      instead.'
  migration_complexity: low
- rule_id: hibernate6-00240
  description: Removed hibernate properties
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Removed hibernate properties
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\n\npublic class DatabaseConfig {\n\n \
      \   public static void main(String[] args) {\n        EntityManagerFactory emf\
      \ = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n       \
      \ EntityManager em = emf.createEntityManager();\n        em.getTransaction().begin();\n\
      \n        // Violating the migration rule by using a removed property\n    \
      \    em.setProperty(\"hibernate.hbm2ddl.auto\", \"create\");\n\n        em.getTransaction().commit();\n\
      \        em.close();\n        emf.close();\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\n\
      import jakarta.persistence.Persistence;\n\npublic class DatabaseConfig {\n\n\
      \    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n        em.getTransaction().begin();\n\
      \n        // Updated property according to migration guidance\n        em.setProperty(\"\
      jakarta.persistence.schema-generation.database.action\", \"create\");\n\n  \
      \      em.getTransaction().commit();\n        em.close();\n        emf.close();\n\
      \    }\n}"
    '# konveyor_guidance': 'This property has been removed: use `jakarta.persistence.create-database-schemas`
      or `hibernate.hbm2ddl.create_namespaces` instead'
  migration_complexity: trivial
- rule_id: hibernate6-00250
  description: Renamed hibernate property hibernate.ejb.metamodel.population
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Renamed hibernate property hibernate.ejb.metamodel.population
    code_snippet: "import javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\
      \npublic class HibernateConfig {\n\n    public static void main(String[] args)\
      \ {\n        java.util.Map<String, String> properties = new java.util.HashMap<>();\n\
      \        properties.put(\"hibernate.ejb.metamodel.population\", \"enabled\"\
      );\n\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n    }\n}"
    expected_fix: "import javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\
      import java.util.HashMap;\nimport java.util.Map;\n\npublic class HibernateConfig\
      \ {\n\n    public static void main(String[] args) {\n        Map<String, String>\
      \ properties = new HashMap<>();\n        properties.put(\"hibernate.jpa.metamodel.population\"\
      , \"enabled\");\n\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n    }\n}"
    '# konveyor_guidance': 'This property has been removed: please use `hibernate.jpa.metamodel.population`
      instead'
  migration_complexity: trivial
- rule_id: hibernate6-00251
  description: Renamed hibernate property hibernate.ejb.cfgfile
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Renamed hibernate property hibernate.ejb.cfgfile
    code_snippet: "import javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\
      \npublic class HibernateConfig {\n\n    public static void main(String[] args)\
      \ {\n        java.util.Map<String, String> properties = new java.util.HashMap<>();\n\
      \        properties.put(\"hibernate.ejb.cfgfile\", \"src/main/resources/hibernate.cfg.xml\"\
      );\n\n        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", properties);\n    }\n}"
    expected_fix: "import javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\
      import java.util.HashMap;\nimport java.util.Map;\n\npublic class HibernateConfig\
      \ {\n\n    public static void main(String[] args) {\n        Map<String, String>\
      \ properties = new HashMap<>();\n        properties.put(\"hibernate.cfg_xml_file\"\
      , \"src/main/resources/hibernate.cfg.xml\");\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \    }\n}"
    '# konveyor_guidance': 'This property has been removed: please use `hibernate.cfg_xml_file`
      instead'
  migration_complexity: trivial
- rule_id: hibernate6-00252
  description: Renamed hibernate property hibernate.ejb.xml_files
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Renamed hibernate property hibernate.ejb.xml_files
    code_snippet: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateConfiguration {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.ejb.xml_files\", \"META-INF/orm.xml\");\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        EntityManager em = emf.createEntityManager();\n        \n        //\
      \ Business logic here\n        \n        em.close();\n        emf.close();\n\
      \    }\n}"
    expected_fix: "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\
      import javax.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateConfiguration {\n\n    public static void main(String[] args)\
      \ {\n        Properties properties = new Properties();\n        properties.setProperty(\"\
      hibernate.orm_xml_files\", \"META-INF/orm.xml\");\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        EntityManager em = emf.createEntityManager();\n        \n        //\
      \ Business logic here\n        \n        em.close();\n        emf.close();\n\
      \    }\n}"
    '# konveyor_guidance': 'This property has been removed: please use `hibernate.orm_xml_files`
      instead'
  migration_complexity: trivial
- rule_id: hibernate6-00253
  description: Renamed hibernate property hibernate.hbmxml.files
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Renamed hibernate property hibernate.hbmxml.files
    code_snippet: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.Session;\n\
      \n@ApplicationScoped\npublic class LegacyHibernateConfig {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void configureHibernate()\
      \ {\n        Session session = entityManager.unwrap(Session.class);\n      \
      \  session.getSessionFactory().getProperties().put(\"hibernate.hbmxml.files\"\
      , \"path/to/legacy-mappings.hbm.xml\");\n    }\n}"
    expected_fix: "import javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\n\
      import javax.persistence.PersistenceContext;\nimport org.hibernate.Session;\n\
      \n@ApplicationScoped\npublic class LegacyHibernateConfig {\n\n    @PersistenceContext\n\
      \    private EntityManager entityManager;\n\n    public void configureHibernate()\
      \ {\n        Session session = entityManager.unwrap(Session.class);\n      \
      \  session.getSessionFactory().getProperties().put(\"hibernate.hbm_xml_files\"\
      , \"path/to/legacy-mappings.hbm.xml\");\n    }\n}"
    '# konveyor_guidance': 'This property has been removed: please use `hibernate.hbm_xml_files`
      instead'
    test_code: "import jakarta.inject.Inject;\nimport jakarta.enterprise.context.ApplicationScoped;\n\
      \n// Stub for EntityManager\npublic class EntityManager {\n    private Long\
      \ id;\n    private String name;\n\n    public EntityManager() {}\n\n    public\
      \ Long getId() { return id; }\n    public void setId(Long id) { this.id = id;\
      \ }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00254
  description: Renamed hibernate property hibernate.ejb.loaded.classes
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Renamed hibernate property hibernate.ejb.loaded.classes
    code_snippet: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\n\
      import jakarta.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateConfiguration {\n\n    public EntityManager createEntityManager()\
      \ {\n        Properties properties = new Properties();\n        properties.put(\"\
      hibernate.ejb.loaded.classes\", new Class[] {MyEntity.class});\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        return emf.createEntityManager();\n    }\n\n    public static class\
      \ MyEntity {\n        // Entity details\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\n\
      import jakarta.persistence.Persistence;\nimport java.util.Properties;\n\npublic\
      \ class HibernateConfiguration {\n\n    public EntityManager createEntityManager()\
      \ {\n        Properties properties = new Properties();\n        properties.put(\"\
      hibernate.loaded_classes\", new Class[] {MyEntity.class});\n\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\", properties);\n\
      \        return emf.createEntityManager();\n    }\n\n    public static class\
      \ MyEntity {\n        // Entity details\n    }\n}"
    '# konveyor_guidance': 'This property has been removed: please use `hibernate.loaded_classes`
      instead'
    test_code: "// Stub for EntityManager\npublic class EntityManager {\n    private\
      \ Long id;\n    private String name;\n\n    public EntityManager() {}\n\n  \
      \  public Long getId() { return id; }\n    public void setId(Long id) { this.id\
      \ = id; }\n    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00255
  description: The hibernate property under 'hibernate.ejb' has been renamed.
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: The hibernate property under 'hibernate.ejb' has been renamed.
    code_snippet: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\n\
      import jakarta.persistence.Persistence;\n\npublic class LegacyHibernateConfig\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n\n        try {\n     \
      \       em.getTransaction().begin();\n            // Business logic here\n \
      \           em.getTransaction().commit();\n        } catch (Exception e) {\n\
      \            em.getTransaction().rollback();\n        } finally {\n        \
      \    em.close();\n            emf.close();\n        }\n    }\n}"
    expected_fix: "import jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\n\
      import jakarta.persistence.Persistence;\n\npublic class LegacyHibernateConfig\
      \ {\n\n    public static void main(String[] args) {\n        EntityManagerFactory\
      \ emf = Persistence.createEntityManagerFactory(\"myPersistenceUnit\");\n   \
      \     EntityManager em = emf.createEntityManager();\n\n        try {\n     \
      \       em.getTransaction().begin();\n            // Business logic here\n \
      \           em.getTransaction().commit();\n        } catch (Exception e) {\n\
      \            em.getTransaction().rollback();\n        } finally {\n        \
      \    em.close();\n            emf.close();\n        }\n    }\n}"
    '# konveyor_guidance': 'This property has been removed: please use `hibernate.{{property}}`
      instead'
    test_code: "// Stub for Exception\npublic class Exception {\n    private Long\
      \ id;\n    private String name;\n\n    public Exception() {}\n\n    public Long\
      \ getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\
      \    public String getName() { return name; }\n    public void setName(String\
      \ name) { this.name = name; }\n}"
  migration_complexity: low
- rule_id: hibernate6-00257
  description: Renamed hibernate property hibernate.ejb.entitymanager_factory_name
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Renamed hibernate property hibernate.ejb.entitymanager_factory_name
    code_snippet: "import javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\
      \npublic class EntityManagerFactoryProvider {\n\n    public EntityManagerFactory\
      \ createEntityManagerFactory() {\n        return Persistence.createEntityManagerFactory(\"\
      myPersistenceUnit\", \n            java.util.Map.of(\"hibernate.ejb.entitymanager_factory_name\"\
      , \"myCustomFactory\"));\n    }\n}"
    expected_fix: "import javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\
      import java.util.Map;\n\npublic class EntityManagerFactoryProvider {\n\n   \
      \ public EntityManagerFactory createEntityManagerFactory() {\n        return\
      \ Persistence.createEntityManagerFactory(\"myPersistenceUnit\", \n         \
      \   Map.of(\"hibernate.session_factory_name\", \"myCustomFactory\"));\n    }\n\
      }"
    '# konveyor_guidance': 'This property has been removed: please use `hibernate.session_factory_name`
      instead'
  migration_complexity: trivial
- rule_id: hibernate6-00270
  description: Community dialects moved to a separate module
  severity: low
  category: potential
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Community dialects moved to a separate module
    code_snippet: "import jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\n\
      import jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.annotations.GenericGenerator;\nimport org.hibernate.dialect.CUBRIDDialect;\n\
      \n@Entity\npublic class ExampleEntity {\n\n    @Id\n    @GeneratedValue(strategy\
      \ = GenerationType.AUTO, generator = \"native\")\n    @GenericGenerator(name\
      \ = \"native\", strategy = \"native\", parameters = {\n        @org.hibernate.annotations.Parameter(name\
      \ = \"dialect\", value = \"org.hibernate.dialect.CUBRIDDialect\")\n    })\n\
      \    private Long id;\n\n    // Other fields and methods\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\n\
      import jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.annotations.GenericGenerator;\nimport org.hibernate.annotations.Parameter;\n\
      \n@Entity\npublic class ExampleEntity {\n\n    @Id\n    @GeneratedValue(strategy\
      \ = GenerationType.AUTO, generator = \"native\")\n    @GenericGenerator(name\
      \ = \"native\", strategy = \"native\", parameters = {\n        @Parameter(name\
      \ = \"dialect\", value = \"org.hibernate.community.dialect.CUBRIDDialect\")\n\
      \    })\n    private Long id;\n\n    // Other fields and methods\n}"
    '# konveyor_guidance': "As of Hibernate 6.0, some dialect classes that are maintained\
      \ by vendors or individuals, as opposed to the Hibernate team, have been moved\
      \ to a separate Maven artifact: `org.hibernate.orm:hibernate-community-dialects`.\n\
      \n Note that the new artifact is not included in the EAP 8 distribution and\
      \ will have to be added manually."
  migration_complexity: low
- rule_id: hibernate6-00280
  description: Multitenancy in Hibernate ORM has been simplified
  severity: low
  category: mandatory
  source: /Users/tsanders/Workspace/rulesets/default/generated/eap8/154-hibernate6.windup.yaml
  test_cases:
  - id: tc001
    language: java
    context: Multitenancy in Hibernate ORM has been simplified
    code_snippet: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.annotations.TenantId;\n\n@Entity\npublic class User {\n\
      \    @Id\n    private Long id;\n\n    @TenantId\n    private String tenantId;\n\
      \n    // Getters and setters\n    public Long getId() {\n        return id;\n\
      \    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\
      \    public String getTenantId() {\n        return tenantId;\n    }\n\n    public\
      \ void setTenantId(String tenantId) {\n        this.tenantId = tenantId;\n \
      \   }\n}"
    expected_fix: "import jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\
      import org.hibernate.annotations.TenantId;\n\n@Entity\npublic class User {\n\
      \    @Id\n    private Long id;\n\n    @TenantId\n    private String tenantId;\n\
      \n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long\
      \ id) {\n        this.id = id;\n    }\n\n    public String getTenantId() {\n\
      \        return tenantId;\n    }\n\n    public void setTenantId(String tenantId)\
      \ {\n        this.tenantId = tenantId;\n    }\n}"
    '# konveyor_guidance': "Multitenancy in Hibernate ORM has been simplified. Hibernate\
      \ will now infer whether multitenancy is enabled or not automatically.\n - If\
      \ a MultiTenantConnectionProvider is configured, Hibernate ORM will assume either\
      \ database- or schema-based multitenancy (there is no difference between those\
      \ two as far as Hibernate ORM is concerned).\n - If an entity property is annotated\
      \ with the new @TenantId annotation, Hibernate ORM will assume discriminator-based\
      \ multitenancy (which is a new feature).\n \n See links for information on how\
      \ to migrate."
  migration_complexity: low
prompt: 'You are helping migrate Java EE code to Quarkus based on static analysis
  rules.


  MIGRATION TARGET: Quarkus with Jakarta EE APIs

  - Use Jakarta EE packages (jakarta.*) NOT Java EE (javax.*)

  - Use CDI annotations: @ApplicationScoped, @Inject, @SessionScoped

  - Use Jakarta Persistence and Jakarta Transactions

  - DO NOT use Spring Framework (@Service, @Component, @Autowired, etc.)


  Rule Violation:

  {rule_description}


  Konveyor Migration Guidance:

  {konveyor_message}


  Original Code:

  ```{language}

  {code_snippet}

  ```


  Context: {context}


  Please provide:

  1. The COMPLETE corrected code that resolves the violation (include ALL original
  code)

  2. A brief explanation of the changes made


  IMPORTANT:

  - Provide the ENTIRE class with ALL fields and methods, not just the parts you changed

  - Use Jakarta EE (jakarta.*) packages, not Spring Framework

  - Follow Quarkus best practices


  Format your response as:

  FIXED CODE:

  ```{language}

  [your complete fixed code here]

  ```


  EXPLANATION:

  [your explanation here]'
